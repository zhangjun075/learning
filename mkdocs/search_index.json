{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to \u5f20\u5747\u7684\u7b14\u8bb0", 
            "title": "index"
        }, 
        {
            "location": "/#welcome-to", 
            "text": "", 
            "title": "Welcome to \u5f20\u5747\u7684\u7b14\u8bb0"
        }, 
        {
            "location": "/microservice/", 
            "text": "architecture\n\n\n\n\n\n\nspring-boot\n\n\n\n\n\n\n\u7ed3\u5408maven/gradle\u6784\u5efaspring-boot\u9879\u76ee\n\n\n\u6784\u5efa\u7684\u65f6\u5019\u52a0\u5165spring-boot\u7684pom\u652f\u6301\n\n\n\n\n    \n!-- Inherit defaults from Spring Boot --\n\n    \nparent\n\n        \ngroupId\norg.springframework.boot\n/groupId\n\n        \nartifactId\nspring-boot-starter-parent\n/artifactId\n\n        \nversion\n2.0.0.BUILD-SNAPSHOT\n/version\n\n    \n/parent\n\n\n    \n!-- Add typical dependencies for a web application --\n\n    \ndependencies\n\n        \ndependency\n\n            \ngroupId\norg.springframework.boot\n/groupId\n\n            \nartifactId\nspring-boot-starter-web\n/artifactId\n\n        \n/dependency\n\n    \n/dependencies\n\n\n    \n!-- Package as an executable jar --\n\n    \nbuild\n\n        \nplugins\n\n            \nplugin\n\n                \ngroupId\norg.springframework.boot\n/groupId\n\n                \nartifactId\nspring-boot-maven-plugin\n/artifactId\n\n            \n/plugin\n\n        \n/plugins\n\n    \n/build\n\n\n\n\n\n\n\n\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\n\n\n\n\n\n\n\n\n\u5b8c\u5584\u9879\u76ee\u4fe1\u606f\n\n\n\u5728main\u76ee\u5f55\u4e0b\u65b0\u5efaresources\u76ee\u5f55\n\n\n\u589e\u52a0application.properties\u6587\u4ef6\n\n\n\u5728application.properties\u4e2d\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\n\n\n\n\n\n\n\n\nspring.application.name=test\nserver.port=9009\n\nlogging.path=./data/logs/\nlogging.level.root=debug\n\n\n\n\n\n\n\u589e\u52a0spring-boot\u7684\u542f\u52a8\u652f\u6301\n\n\n\n\n@SpringBootApplication\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}\n\n\n\n\n\n\n\u521b\u5efarestful\u63a5\u53e3\n\n\n\n\n@RestController\n@Slf4j\npublic class Demo {\n\n    @GetMapping(value = \n/demo\n)\n    public String demo(){\n        log.info(\ndemo\n);\n        return \ndemo\n;\n    }\n\n}     \n\n\n\n\n\n\n\u4e2d\u95f4\u9700\u8981\u52a0\u5165slf4j\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u542f\u52a8springboot\u7684\u5e94\u7528\uff0c\u901a\u8fc7postman\u5373\u53ef\u8bbf\u95ee\n\n\n\n\n\nspring-cloud\n\n\n\n\n\u9879\u76ee\u52a0\u5165springcloud\u7684\u652f\u6301(\u7ed3\u5408consul)\n\n\n\n\ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-starter\n/artifactId\n\n      \nversion\n1.1.7.RELEASE\n/version\n\n    \n/dependency\n\n\n    \ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-dependencies\n/artifactId\n\n      \nversion\nCamden.SR5\n/version\n\n    \n/dependency\n\n\n    \ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-starter-consul-discovery\n/artifactId\n\n      \nversion\n1.1.2.RELEASE\n/version\n\n    \n/dependency\n\n\n\n\n\n\n\n\u542f\u52a8\u589e\u52a0\u670d\u52a1\u6ce8\u518c\u548c\u53d1\u73b0\u7684\u6ce8\u89e3\n\n\n\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}\n\n\n\n\n\n\nspringcloud\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u662f\u6574\u4e2abootapplication\u7684\u7236\u73af\u5883\n\n\n\n\nA Spring Cloud application operates by creating a \nbootstrap\n context, which is a parent context for the main application. Out of the box it is responsible for loading configuration properties from the external sources, and also decrypting properties in the local external configuration files. The two contexts share an Environment which is the source of external properties for any Spring application. Bootstrap properties are added with high precedence, so they cannot be overridden by local configuration, by default.\nThe bootstrap context uses a different convention for locating external configuration than the main application context, so instead of application.yml (or .properties) you use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate\n\n\n\n\n\n\n\u589e\u52a0bootstrap.properties\u914d\u7f6e\u6587\u4ef6\n\n\n\n\nspring.application.name=test\nserver.port=9009\n\n\n\n\n\n\n\u5728application.properties\u4e2d\u589e\u52a0consul\u6ce8\u518c\u4e2d\u5fc3\n\n\n\n\nspring.cloud.consul.host=localhost\nspring.cloud.consul.port=8500\nspring.cloud.consul.enabled=true\nspring.cloud.consul.discovery.prefer-ip-address=true\nspring.cloud.consul.discovery.instance-id=${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}\n\n\n\n\n\n\n\u542f\u52a8\u5e94\u7528\uff0c\u767b\u9646consul\u63a7\u5236\u53f0\uff0c\u53d1\u73b0consul\u7684\u670d\u52a1critical\n\n\n\n\n\n\n\n\n\u90a3\u662f\u56e0\u4e3a\u6ca1\u6709\u542f\u52a8springboot\u7684\n\n\n\n\n    \ndependency\n\n      \ngroupId\norg.springframework.boot\n/groupId\n\n      \nartifactId\nspring-boot-starter-actuator\n/artifactId\n\n      \nversion\n1.4.4.RELEASE\n/version\n\n    \n/dependency\n\n\n\n\n\n\n\n\n\n\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u540e\u6b63\u5e38\n\n\n\n\n\n\n\n\u8bf4\u660e\uff1a\u5e38\u89c4\u670d\u52a1\u6ce8\u518c\u662f\u901a\u8fc7client\u6ce8\u518c\u5230server\u4e0a\u3002\u672c\u793a\u4f8b\u76f4\u63a5\u6ce8\u518c\u5230server\u3002\u4e0d\u7b26\u5408consul\u7684\u67b6\u6784\u539f\u5219\u3002\n\n\n\n\n\n\nconfig\n\n\n\n\nSpring Cloud Config provides server and client-side support for externalized configuration in a distributed system.\n\n\n\n\nconfigServer\n\n\n\n\n\n\nconfigServer\u662f\u4e00\u4e2aspringboot\u9879\u76ee\u3002\u90e8\u7f72\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\n\n\n\n\n\u96c6\u7fa4\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u524d\u7aef\u52a0nginx\u3002\n\n\n\u670d\u52a1\u6ce8\u518c\u7684\u65b9\u5f0f\u8fdb\u884c\u90e8\u7f72\uff0c\u6ce8\u518c\u5230consul\u3002configClient\u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u7684\u65b9\u5f0f\u8c03\u7528\u3002\n\n\n\n\n\n\n\n\n\u4ee3\u7801\u7684\u6258\u7ba1\u53ef\u4ee5\u91c7\u7528git\u6216\u8005svn\u7684\u65b9\u5f0f\n\n\n\n\n\n\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n          username: trolley\n          password: strongpassword\n\n\n\n\n\n\nbootstrap\u542f\u52a8\u7684\u65f6\u5019\u5982\u4e0b\n\n\n\n\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigServer {\n  public static void main(String[] args) {\n    SpringApplication.run(ConfigServer.class, args);\n  }\n}\n\n\n\n\n\n\n\n\n\u5982\u679c\u91c7\u7528\u670d\u52a1\u6ce8\u518c\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u9700\u8981\u5f15\u5165consul\u6216\u8005eureka\u7ec4\u4ef6\u3002\n\n\n\n\n\n\n Force pull in Git Repositories \n\n\n\n\n\u8bf7\u53c2\u7167http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html\n\n\n\n\n\n\n\n\nAs mentioned before Spring Cloud Config Server makes a clone of the remote git repository and if somehow the local copy gets dirty (e.g. folder content changes by OS process) so Spring Cloud Config Server cannot update the local copy from remote repository.\nTo solve this there is a force-pull property that will make Spring Cloud Config Server force pull from remote repository if the local copy is dirty. Example:\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n          force-pull: true\n\n\n\n\n\n\n\u8e29\u5751\u5b9e\u5f55\n\n\n\n\ndependencyManagement\n\n    \ndependencies\n\n      \ndependency\n\n        \ngroupId\norg.springframework.cloud\n/groupId\n\n        \nartifactId\nspring-cloud-dependencies\n/artifactId\n\n        \nversion\nBrixton.RELEASE\n/version\n\n        \ntype\npom\n/type\n\n        \nscope\nimport\n/scope\n\n      \n/dependency\n\n    \n/dependencies\n\n  \n/dependencyManagement\n\n\n\n\n\n\u4f46\u662fconfig-server\u7528\u7684\u662f1.3\u7684\u7248\u672c\uff0c\u5bfc\u81f4\u5728\u9a8c\u8bc1\u7684\u65f6\u5019/health\u7b49\u62a5500\u5185\u90e8\u9519\u8bef\u3002\n\n\n\u6ce8\u610f\uff1aspringcloud \u7684\u7248\u672c\u4e00\u5b9a\u8981\u4fdd\u6301\u4e00\u81f4\n\n\nconfigClient\n\n\n\n\n\u8bf7\u53c2\u7167http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_spring_cloud_config_client\n\n\n Config First Bootstrap \n \u5f85\u7eed\u3002\u3002\u3002\u3002\n\n\n Discovery First Bootstrap \n \u5f85\u7eed\u3002\u3002\u3002\u3002\n\n\n Config Client Fail Fast \n\u3002\u5f85\u7eed\u3002\u3002\u3002\u3002\n\n\n\n\n Config Client Retry \n   \u5f85\u7eed\u3002\u3002\u3002\u3002\n\n\n\n\n\n\n\u5206\u5e03\u5f0f\u5237\u65b0\uff1a\u91c7\u7528cloud-bus\u7684\u5f62\u5f0f;cloud-bus\u53ef\u4ee5\u7528\u6d88\u606f\u961f\u5217\u6765\u5b9e\u73b0\u3002\n\n\n\n\n\u5728\u5ba2\u6237\u7aef\u9700\u8981\u5f00\u542f@Refreshscope\u6ce8\u89e3\u3002\n\n\n\n\n\n\n\u5728bootstrap.properties\u6587\u4ef6\u4e2d\u589e\u52a0\u6ce8\u89e3\n\n\n\n\n#config\nspring.cloud.config.enabled=false\nspring.cloud.config.discovery.enabled=${spring.cloud.config.enabled}\nspring.cloud.config.discovery.service-id=ppdai-config-server\nspring.cloud.config.fail-fast=true\n\n\n\n\nfeign\n\n\nFeign is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka to provide a load balanced http client when using Feign.\n\n\n\n\n\n\nfeign\u662f\u4e00\u4e2a\u58f0\u660e\u5f0f\u7684\u5ba2\u6237\u7aef\uff0cspringcloud\u7684feign-client\u5305\u542b\u4e86ribbon\u548chystrix\u7684\u652f\u6301\n\n\n\u5f15\u5165feign\n\n\n\n\n    \ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-starter-feign\n/artifactId\n\n      \nversion\n1.2.3.RELEASE\n/version\n\n    \n/dependency\n\n\n\n\n\n\n\n\u9879\u76ee\u542f\u52a8\u589e\u52a0feignclient\u7684\u652f\u6301\n\n\n\n\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}\n\n\n\n\n\n\n\u589e\u52a0client\u7684\u76ee\u5f55\uff0c\u521b\u5efaconsumer\u7684interface\n\n\n\n\n@FeignClient(value = \nxzxxxx\n)\npublic interface Demoa {\n\n    @GetMapping(value = \n/demo\n)\n    public String demo();\n\n}\n## value:\u6240\u8981\u8c03\u7528\u7684\u670d\u52a1\u7684\u540d\u5b57\u3002\n\n\n\n\n\n\n\n\n\u9879\u76ee\u542f\u52a8\u7684\u65f6\u5019\u4f1a,context\u4f1a\u5b9e\u4f8b\u5316Demoa(singleton-\nFeignClientFactoryBean)\n\n\n\n\n\n\n\n\n\nfeign\u5b58\u5728\u91cd\u8bd5:\u8fde\u63a5\u8d85\u65f6\u9ed8\u8ba4\u662f10s\uff0c\u8bfb\u53d6\u8d85\u65f6\u9ed8\u8ba4\u662f60s\uff0c\u5982\u679c\u8bfb\u53d6\u8d85\u65f6\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u8fdb\u884c\u91cd\u8bd5\uff0c\u5e76\u8c03\u7528ribbo\u7ec4\u4ef6\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u53d1\u9001\u8bf7\u6c42\u3002\u56e0\u6b64\uff0c\u5728\u9879\u76ee\u4e2d\u6ce8\u610f\uff0c\u9700\u8981\u5173\u95ed\u5e95\u5c42\u7684httpclient\u6216\u8005okhttpclient\u7684\u91cd\u8bd5\uff0c\u9632\u6b62\u5728\u901a\u8baf\u5c42\u51fa\u73b0\u91cd\u53d1\u3002\u5728\u670d\u52a1\u7aef\u4e5f\u8981\u505a\u597d\u5e42\u7b49\u3002\n\n\n\n\n\n\n\nfeign\u7684\u8d85\u65f6\u91cd\u8bd5\u673a\u5236\u5728\u5168\u5c40\u8fdb\u884c\u5173\u95ed\n\n\n\n\n\n\npublic class DemoApplicationBootup {\n    public static void main(String[] args){\n        SpringApplication.run(DemoApplicationBootup.class,args);\n    }\n    @Bean\n    public Retryer retryer() {\n        return Retryer.NEVER_RETRY;\n    }\n    @Bean\n    Request.Options feignOptions() {\n        return new Request.Options(/**connectTimeoutMillis**/4 * 1000, /** readTimeoutMillis **/ 10* 1000);\n    }\n}\n\n\n\n\n\n\n\u5728controller\u4e2d\u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165Demoa\u5b9e\u4f8b\n\n\n\n\n@RestController\n@Slf4j\npublic class Demo {\n\n    @Autowired\n    Demoa demoa;\n\n    @GetMapping(value = \n/demo\n)\n    public String demo(){\n        log.info(\ndemo\n);\n        return \ndemo\n;\n    }\n\n}\n\n\n\n\nribbon\n\n\nRibbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.\nA central concept in Ribbon is that of the named client. Each load balancer is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer (e.g. using the @FeignClient annotation). Spring Cloud creates a new ensemble as an ApplicationContext on demand for each named client using \n RibbonClientConfiguration \n. This contains (amongst other things) an ILoadBalancer, a RestClient, and a ServerListFilter.\n\n\n\n\n\u6e90\u7801\u89e3\u6790\u67e5\u770bhttp://www.tuicool.com/articles/7VJzq2U\n\n\n\u6e90\u7801\u89e3\u6790\u67e5\u770bhttp://www.tuicool.com/articles/vANVFnM\n\n\n\n\n\nhystrix\n\n\n\n* feign\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86hystrix\u7684\u652f\u6301\uff0c\u5728\u542f\u52a8\u7684pom\u4e2d\u52a0\u5165hystrix\n\n\n    \ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-starter-hystrix\n/artifactId\n\n      \nversion\nRELEASE\n/version\n\n    \n/dependency\n\n\n\n\n\n\n\nhystrix\u652f\u6301\u4e24\u79cd\u6a21\u5f0f\u8fdb\u884c\u9694\u79bb\n\n\n\u7ebf\u7a0b\u6c60\u6a21\u5f0f\n\n\n\u4fe1\u53f7\u91cf\u6a21\u5f0f\n\n\n\n\n\n\n\u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff1a\u5728\u65b9\u6cd5\u4e0a\u52a0\u5982\u4e0b\u4ee3\u7801\n\n\n\n\n@HystrixCommand(threadPoolKey = \nhellopool\n,\n            fallbackMethod = \ntest\n,\n            commandProperties = {\n                    @HystrixProperty(name = \nexecution.isolation.thread.timeoutInMilliseconds\n, value = \n2000\n),\n                    @HystrixProperty(name = \nmetrics.rollingStats.numBuckets\n, value = \n10\n),\n                    @HystrixProperty(name = \nmetrics.rollingStats.timeInMilliseconds\n, value = \n10000\n),\n                    @HystrixProperty(name = \ncircuitBreaker.enabled\n, value = \ntrue\n),\n                    @HystrixProperty(name = \ncircuitBreaker.requestVolumeThreshold\n, value = \n5\n),\n                    @HystrixProperty(name = \ncircuitBreaker.sleepWindowInMilliseconds\n, value = \n10000\n)\n            })\n    public String hello(){\n        log.info(\nthrad local\n,String.valueOf(threadLocal.get()));\n        return demoClient.hello();\n    }\n    public String test(){\n        log.info(\nthrad local\n,String.valueOf(threadLocal.get()));\n        return \nfallback-cccccc\n;\n    }\n\n\n\n\n\n\n\u542f\u52a8\u52a0\u8f7d\u65e5\u5fd7\u5982\u4e0b\n\n\n\n\u89e3\u6790\u5982\u4e0b\n\n\ncircuitBreaker.enabled\uff1a\u65ad\u8def\u5668\u5f00\u5173\uff0c\u7528\u6765\u68c0\u6d4b\u670d\u52a1\u7684\u662f\u5426\u5065\u5eb7\uff0c\u5728\u65ad\u8def\u5668\u8df3\u95f8\u7684\u60c5\u51b5\u4e0b\u77ed\u8def\u8bf7\u6c42\n\n\nhystrix.command.HystrixCommandKey.circuitBreaker.enabled\n\n\n\n\n\n\ncircuitBreaker.requestVolumeThreshold\uff1a\u6700\u5c0f\u8bf7\u6c42\u6570\uff0c\u7528\u6765\u8df3\u95f8\u56de\u8def\u3002\u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u8bbe\u7f6e\u4e8620\uff0c\u5c31\u7b9719\u4e2a\u8bf7\u6c42\u90fd\u5931\u8d25\u4e86\u4e5f\u4e0d\u4f1a\u8df3\u95f8\u3002\n\n\ncircuitBreaker.sleepWindowInMilliseconds\uff1a\u8df3\u95f8\u540e\uff0c\u5230\u4e0b\u6b21\u77ed\u8def\u5224\u5b9a\u7684\u95f4\u9694\u65f6\u95f4\n\n\nhystrix\u5728\u7528\u7684\u65f6\u5019\uff0c\u9700\u8981\u5173\u95edfeign\u7684\u91cd\u8bd5\u7b56\u7565.\u5177\u4f53\u5173\u95ed\u65b9\u6cd5\u89c1feign\u63cf\u8ff0\u3002\n\n\n\u5168\u5c40\u7684\u8d85\u65f6\u53ef\u4ee5\u7528hystrix\u6765\u63a7\u5236\uff0c\u8be5\u8d85\u65f6\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u662f\u5168\u5c40\u7684\u3002\n\n\n\n\u5728\u5168\u5c40\u7684\u8d85\u65f6\u4e0b\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528hystrix\u8fdb\u884c\u8d85\u65f6\u7684\u63a7\u5236\uff1a\n\n\nexecution.timeout.enabled\n\n\nexecution.isolation.thread.timeoutInMilliseconds\n\n\nfallback.enabled(hystrix.command.default.fallback.enabled)\n\n\nhystrix.threadpool.default.coreSize=2\uff1a\u6838\u5fc3\u7ebf\u7a0b\u6c60size\u3002HystrixCommands\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u7684\u6700\u5927\u6570\u91cf\u3002\n\n\nhystrix.threadpool.default.maxQueueSize=-1\uff1a\u9ed8\u8ba4-1\uff0c\u4f7f\u7528SynchronousQueue\u3002\u5176\u4ed6\u6b63\u6570\u5219\u4f7f\u7528LinkedBlockingQueue\u3002\u961f\u5217\u5927\u5c0f\u5728\u521d\u59cb\u5316\u65f6\u5019\u751f\u6548\uff0c\u5982\u679c\u8981\u52a8\u6001\u6539\u53d8\u961f\u5217\u5927\u5c0f\u53c2\u8003queueSizeRejectionThreshold\u53c2\u6570\u3002\u5982\u679c\u8981\u5728SynchronousQueue \u548cLinkedBlockingQueue\u4e4b\u95f4\u5207\u6362\u9700\u8981\u91cd\u65b0\u542f\u52a8\uff0c\u4ee5\u4e3a\u7740\u6539\u53d8\u4e86\u961f\u5217\u5927\u5c0f\u5e76\u4e0d\u6539\u53d8\u5f53\u524d\u7684\u961f\u5217\u5b9e\u73b0\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5982\u679c\u91c7\u7528semaphore\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u662f\u540c\u6b65\u7684\u65b9\u5f0f\uff0cthread.timeout\u4e0d\u8d77\u4f5c\u7528\u3002\n\n\n\n\n\n\nhystrix-sample:\u4ee3\u7801\u7ed3\u6784\n\n\n\n\n\n\n\nhystrix-sample:pom.xml\u6587\u4ef6\n\n\n\n\n\n\n  \ndependency\n\n      \ngroupId\ncom.netflix.hystrix\n/groupId\n\n      \nartifactId\nhystrix-core\n/artifactId\n\n      \nversion\nRELEASE\n/version\n\n    \n/dependency\n\n\n\n\n\n\n\nhystrix-sample:\u4ee3\u7801\u8bf4\u660e\n\n\n\n\n\u7f16\u5199command\u7c7b\n\n\n/**\n * Created by junzhang on 2017/5/9.\n */\npublic class HelloCommand extends HystrixCommand {\n    private String name;\n    public HelloCommand() {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\nHelloGroup\n))\n        .andCommandKey(HystrixCommandKey.Factory.asKey(\nHello1Command\n))\n        .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\nHello1CommandPool\n))\n        .andCommandPropertiesDefaults(\n                HystrixCommandProperties.Setter()\n                        .withExecutionTimeoutEnabled(true)\n                        .withExecutionTimeoutInMilliseconds(2000)\n                        .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)\n//                        .withExecutionIsolationThreadInterruptOnTimeout(true)\n//                        .withExecutionIsolationThreadInterruptOnFutureCancel(true)\n        )\n        .andThreadPoolPropertiesDefaults(\n                HystrixThreadPoolProperties\n                .Setter()\n                .withCoreSize(10)\n                .withQueueSizeRejectionThreshold(20)\n        ));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() throws Exception {\n        TimeUnit.SECONDS.sleep(3);\n        System.out.println(\nrun method\n);\n//        throw new Exception(\nmy exception\n);\n        return \nhello world!\n;\n    }\n\n    @Override\n    protected String getFallback() {\n        System.out.println(\nhello world fallback method.\n);\n        return \nhello world fallback method.\n;\n    }\n}\n\n\n\n\n\n\nhystrix-sample:\u8c03\u7528\n\n\n\n\n@Service\npublic class HelloCommandService {\n\n        HelloCommand helloCommand = new HelloCommand();\n      return  helloCommand.execute().toString();\n    }\n}\n\n\n\n\n\n\n\u8fd9\u91cc\u6709\u51e0\u79cd\u8c03\u7528\u65b9\u5f0f\uff1afuture\u3001\u6216\u8005\u7528observer\u3002execute\u548cfuture\u6700\u7ec8\u90fd\u662f\u901a\u8fc7observer\u6765\u5904\u7406\u7684\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\n\u6e90\u7801\n\n\n\n\nzuul\n\n\n Router and Filter \n\n\nRouting in an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM based router and server side load balancer by Netflix.\n\n\n\n\nArchaius\n\n\neureka\n\n\n\n\n eureka server \n\n\npom.xml:\n\n\n\n\n    \nparent\n\n        \ngroupId\norg.springframework.boot\n/groupId\n\n        \nartifactId\nspring-boot-starter-parent\n/artifactId\n\n        \nversion\n1.4.3.RELEASE\n/version\n\n        \nrelativePath/\n \n!-- lookup parent from repository --\n\n    \n/parent\n\n\n    \ndependencies\n\n        \ndependency\n\n            \ngroupId\norg.springframework.cloud\n/groupId\n\n            \nartifactId\nspring-cloud-starter-eureka-server\n/artifactId\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.springframework.boot\n/groupId\n\n            \nartifactId\nspring-boot-starter-test\n/artifactId\n\n            \nscope\ntest\n/scope\n\n        \n/dependency\n\n    \n/dependencies\n\n\n    \ndependencyManagement\n\n        \ndependencies\n\n            \ndependency\n\n                \ngroupId\norg.springframework.cloud\n/groupId\n\n                \nartifactId\nspring-cloud-dependencies\n/artifactId\n\n                \nversion\nBrixton.RELEASE\n/version\n\n                \ntype\npom\n/type\n\n                \nscope\nimport\n/scope\n\n            \n/dependency\n\n        \n/dependencies\n\n    \n/dependencyManagement\n\n\n    \nproperties\n\n        \nproject.build.sourceEncoding\nUTF-8\n/project.build.sourceEncoding\n\n        \nstart-class\neurekademo.EurekaApplication\n/start-class\n\n        \njava.version\n1.8\n/java.version\n\n        \ndocker.image.prefix\nspringcloud\n/docker.image.prefix\n\n    \n/properties\n\n\n\n\n\n\n\n\u542f\u52a8\u7c7b\n\n\n\n\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaApplication {\n\n    public static void main(String[] args){\n        new SpringApplicationBuilder(EurekaApplication.class).web(true).run(args);\n    }\n\n}\n\n\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6application.yml\n\n\n\n\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    registerWithEureka: false #\u662f\u5426\u5c06eureka\u81ea\u8eab\u4f5c\u4e3a\u5e94\u7528\u6ce8\u518c\u5230eureka\u6ce8\u518c\u4e2d\u5fc3\n    fetchRegistry: false #\u8868\u793a\u662f\u5426\u4eceeureka\u670d\u52a1\u5668\u83b7\u53d6\u6ce8\u518c\u4fe1\n    serviceUrl:\n      defaultZone: http://localhost:${server.port}/eureka/  #\u8bbe\u7f6eeureka\u670d\u52a1\u5668\u6240\u5728\u7684\u5730\u5740\uff0c\u67e5\u8be2\u670d\u52a1\u548c\u6ce8\u518c\u670d\u52a1\u90fd\u9700\u8981\u4f9d\u8d56\u8fd9\u4e2a\u5730\u5740\n  server:\n    enable-self-preservation: false #\u662f\u5426\u5f00\u542f\u81ea\u6211\u4fdd\u62a4(\u662f\u5426\u4f1a\u6e05\u9664\u5df2\u7ecf\u4e0b\u7ebf\u7684\u670d\u52a1)\n\n\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6bootstrap.yml\n\n\n\n\nspring:\n  application:\n    name: eureka\n\n\n\n\n\n\n\u5728server\u542f\u52a8\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u81ea\u6211\u4fdd\u62a4\u7684\u9009\u9879\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff0c\u4e0b\u7ebf\u7684\u670d\u52a1\u5728catalog\u4e2d\u4e0d\u4f1a\u81ea\u52a8\u6e05\u9664\uff0c\u5728eureka\u7684\u63a7\u5236\u53f0\u4f1a\u6709\u8b66\u544a\u3002\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u5173\u95ed\uff1a\n\n\n\n\neureka:\n    server:\n        enable-self-preservation: false\n\n\n\n\n\n\n\n\neureka\u53ef\u4ee5\u91c7\u53d6\u96c6\u7fa4\u90e8\u7f72\u7684\u65b9\u5f0f\n\n\n\n\n\n\ndocker\u7ed3\u5408:\u5728\u9879\u76eemain\u76ee\u5f55\u4e0b\u5efa\u7acbdocker\u76ee\u5f55\uff0c\u65b0\u589eDockerfile\u6587\u4ef6\n\n\n\n\n\n\n\n eureka client \n\n\n\n\npom\u6587\u4ef6\u5f15\u5165\n\n\n\n\nparent\n\n    \ngroupId\norg.springframework.boot\n/groupId\n\n    \nartifactId\nspring-boot-starter-parent\n/artifactId\n\n    \nversion\n1.4.5.RELEASE\n/version\n\n  \n/parent\n\n\n  \ngroupId\ncom.ppdai.erueka_client\n/groupId\n\n  \nartifactId\neureka_client\n/artifactId\n\n  \nversion\n1.0-SNAPSHOT\n/version\n\n  \npackaging\njar\n/packaging\n\n\n  \nname\neureka_client\n/name\n\n\n  \nproperties\n\n    \nproject.build.sourceEncoding\nUTF-8\n/project.build.sourceEncoding\n\n    \njava.version\n1.8\n/java.version\n\n  \n/properties\n\n\n\n  \ndependencyManagement\n\n    \ndependencies\n\n      \ndependency\n\n        \ngroupId\norg.springframework.cloud\n/groupId\n\n        \nartifactId\nspring-cloud-dependencies\n/artifactId\n\n        \nversion\nCamden.SR6\n/version\n\n        \ntype\npom\n/type\n\n        \nscope\nimport\n/scope\n\n      \n/dependency\n\n    \n/dependencies\n\n  \n/dependencyManagement\n\n  \ndependencies\n\n    \ndependency\n\n      \ngroupId\norg.springframework.cloud\n/groupId\n\n      \nartifactId\nspring-cloud-starter-eureka\n/artifactId\n\n    \n/dependency\n\n    \ndependency\n\n      \ngroupId\norg.springframework.boot\n/groupId\n\n      \nartifactId\nspring-boot-configuration-processor\n/artifactId\n\n    \n/dependency\n\n    \ndependency\n\n      \ngroupId\njunit\n/groupId\n\n      \nartifactId\njunit\n/artifactId\n\n      \nversion\n4.12\n/version\n\n    \n/dependency\n\n  \n/dependencies\n\n\n\n\n\n\n\n\u542f\u52a8\u7c7b:(i.e. utterly normal Spring Boot app). In this example we use @EnableEurekaClient explicitly, but with only Eureka available you could also use @EnableDiscoveryClient. Configuration is required to locate the Eureka server\n\n\n\n\n@SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\npublic class App {\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(App.class).web(true).run(args);\n    }\n}\n\n\n\n\nconsul\n\n\n\n\nconsul\u53c2\u8003\u5b98\u7f51http://consul.io\n\n\nconsul\u67b6\u6784\u56fe\n\n\n\n\n\n(LAN:\u5c40\u57df\u7f51 ;WAN:\u5e7f\u57df\u7f51)\nclient\u4e0eclient\u4e4b\u95f4\u8d70gossip\u534f\u8bae\uff0c\u534f\u8bae\u7aef\u53e3\u662f8301\nclient\u4e0eserver\u4e4b\u95f4\u6570\u636e\u540c\u6b65\u4e5f\u662f\u8d70gossip\u534f\u8bae\uff0c\u7aef\u53e3\u662f8301\nclient\u4e0eserver\u7684rpc\u8d70tcp\u534f\u8bae\uff0c\u8d70\u7684\u662f8300\u7aef\u53e3\nserver\u4e0eserver\u4e4b\u95f4\u7684\u590d\u5236raft\u534f\u8bae\u8d70\u7684\u662ftcp\u534f\u8bae\uff0c\u7aef\u53e3\u662f8300\n\u4e0d\u540c\u7684dc\u4e4b\u95f4\u7684\u6570\u636e\u8bf7\u6c42\u8d70\u7684\u662f8300\u7aef\u53e3\n\u4e0d\u540c\u7684dc\u7684server\u4e4b\u95f4\u8d70\u7684gossip\u534f\u8bae\uff0c\u7aef\u53e3\u5e7f\u57df\u7f51\u76848302\u7aef\u53e3\n\n\n\n\n\n\ngossip\u534f\u8bae\n\n\n\n\n1. gossip\u80cc\u666f\nGossip\u7b97\u6cd5\u5982\u5176\u540d\uff0c\u7075\u611f\u6765\u81ea\u529e\u516c\u5ba4\u516b\u5366\uff0c\u53ea\u8981\u4e00\u4e2a\u4eba\u516b\u5366\u4e00\u4e0b\uff0c\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u6240\u6709\u7684\u4eba\u90fd\u4f1a\u77e5\u9053\u8be5\u516b\u5366\u7684\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u4e0e\u75c5\u6bd2\u4f20\u64ad\u7c7b\u4f3c\uff0c\u56e0\u6b64Gossip\u6709\u4f17\u591a\u7684\u522b\u540d\u201c\u95f2\u8bdd\u7b97\u6cd5\u201d\u3001\u201c\u75ab\u60c5\u4f20\u64ad\u7b97\u6cd5\u201d\u3001\u201c\u75c5\u6bd2\u611f\u67d3\u7b97\u6cd5\u201d\u3001\u201c\u8c23\u8a00\u4f20\u64ad\u7b97\u6cd5\u201d\u3002  \u4f46Gossip\u5e76\u4e0d\u662f\u4e00\u4e2a\u65b0\u4e1c\u897f\uff0c\u4e4b\u524d\u7684\u6cdb\u6d2a\u67e5\u627e\u3001\u8def\u7531\u7b97\u6cd5\u90fd\u5f52\u5c5e\u4e8e\u8fd9\u4e2a\u8303\u7574\uff0c\u4e0d\u540c\u7684\u662fGossip\u7ed9\u8fd9\u7c7b\u7b97\u6cd5\u63d0\u4f9b\u4e86\u660e\u786e\u7684\u8bed\u4e49\u3001\u5177\u4f53\u5b9e\u65bd\u65b9\u6cd5\u53ca\u6536\u655b\u6027\u8bc1\u660e\u3002\n2. gossip\u7279\u70b9\nGossip\u7b97\u6cd5\u53c8\u88ab\u79f0\u4e3a\u53cd\u71b5\uff08Anti-Entropy\uff09\uff0c\u71b5\u662f\u7269\u7406\u5b66\u4e0a\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u4ee3\u8868\u6742\u4e71\u65e0\u7ae0\uff0c\u800c\u53cd\u71b5\u5c31\u662f\u5728\u6742\u4e71\u65e0\u7ae0\u4e2d\u5bfb\u6c42\u4e00\u81f4\uff0c\u8fd9\u5145\u5206\u8bf4\u660e\u4e86Gossip\u7684\u7279\u70b9\uff1a\u5728\u4e00\u4e2a\u6709\u754c\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u968f\u673a\u5730\u4e0e\u5176\u4ed6\u8282\u70b9\u901a\u4fe1\uff0c\u7ecf\u8fc7\u4e00\u756a\u6742\u4e71\u65e0\u7ae0\u7684\u901a\u4fe1\uff0c\u6700\u7ec8\u6240\u6709\u8282\u70b9\u7684\u72b6\u6001\u90fd\u4f1a\u8fbe\u6210\u4e00\u81f4\u3002\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u77e5\u9053\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u4ec5\u77e5\u9053\u51e0\u4e2a\u90bb\u5c45\u8282\u70b9\uff0c\u53ea\u8981\u8fd9\u4e9b\u8282\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fde\u901a\uff0c\u6700\u7ec8\u4ed6\u4eec\u7684\u72b6\u6001\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u75ab\u60c5\u4f20\u64ad\u7684\u7279\u70b9\u3002  \u8981\u6ce8\u610f\u5230\u7684\u4e00\u70b9\u662f\uff0c\u5373\u4f7f\u6709\u7684\u8282\u70b9\u56e0\u5b95\u673a\u800c\u91cd\u542f\uff0c\u6709\u65b0\u8282\u70b9\u52a0\u5165\uff0c\u4f46\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8fd9\u4e9b\u8282\u70b9\u7684\u72b6\u6001\u4e5f\u4f1a\u4e0e\u5176\u4ed6\u8282\u70b9\u8fbe\u6210\u4e00\u81f4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cGossip\u5929\u7136\u5177\u6709\u5206\u5e03\u5f0f\u5bb9\u9519\u7684\u4f18\u70b9\n3. gossip\u672c\u8d28\nGossip\u662f\u4e00\u4e2a\u5e26\u5197\u4f59\u7684\u5bb9\u9519\u7b97\u6cd5\uff0c\u66f4\u8fdb\u4e00\u6b65\uff0cGossip\u662f\u4e00\u4e2a\u6700\u7ec8\u4e00\u81f4\u6027\u7b97\u6cd5\u3002\u867d\u7136\u65e0\u6cd5\u4fdd\u8bc1\u5728\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u8282\u70b9\u72b6\u6001\u4e00\u81f4\uff0c\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u5728\u201d\u6700\u7ec8\u201c\u6240\u6709\u8282\u70b9\u4e00\u81f4\uff0c\u201d\u6700\u7ec8\u201c\u662f\u4e00\u4e2a\u73b0\u5b9e\u4e2d\u5b58\u5728\uff0c\u4f46\u7406\u8bba\u4e0a\u65e0\u6cd5\u8bc1\u660e\u7684\u65f6\u95f4\u70b9\u3002\n\u56e0\u4e3aGossip\u4e0d\u8981\u6c42\u8282\u70b9\u77e5\u9053\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u6b64\u53c8\u5177\u6709\u53bb\u4e2d\u5fc3\u5316\u7684\u7279\u70b9\uff0c\u8282\u70b9\u4e4b\u95f4\u5b8c\u5168\u5bf9\u7b49\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u7684\u4e2d\u5fc3\u8282\u70b9\u3002\u5b9e\u9645\u4e0aGossip\u53ef\u4ee5\u7528\u4e8e\u4f17\u591a\u80fd\u63a5\u53d7\u201c\u6700\u7ec8\u4e00\u81f4\u6027\u201d\u7684\u9886\u57df\uff1a\u5931\u8d25\u68c0\u6d4b\u3001\u8def\u7531\u540c\u6b65\u3001Pub/Sub\u3001\u52a8\u6001\u8d1f\u8f7d\u5747\u8861\u3002  \u4f46Gossip\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u5197\u4f59\u901a\u4fe1\u4f1a\u5bf9\u7f51\u8def\u5e26\u5bbd\u3001CUP\u8d44\u6e90\u9020\u6210\u5f88\u5927\u7684\u8d1f\u8f7d\uff0c\u800c\u8fd9\u4e9b\u8d1f\u8f7d\u53c8\u53d7\u9650\u4e8e\u901a\u4fe1\u9891\u7387\uff0c\u8be5\u9891\u7387\u53c8\u5f71\u54cd\u7740\u7b97\u6cd5\u6536\u655b\u7684\u901f\u5ea6\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u8bb2\u5728\u5404\u79cd\u573a\u5408\u4e0b\u7684\u4f18\u5316\u65b9\u6cd5\u3002\n4. Gossip\u8282\u70b9\u7684\u901a\u4fe1\u65b9\u5f0f\u53ca\u6536\u655b\u6027 \n\u53c2\u7167\uff1ahttp://wenku.baidu.com/link?url=SSCHAAXypcJvYrDkZL4RRUSMgxeQl9nb1EOaLBsk21PyB1Z9GfXsQ2jkVTDElRJwqUn2QFxV6ut-5Dz1Dki8Rt34BOSAEoXH-YQ-1ZTm46O\n\n\n\n\n\n\n\n\nconsul\u7684\u90e8\u7f72\n\n\n\n\n\u6839\u636e\u4e0d\u540c\u7684\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\uff0c\u4e0b\u8f7d\u6700\u65b0consul\u5ba2\u6237\u7aef,\u6700\u65b0\u7684\u7248\u672c\u96c6\u6210\u4e86web-ui,\u53ea\u8981\u5728\u90e8\u7f72\u7684\u5f00\u542fui\u5373\u53ef\u3002\n\n\n\n\n\u2018\u5355\u673a\u90e8\u7f72\u2019\n\n\n\n\n\u4e0b\u8f7dconsul\u5b89\u88c5\u6587\u4ef6\u3002\n\n\n\u51c6\u5907\u542f\u52a8\u811a\u672c\n\n\n\n\nconsul agent -server -bootstrap -datacenter=zjtest1 -data-dir=./temp/consul/server -ui=true\n\n\n\n\n\u542f\u52a8\u811a\u672c\u8bf4\u660e\n\n\nserver:  This indicates whether the agent is running in server or client mode\n\n\nbootstrap:   a server may be in \"bootstrap\" mode \n\n\ndatacenter:  The -datacenter flag can be used to set the datacenter\n\n\n\n\n\n\n\u542f\u52a8\u65e5\u5fd7\n\n\n\n\n2017/03/23 15:55:40 [WARN] raft: Heartbeat timeout from \"\" reached, starting Election\n    2017/03/23 15:55:40 [INFO] raft: Node at 192.168.50.150:8300 [Candidate] entering Candidate state in term 2\n    2017/03/23 15:55:40 [INFO] raft: Election won. Tally: 1\n    2017/03/23 15:55:40 [INFO] raft: Node at 192.168.50.150:8300 [Leader] entering Leader state\n    2017/03/23 15:55:40 [INFO] consul: cluster leadership acquired\n    2017/03/23 15:55:40 [INFO] consul: New leader elected: JundeMacBook-Pro.local\n    2017/03/23 15:55:40 [INFO] consul: member 'JundeMacBook-Pro.local' joined, marking health alive\n    2017/03/23 15:55:42 [INFO] agent: Synced service 'consul'\n\n\n\n\n\u90e8\u7f72\u5b8c\u6210\u540e\u53ef\u4ee5\u67e5\u770b\n\n\n\n\n$ consul members\nNode                    Address              Status  Type    Build  Protocol  DC\nJundeMacBook-Pro.local  192.168.50.150:8301  alive   server  0.7.2  2         zjtest2\n\n\n\n\n\n\n\u96c6\u7fa4\u90e8\u7f72\n\n\n\n\nserver\u5efa\u8bae\u81f3\u5c11\u4e09\u4e2a\u70b9\u90e8\u7f72\u3002\n\n\n\u6240\u6709\u7684server\u4e0d\u80fd\u4ee5bootstrap\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u72b6\u6001\u7684\u4e0d\u4e00\u81f4\uff0c\u5982\u4e0b\u5f15\u7528\u539f\u6587\u8bf4\u660e\n\n\n\n\nMultiple servers cannot be in bootstrap mode as that would put the cluster in an inconsistent state.\n\n\n\n\n\n\n\u90e8\u7f72\u6b65\u9aa4\n\n\n\n\n\u4ee5bootstrap\u65b9\u5f0f\u90e8\u7f72\u4e00\u53f0server    \n\n\n\u5176\u4ed6server\u4ee5join\u7684\u65b9\u5f0f\u52a0\u5165\n\n\n\u4f18\u96c5\u4e0b\u7ebf\u8be5bootstrap\u7684server\n\n\n\u52a0\u5165\u5230\u5269\u4f59\u4e2d\u7684\u4efb\u610f\u4e00\u53f0\n\n\n\n\n\n\n\n\n\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7consul members\u8fdb\u884c\u67e5\u770b\u96c6\u7fa4\u72b6\u6001", 
            "title": "netflix"
        }, 
        {
            "location": "/microservice/#architecture", 
            "text": "", 
            "title": "architecture"
        }, 
        {
            "location": "/microservice/#spring-boot", 
            "text": "\u7ed3\u5408maven/gradle\u6784\u5efaspring-boot\u9879\u76ee  \u6784\u5efa\u7684\u65f6\u5019\u52a0\u5165spring-boot\u7684pom\u652f\u6301        !-- Inherit defaults from Spring Boot -- \n     parent \n         groupId org.springframework.boot /groupId \n         artifactId spring-boot-starter-parent /artifactId \n         version 2.0.0.BUILD-SNAPSHOT /version \n     /parent \n\n     !-- Add typical dependencies for a web application -- \n     dependencies \n         dependency \n             groupId org.springframework.boot /groupId \n             artifactId spring-boot-starter-web /artifactId \n         /dependency \n     /dependencies \n\n     !-- Package as an executable jar -- \n     build \n         plugins \n             plugin \n                 groupId org.springframework.boot /groupId \n                 artifactId spring-boot-maven-plugin /artifactId \n             /plugin \n         /plugins \n     /build    \u9879\u76ee\u76ee\u5f55\u7ed3\u6784     \u5b8c\u5584\u9879\u76ee\u4fe1\u606f  \u5728main\u76ee\u5f55\u4e0b\u65b0\u5efaresources\u76ee\u5f55  \u589e\u52a0application.properties\u6587\u4ef6  \u5728application.properties\u4e2d\u589e\u52a0\u5982\u4e0b\u5185\u5bb9     spring.application.name=test\nserver.port=9009\n\nlogging.path=./data/logs/\nlogging.level.root=debug   \u589e\u52a0spring-boot\u7684\u542f\u52a8\u652f\u6301   @SpringBootApplication\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}   \u521b\u5efarestful\u63a5\u53e3   @RestController\n@Slf4j\npublic class Demo {\n\n    @GetMapping(value =  /demo )\n    public String demo(){\n        log.info( demo );\n        return  demo ;\n    }\n\n}        \u4e2d\u95f4\u9700\u8981\u52a0\u5165slf4j\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u542f\u52a8springboot\u7684\u5e94\u7528\uff0c\u901a\u8fc7postman\u5373\u53ef\u8bbf\u95ee", 
            "title": "spring-boot"
        }, 
        {
            "location": "/microservice/#spring-cloud", 
            "text": "\u9879\u76ee\u52a0\u5165springcloud\u7684\u652f\u6301(\u7ed3\u5408consul)   dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-starter /artifactId \n       version 1.1.7.RELEASE /version \n     /dependency \n\n     dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-dependencies /artifactId \n       version Camden.SR5 /version \n     /dependency \n\n     dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-starter-consul-discovery /artifactId \n       version 1.1.2.RELEASE /version \n     /dependency    \u542f\u52a8\u589e\u52a0\u670d\u52a1\u6ce8\u518c\u548c\u53d1\u73b0\u7684\u6ce8\u89e3   @SpringBootApplication\n@EnableDiscoveryClient\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}   springcloud\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u662f\u6574\u4e2abootapplication\u7684\u7236\u73af\u5883   A Spring Cloud application operates by creating a  bootstrap  context, which is a parent context for the main application. Out of the box it is responsible for loading configuration properties from the external sources, and also decrypting properties in the local external configuration files. The two contexts share an Environment which is the source of external properties for any Spring application. Bootstrap properties are added with high precedence, so they cannot be overridden by local configuration, by default.\nThe bootstrap context uses a different convention for locating external configuration than the main application context, so instead of application.yml (or .properties) you use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate   \u589e\u52a0bootstrap.properties\u914d\u7f6e\u6587\u4ef6   spring.application.name=test\nserver.port=9009   \u5728application.properties\u4e2d\u589e\u52a0consul\u6ce8\u518c\u4e2d\u5fc3   spring.cloud.consul.host=localhost\nspring.cloud.consul.port=8500\nspring.cloud.consul.enabled=true\nspring.cloud.consul.discovery.prefer-ip-address=true\nspring.cloud.consul.discovery.instance-id=${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}   \u542f\u52a8\u5e94\u7528\uff0c\u767b\u9646consul\u63a7\u5236\u53f0\uff0c\u53d1\u73b0consul\u7684\u670d\u52a1critical     \u90a3\u662f\u56e0\u4e3a\u6ca1\u6709\u542f\u52a8springboot\u7684        dependency \n       groupId org.springframework.boot /groupId \n       artifactId spring-boot-starter-actuator /artifactId \n       version 1.4.4.RELEASE /version \n     /dependency     \u91cd\u65b0\u542f\u52a8\u670d\u52a1\u540e\u6b63\u5e38    \u8bf4\u660e\uff1a\u5e38\u89c4\u670d\u52a1\u6ce8\u518c\u662f\u901a\u8fc7client\u6ce8\u518c\u5230server\u4e0a\u3002\u672c\u793a\u4f8b\u76f4\u63a5\u6ce8\u518c\u5230server\u3002\u4e0d\u7b26\u5408consul\u7684\u67b6\u6784\u539f\u5219\u3002", 
            "title": "spring-cloud"
        }, 
        {
            "location": "/microservice/#config", 
            "text": "Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system.", 
            "title": "config"
        }, 
        {
            "location": "/microservice/#configserver", 
            "text": "configServer\u662f\u4e00\u4e2aspringboot\u9879\u76ee\u3002\u90e8\u7f72\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a   \u96c6\u7fa4\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u524d\u7aef\u52a0nginx\u3002  \u670d\u52a1\u6ce8\u518c\u7684\u65b9\u5f0f\u8fdb\u884c\u90e8\u7f72\uff0c\u6ce8\u518c\u5230consul\u3002configClient\u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u7684\u65b9\u5f0f\u8c03\u7528\u3002     \u4ee3\u7801\u7684\u6258\u7ba1\u53ef\u4ee5\u91c7\u7528git\u6216\u8005svn\u7684\u65b9\u5f0f    spring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n          username: trolley\n          password: strongpassword   bootstrap\u542f\u52a8\u7684\u65f6\u5019\u5982\u4e0b   @SpringBootApplication\n@EnableConfigServer\npublic class ConfigServer {\n  public static void main(String[] args) {\n    SpringApplication.run(ConfigServer.class, args);\n  }\n}    \u5982\u679c\u91c7\u7528\u670d\u52a1\u6ce8\u518c\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u9700\u8981\u5f15\u5165consul\u6216\u8005eureka\u7ec4\u4ef6\u3002     Force pull in Git Repositories    \u8bf7\u53c2\u7167http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html     As mentioned before Spring Cloud Config Server makes a clone of the remote git repository and if somehow the local copy gets dirty (e.g. folder content changes by OS process) so Spring Cloud Config Server cannot update the local copy from remote repository.\nTo solve this there is a force-pull property that will make Spring Cloud Config Server force pull from remote repository if the local copy is dirty. Example:\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n          force-pull: true   \u8e29\u5751\u5b9e\u5f55   dependencyManagement \n     dependencies \n       dependency \n         groupId org.springframework.cloud /groupId \n         artifactId spring-cloud-dependencies /artifactId \n         version Brixton.RELEASE /version \n         type pom /type \n         scope import /scope \n       /dependency \n     /dependencies \n   /dependencyManagement   \u4f46\u662fconfig-server\u7528\u7684\u662f1.3\u7684\u7248\u672c\uff0c\u5bfc\u81f4\u5728\u9a8c\u8bc1\u7684\u65f6\u5019/health\u7b49\u62a5500\u5185\u90e8\u9519\u8bef\u3002  \u6ce8\u610f\uff1aspringcloud \u7684\u7248\u672c\u4e00\u5b9a\u8981\u4fdd\u6301\u4e00\u81f4", 
            "title": "configServer"
        }, 
        {
            "location": "/microservice/#configclient", 
            "text": "\u8bf7\u53c2\u7167http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_spring_cloud_config_client   Config First Bootstrap   \u5f85\u7eed\u3002\u3002\u3002\u3002   Discovery First Bootstrap   \u5f85\u7eed\u3002\u3002\u3002\u3002   Config Client Fail Fast  \u3002\u5f85\u7eed\u3002\u3002\u3002\u3002    Config Client Retry     \u5f85\u7eed\u3002\u3002\u3002\u3002    \u5206\u5e03\u5f0f\u5237\u65b0\uff1a\u91c7\u7528cloud-bus\u7684\u5f62\u5f0f;cloud-bus\u53ef\u4ee5\u7528\u6d88\u606f\u961f\u5217\u6765\u5b9e\u73b0\u3002   \u5728\u5ba2\u6237\u7aef\u9700\u8981\u5f00\u542f@Refreshscope\u6ce8\u89e3\u3002    \u5728bootstrap.properties\u6587\u4ef6\u4e2d\u589e\u52a0\u6ce8\u89e3   #config\nspring.cloud.config.enabled=false\nspring.cloud.config.discovery.enabled=${spring.cloud.config.enabled}\nspring.cloud.config.discovery.service-id=ppdai-config-server\nspring.cloud.config.fail-fast=true", 
            "title": "configClient"
        }, 
        {
            "location": "/microservice/#feign", 
            "text": "Feign is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka to provide a load balanced http client when using Feign.   feign\u662f\u4e00\u4e2a\u58f0\u660e\u5f0f\u7684\u5ba2\u6237\u7aef\uff0cspringcloud\u7684feign-client\u5305\u542b\u4e86ribbon\u548chystrix\u7684\u652f\u6301  \u5f15\u5165feign        dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-starter-feign /artifactId \n       version 1.2.3.RELEASE /version \n     /dependency    \u9879\u76ee\u542f\u52a8\u589e\u52a0feignclient\u7684\u652f\u6301   @SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class App {\n    public static void main( String[] args ) {\n        SpringApplication.run(App.class,args);\n    }\n}   \u589e\u52a0client\u7684\u76ee\u5f55\uff0c\u521b\u5efaconsumer\u7684interface   @FeignClient(value =  xzxxxx )\npublic interface Demoa {\n\n    @GetMapping(value =  /demo )\n    public String demo();\n\n}\n## value:\u6240\u8981\u8c03\u7528\u7684\u670d\u52a1\u7684\u540d\u5b57\u3002    \u9879\u76ee\u542f\u52a8\u7684\u65f6\u5019\u4f1a,context\u4f1a\u5b9e\u4f8b\u5316Demoa(singleton- FeignClientFactoryBean)     feign\u5b58\u5728\u91cd\u8bd5:\u8fde\u63a5\u8d85\u65f6\u9ed8\u8ba4\u662f10s\uff0c\u8bfb\u53d6\u8d85\u65f6\u9ed8\u8ba4\u662f60s\uff0c\u5982\u679c\u8bfb\u53d6\u8d85\u65f6\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u8fdb\u884c\u91cd\u8bd5\uff0c\u5e76\u8c03\u7528ribbo\u7ec4\u4ef6\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u53d1\u9001\u8bf7\u6c42\u3002\u56e0\u6b64\uff0c\u5728\u9879\u76ee\u4e2d\u6ce8\u610f\uff0c\u9700\u8981\u5173\u95ed\u5e95\u5c42\u7684httpclient\u6216\u8005okhttpclient\u7684\u91cd\u8bd5\uff0c\u9632\u6b62\u5728\u901a\u8baf\u5c42\u51fa\u73b0\u91cd\u53d1\u3002\u5728\u670d\u52a1\u7aef\u4e5f\u8981\u505a\u597d\u5e42\u7b49\u3002    feign\u7684\u8d85\u65f6\u91cd\u8bd5\u673a\u5236\u5728\u5168\u5c40\u8fdb\u884c\u5173\u95ed    public class DemoApplicationBootup {\n    public static void main(String[] args){\n        SpringApplication.run(DemoApplicationBootup.class,args);\n    }\n    @Bean\n    public Retryer retryer() {\n        return Retryer.NEVER_RETRY;\n    }\n    @Bean\n    Request.Options feignOptions() {\n        return new Request.Options(/**connectTimeoutMillis**/4 * 1000, /** readTimeoutMillis **/ 10* 1000);\n    }\n}   \u5728controller\u4e2d\u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165Demoa\u5b9e\u4f8b   @RestController\n@Slf4j\npublic class Demo {\n\n    @Autowired\n    Demoa demoa;\n\n    @GetMapping(value =  /demo )\n    public String demo(){\n        log.info( demo );\n        return  demo ;\n    }\n\n}", 
            "title": "feign"
        }, 
        {
            "location": "/microservice/#ribbon", 
            "text": "Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.\nA central concept in Ribbon is that of the named client. Each load balancer is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer (e.g. using the @FeignClient annotation). Spring Cloud creates a new ensemble as an ApplicationContext on demand for each named client using   RibbonClientConfiguration  . This contains (amongst other things) an ILoadBalancer, a RestClient, and a ServerListFilter.   \u6e90\u7801\u89e3\u6790\u67e5\u770bhttp://www.tuicool.com/articles/7VJzq2U  \u6e90\u7801\u89e3\u6790\u67e5\u770bhttp://www.tuicool.com/articles/vANVFnM", 
            "title": "ribbon"
        }, 
        {
            "location": "/microservice/#hystrix", 
            "text": "* feign\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86hystrix\u7684\u652f\u6301\uff0c\u5728\u542f\u52a8\u7684pom\u4e2d\u52a0\u5165hystrix       dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-starter-hystrix /artifactId \n       version RELEASE /version \n     /dependency    hystrix\u652f\u6301\u4e24\u79cd\u6a21\u5f0f\u8fdb\u884c\u9694\u79bb  \u7ebf\u7a0b\u6c60\u6a21\u5f0f  \u4fe1\u53f7\u91cf\u6a21\u5f0f    \u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff1a\u5728\u65b9\u6cd5\u4e0a\u52a0\u5982\u4e0b\u4ee3\u7801   @HystrixCommand(threadPoolKey =  hellopool ,\n            fallbackMethod =  test ,\n            commandProperties = {\n                    @HystrixProperty(name =  execution.isolation.thread.timeoutInMilliseconds , value =  2000 ),\n                    @HystrixProperty(name =  metrics.rollingStats.numBuckets , value =  10 ),\n                    @HystrixProperty(name =  metrics.rollingStats.timeInMilliseconds , value =  10000 ),\n                    @HystrixProperty(name =  circuitBreaker.enabled , value =  true ),\n                    @HystrixProperty(name =  circuitBreaker.requestVolumeThreshold , value =  5 ),\n                    @HystrixProperty(name =  circuitBreaker.sleepWindowInMilliseconds , value =  10000 )\n            })\n    public String hello(){\n        log.info( thrad local ,String.valueOf(threadLocal.get()));\n        return demoClient.hello();\n    }\n    public String test(){\n        log.info( thrad local ,String.valueOf(threadLocal.get()));\n        return  fallback-cccccc ;\n    }   \u542f\u52a8\u52a0\u8f7d\u65e5\u5fd7\u5982\u4e0b  \u89e3\u6790\u5982\u4e0b  circuitBreaker.enabled\uff1a\u65ad\u8def\u5668\u5f00\u5173\uff0c\u7528\u6765\u68c0\u6d4b\u670d\u52a1\u7684\u662f\u5426\u5065\u5eb7\uff0c\u5728\u65ad\u8def\u5668\u8df3\u95f8\u7684\u60c5\u51b5\u4e0b\u77ed\u8def\u8bf7\u6c42  hystrix.command.HystrixCommandKey.circuitBreaker.enabled    circuitBreaker.requestVolumeThreshold\uff1a\u6700\u5c0f\u8bf7\u6c42\u6570\uff0c\u7528\u6765\u8df3\u95f8\u56de\u8def\u3002\u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u8bbe\u7f6e\u4e8620\uff0c\u5c31\u7b9719\u4e2a\u8bf7\u6c42\u90fd\u5931\u8d25\u4e86\u4e5f\u4e0d\u4f1a\u8df3\u95f8\u3002  circuitBreaker.sleepWindowInMilliseconds\uff1a\u8df3\u95f8\u540e\uff0c\u5230\u4e0b\u6b21\u77ed\u8def\u5224\u5b9a\u7684\u95f4\u9694\u65f6\u95f4  hystrix\u5728\u7528\u7684\u65f6\u5019\uff0c\u9700\u8981\u5173\u95edfeign\u7684\u91cd\u8bd5\u7b56\u7565.\u5177\u4f53\u5173\u95ed\u65b9\u6cd5\u89c1feign\u63cf\u8ff0\u3002  \u5168\u5c40\u7684\u8d85\u65f6\u53ef\u4ee5\u7528hystrix\u6765\u63a7\u5236\uff0c\u8be5\u8d85\u65f6\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u662f\u5168\u5c40\u7684\u3002  \u5728\u5168\u5c40\u7684\u8d85\u65f6\u4e0b\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528hystrix\u8fdb\u884c\u8d85\u65f6\u7684\u63a7\u5236\uff1a  execution.timeout.enabled  execution.isolation.thread.timeoutInMilliseconds  fallback.enabled(hystrix.command.default.fallback.enabled)  hystrix.threadpool.default.coreSize=2\uff1a\u6838\u5fc3\u7ebf\u7a0b\u6c60size\u3002HystrixCommands\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u7684\u6700\u5927\u6570\u91cf\u3002  hystrix.threadpool.default.maxQueueSize=-1\uff1a\u9ed8\u8ba4-1\uff0c\u4f7f\u7528SynchronousQueue\u3002\u5176\u4ed6\u6b63\u6570\u5219\u4f7f\u7528LinkedBlockingQueue\u3002\u961f\u5217\u5927\u5c0f\u5728\u521d\u59cb\u5316\u65f6\u5019\u751f\u6548\uff0c\u5982\u679c\u8981\u52a8\u6001\u6539\u53d8\u961f\u5217\u5927\u5c0f\u53c2\u8003queueSizeRejectionThreshold\u53c2\u6570\u3002\u5982\u679c\u8981\u5728SynchronousQueue \u548cLinkedBlockingQueue\u4e4b\u95f4\u5207\u6362\u9700\u8981\u91cd\u65b0\u542f\u52a8\uff0c\u4ee5\u4e3a\u7740\u6539\u53d8\u4e86\u961f\u5217\u5927\u5c0f\u5e76\u4e0d\u6539\u53d8\u5f53\u524d\u7684\u961f\u5217\u5b9e\u73b0\u3002       \u5982\u679c\u91c7\u7528semaphore\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u662f\u540c\u6b65\u7684\u65b9\u5f0f\uff0cthread.timeout\u4e0d\u8d77\u4f5c\u7528\u3002    hystrix-sample:\u4ee3\u7801\u7ed3\u6784    hystrix-sample:pom.xml\u6587\u4ef6       dependency \n       groupId com.netflix.hystrix /groupId \n       artifactId hystrix-core /artifactId \n       version RELEASE /version \n     /dependency    hystrix-sample:\u4ee3\u7801\u8bf4\u660e   \u7f16\u5199command\u7c7b  /**\n * Created by junzhang on 2017/5/9.\n */\npublic class HelloCommand extends HystrixCommand {\n    private String name;\n    public HelloCommand() {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey( HelloGroup ))\n        .andCommandKey(HystrixCommandKey.Factory.asKey( Hello1Command ))\n        .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey( Hello1CommandPool ))\n        .andCommandPropertiesDefaults(\n                HystrixCommandProperties.Setter()\n                        .withExecutionTimeoutEnabled(true)\n                        .withExecutionTimeoutInMilliseconds(2000)\n                        .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)\n//                        .withExecutionIsolationThreadInterruptOnTimeout(true)\n//                        .withExecutionIsolationThreadInterruptOnFutureCancel(true)\n        )\n        .andThreadPoolPropertiesDefaults(\n                HystrixThreadPoolProperties\n                .Setter()\n                .withCoreSize(10)\n                .withQueueSizeRejectionThreshold(20)\n        ));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() throws Exception {\n        TimeUnit.SECONDS.sleep(3);\n        System.out.println( run method );\n//        throw new Exception( my exception );\n        return  hello world! ;\n    }\n\n    @Override\n    protected String getFallback() {\n        System.out.println( hello world fallback method. );\n        return  hello world fallback method. ;\n    }\n}   hystrix-sample:\u8c03\u7528   @Service\npublic class HelloCommandService {\n\n        HelloCommand helloCommand = new HelloCommand();\n      return  helloCommand.execute().toString();\n    }\n}   \u8fd9\u91cc\u6709\u51e0\u79cd\u8c03\u7528\u65b9\u5f0f\uff1afuture\u3001\u6216\u8005\u7528observer\u3002execute\u548cfuture\u6700\u7ec8\u90fd\u662f\u901a\u8fc7observer\u6765\u5904\u7406\u7684\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 \u6e90\u7801", 
            "title": "hystrix"
        }, 
        {
            "location": "/microservice/#zuul", 
            "text": "Router and Filter   Routing in an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM based router and server side load balancer by Netflix.", 
            "title": "zuul"
        }, 
        {
            "location": "/microservice/#archaius", 
            "text": "", 
            "title": "Archaius"
        }, 
        {
            "location": "/microservice/#eureka", 
            "text": "eureka server   pom.xml:        parent \n         groupId org.springframework.boot /groupId \n         artifactId spring-boot-starter-parent /artifactId \n         version 1.4.3.RELEASE /version \n         relativePath/   !-- lookup parent from repository -- \n     /parent \n\n     dependencies \n         dependency \n             groupId org.springframework.cloud /groupId \n             artifactId spring-cloud-starter-eureka-server /artifactId \n         /dependency \n         dependency \n             groupId org.springframework.boot /groupId \n             artifactId spring-boot-starter-test /artifactId \n             scope test /scope \n         /dependency \n     /dependencies \n\n     dependencyManagement \n         dependencies \n             dependency \n                 groupId org.springframework.cloud /groupId \n                 artifactId spring-cloud-dependencies /artifactId \n                 version Brixton.RELEASE /version \n                 type pom /type \n                 scope import /scope \n             /dependency \n         /dependencies \n     /dependencyManagement \n\n     properties \n         project.build.sourceEncoding UTF-8 /project.build.sourceEncoding \n         start-class eurekademo.EurekaApplication /start-class \n         java.version 1.8 /java.version \n         docker.image.prefix springcloud /docker.image.prefix \n     /properties    \u542f\u52a8\u7c7b   @SpringBootApplication\n@EnableEurekaServer\npublic class EurekaApplication {\n\n    public static void main(String[] args){\n        new SpringApplicationBuilder(EurekaApplication.class).web(true).run(args);\n    }\n\n}   \u914d\u7f6e\u6587\u4ef6application.yml   server:\n  port: 8761\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    registerWithEureka: false #\u662f\u5426\u5c06eureka\u81ea\u8eab\u4f5c\u4e3a\u5e94\u7528\u6ce8\u518c\u5230eureka\u6ce8\u518c\u4e2d\u5fc3\n    fetchRegistry: false #\u8868\u793a\u662f\u5426\u4eceeureka\u670d\u52a1\u5668\u83b7\u53d6\u6ce8\u518c\u4fe1\n    serviceUrl:\n      defaultZone: http://localhost:${server.port}/eureka/  #\u8bbe\u7f6eeureka\u670d\u52a1\u5668\u6240\u5728\u7684\u5730\u5740\uff0c\u67e5\u8be2\u670d\u52a1\u548c\u6ce8\u518c\u670d\u52a1\u90fd\u9700\u8981\u4f9d\u8d56\u8fd9\u4e2a\u5730\u5740\n  server:\n    enable-self-preservation: false #\u662f\u5426\u5f00\u542f\u81ea\u6211\u4fdd\u62a4(\u662f\u5426\u4f1a\u6e05\u9664\u5df2\u7ecf\u4e0b\u7ebf\u7684\u670d\u52a1)   \u914d\u7f6e\u6587\u4ef6bootstrap.yml   spring:\n  application:\n    name: eureka   \u5728server\u542f\u52a8\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u81ea\u6211\u4fdd\u62a4\u7684\u9009\u9879\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff0c\u4e0b\u7ebf\u7684\u670d\u52a1\u5728catalog\u4e2d\u4e0d\u4f1a\u81ea\u52a8\u6e05\u9664\uff0c\u5728eureka\u7684\u63a7\u5236\u53f0\u4f1a\u6709\u8b66\u544a\u3002\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u5173\u95ed\uff1a   eureka:\n    server:\n        enable-self-preservation: false    eureka\u53ef\u4ee5\u91c7\u53d6\u96c6\u7fa4\u90e8\u7f72\u7684\u65b9\u5f0f    docker\u7ed3\u5408:\u5728\u9879\u76eemain\u76ee\u5f55\u4e0b\u5efa\u7acbdocker\u76ee\u5f55\uff0c\u65b0\u589eDockerfile\u6587\u4ef6     eureka client    pom\u6587\u4ef6\u5f15\u5165   parent \n     groupId org.springframework.boot /groupId \n     artifactId spring-boot-starter-parent /artifactId \n     version 1.4.5.RELEASE /version \n   /parent \n\n   groupId com.ppdai.erueka_client /groupId \n   artifactId eureka_client /artifactId \n   version 1.0-SNAPSHOT /version \n   packaging jar /packaging \n\n   name eureka_client /name \n\n   properties \n     project.build.sourceEncoding UTF-8 /project.build.sourceEncoding \n     java.version 1.8 /java.version \n   /properties \n\n\n   dependencyManagement \n     dependencies \n       dependency \n         groupId org.springframework.cloud /groupId \n         artifactId spring-cloud-dependencies /artifactId \n         version Camden.SR6 /version \n         type pom /type \n         scope import /scope \n       /dependency \n     /dependencies \n   /dependencyManagement \n   dependencies \n     dependency \n       groupId org.springframework.cloud /groupId \n       artifactId spring-cloud-starter-eureka /artifactId \n     /dependency \n     dependency \n       groupId org.springframework.boot /groupId \n       artifactId spring-boot-configuration-processor /artifactId \n     /dependency \n     dependency \n       groupId junit /groupId \n       artifactId junit /artifactId \n       version 4.12 /version \n     /dependency \n   /dependencies    \u542f\u52a8\u7c7b:(i.e. utterly normal Spring Boot app). In this example we use @EnableEurekaClient explicitly, but with only Eureka available you could also use @EnableDiscoveryClient. Configuration is required to locate the Eureka server   @SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\npublic class App {\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(App.class).web(true).run(args);\n    }\n}", 
            "title": "eureka"
        }, 
        {
            "location": "/microservice/#consul", 
            "text": "consul\u53c2\u8003\u5b98\u7f51http://consul.io  consul\u67b6\u6784\u56fe   (LAN:\u5c40\u57df\u7f51 ;WAN:\u5e7f\u57df\u7f51)\nclient\u4e0eclient\u4e4b\u95f4\u8d70gossip\u534f\u8bae\uff0c\u534f\u8bae\u7aef\u53e3\u662f8301\nclient\u4e0eserver\u4e4b\u95f4\u6570\u636e\u540c\u6b65\u4e5f\u662f\u8d70gossip\u534f\u8bae\uff0c\u7aef\u53e3\u662f8301\nclient\u4e0eserver\u7684rpc\u8d70tcp\u534f\u8bae\uff0c\u8d70\u7684\u662f8300\u7aef\u53e3\nserver\u4e0eserver\u4e4b\u95f4\u7684\u590d\u5236raft\u534f\u8bae\u8d70\u7684\u662ftcp\u534f\u8bae\uff0c\u7aef\u53e3\u662f8300\n\u4e0d\u540c\u7684dc\u4e4b\u95f4\u7684\u6570\u636e\u8bf7\u6c42\u8d70\u7684\u662f8300\u7aef\u53e3\n\u4e0d\u540c\u7684dc\u7684server\u4e4b\u95f4\u8d70\u7684gossip\u534f\u8bae\uff0c\u7aef\u53e3\u5e7f\u57df\u7f51\u76848302\u7aef\u53e3   gossip\u534f\u8bae   1. gossip\u80cc\u666f\nGossip\u7b97\u6cd5\u5982\u5176\u540d\uff0c\u7075\u611f\u6765\u81ea\u529e\u516c\u5ba4\u516b\u5366\uff0c\u53ea\u8981\u4e00\u4e2a\u4eba\u516b\u5366\u4e00\u4e0b\uff0c\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u6240\u6709\u7684\u4eba\u90fd\u4f1a\u77e5\u9053\u8be5\u516b\u5366\u7684\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u4e0e\u75c5\u6bd2\u4f20\u64ad\u7c7b\u4f3c\uff0c\u56e0\u6b64Gossip\u6709\u4f17\u591a\u7684\u522b\u540d\u201c\u95f2\u8bdd\u7b97\u6cd5\u201d\u3001\u201c\u75ab\u60c5\u4f20\u64ad\u7b97\u6cd5\u201d\u3001\u201c\u75c5\u6bd2\u611f\u67d3\u7b97\u6cd5\u201d\u3001\u201c\u8c23\u8a00\u4f20\u64ad\u7b97\u6cd5\u201d\u3002  \u4f46Gossip\u5e76\u4e0d\u662f\u4e00\u4e2a\u65b0\u4e1c\u897f\uff0c\u4e4b\u524d\u7684\u6cdb\u6d2a\u67e5\u627e\u3001\u8def\u7531\u7b97\u6cd5\u90fd\u5f52\u5c5e\u4e8e\u8fd9\u4e2a\u8303\u7574\uff0c\u4e0d\u540c\u7684\u662fGossip\u7ed9\u8fd9\u7c7b\u7b97\u6cd5\u63d0\u4f9b\u4e86\u660e\u786e\u7684\u8bed\u4e49\u3001\u5177\u4f53\u5b9e\u65bd\u65b9\u6cd5\u53ca\u6536\u655b\u6027\u8bc1\u660e\u3002\n2. gossip\u7279\u70b9\nGossip\u7b97\u6cd5\u53c8\u88ab\u79f0\u4e3a\u53cd\u71b5\uff08Anti-Entropy\uff09\uff0c\u71b5\u662f\u7269\u7406\u5b66\u4e0a\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u4ee3\u8868\u6742\u4e71\u65e0\u7ae0\uff0c\u800c\u53cd\u71b5\u5c31\u662f\u5728\u6742\u4e71\u65e0\u7ae0\u4e2d\u5bfb\u6c42\u4e00\u81f4\uff0c\u8fd9\u5145\u5206\u8bf4\u660e\u4e86Gossip\u7684\u7279\u70b9\uff1a\u5728\u4e00\u4e2a\u6709\u754c\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u968f\u673a\u5730\u4e0e\u5176\u4ed6\u8282\u70b9\u901a\u4fe1\uff0c\u7ecf\u8fc7\u4e00\u756a\u6742\u4e71\u65e0\u7ae0\u7684\u901a\u4fe1\uff0c\u6700\u7ec8\u6240\u6709\u8282\u70b9\u7684\u72b6\u6001\u90fd\u4f1a\u8fbe\u6210\u4e00\u81f4\u3002\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u77e5\u9053\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u4ec5\u77e5\u9053\u51e0\u4e2a\u90bb\u5c45\u8282\u70b9\uff0c\u53ea\u8981\u8fd9\u4e9b\u8282\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fde\u901a\uff0c\u6700\u7ec8\u4ed6\u4eec\u7684\u72b6\u6001\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u75ab\u60c5\u4f20\u64ad\u7684\u7279\u70b9\u3002  \u8981\u6ce8\u610f\u5230\u7684\u4e00\u70b9\u662f\uff0c\u5373\u4f7f\u6709\u7684\u8282\u70b9\u56e0\u5b95\u673a\u800c\u91cd\u542f\uff0c\u6709\u65b0\u8282\u70b9\u52a0\u5165\uff0c\u4f46\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8fd9\u4e9b\u8282\u70b9\u7684\u72b6\u6001\u4e5f\u4f1a\u4e0e\u5176\u4ed6\u8282\u70b9\u8fbe\u6210\u4e00\u81f4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cGossip\u5929\u7136\u5177\u6709\u5206\u5e03\u5f0f\u5bb9\u9519\u7684\u4f18\u70b9\n3. gossip\u672c\u8d28\nGossip\u662f\u4e00\u4e2a\u5e26\u5197\u4f59\u7684\u5bb9\u9519\u7b97\u6cd5\uff0c\u66f4\u8fdb\u4e00\u6b65\uff0cGossip\u662f\u4e00\u4e2a\u6700\u7ec8\u4e00\u81f4\u6027\u7b97\u6cd5\u3002\u867d\u7136\u65e0\u6cd5\u4fdd\u8bc1\u5728\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u8282\u70b9\u72b6\u6001\u4e00\u81f4\uff0c\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u5728\u201d\u6700\u7ec8\u201c\u6240\u6709\u8282\u70b9\u4e00\u81f4\uff0c\u201d\u6700\u7ec8\u201c\u662f\u4e00\u4e2a\u73b0\u5b9e\u4e2d\u5b58\u5728\uff0c\u4f46\u7406\u8bba\u4e0a\u65e0\u6cd5\u8bc1\u660e\u7684\u65f6\u95f4\u70b9\u3002\n\u56e0\u4e3aGossip\u4e0d\u8981\u6c42\u8282\u70b9\u77e5\u9053\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u6b64\u53c8\u5177\u6709\u53bb\u4e2d\u5fc3\u5316\u7684\u7279\u70b9\uff0c\u8282\u70b9\u4e4b\u95f4\u5b8c\u5168\u5bf9\u7b49\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u7684\u4e2d\u5fc3\u8282\u70b9\u3002\u5b9e\u9645\u4e0aGossip\u53ef\u4ee5\u7528\u4e8e\u4f17\u591a\u80fd\u63a5\u53d7\u201c\u6700\u7ec8\u4e00\u81f4\u6027\u201d\u7684\u9886\u57df\uff1a\u5931\u8d25\u68c0\u6d4b\u3001\u8def\u7531\u540c\u6b65\u3001Pub/Sub\u3001\u52a8\u6001\u8d1f\u8f7d\u5747\u8861\u3002  \u4f46Gossip\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u5197\u4f59\u901a\u4fe1\u4f1a\u5bf9\u7f51\u8def\u5e26\u5bbd\u3001CUP\u8d44\u6e90\u9020\u6210\u5f88\u5927\u7684\u8d1f\u8f7d\uff0c\u800c\u8fd9\u4e9b\u8d1f\u8f7d\u53c8\u53d7\u9650\u4e8e\u901a\u4fe1\u9891\u7387\uff0c\u8be5\u9891\u7387\u53c8\u5f71\u54cd\u7740\u7b97\u6cd5\u6536\u655b\u7684\u901f\u5ea6\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u8bb2\u5728\u5404\u79cd\u573a\u5408\u4e0b\u7684\u4f18\u5316\u65b9\u6cd5\u3002\n4. Gossip\u8282\u70b9\u7684\u901a\u4fe1\u65b9\u5f0f\u53ca\u6536\u655b\u6027 \n\u53c2\u7167\uff1ahttp://wenku.baidu.com/link?url=SSCHAAXypcJvYrDkZL4RRUSMgxeQl9nb1EOaLBsk21PyB1Z9GfXsQ2jkVTDElRJwqUn2QFxV6ut-5Dz1Dki8Rt34BOSAEoXH-YQ-1ZTm46O    consul\u7684\u90e8\u7f72   \u6839\u636e\u4e0d\u540c\u7684\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\uff0c\u4e0b\u8f7d\u6700\u65b0consul\u5ba2\u6237\u7aef,\u6700\u65b0\u7684\u7248\u672c\u96c6\u6210\u4e86web-ui,\u53ea\u8981\u5728\u90e8\u7f72\u7684\u5f00\u542fui\u5373\u53ef\u3002   \u2018\u5355\u673a\u90e8\u7f72\u2019   \u4e0b\u8f7dconsul\u5b89\u88c5\u6587\u4ef6\u3002  \u51c6\u5907\u542f\u52a8\u811a\u672c   consul agent -server -bootstrap -datacenter=zjtest1 -data-dir=./temp/consul/server -ui=true   \u542f\u52a8\u811a\u672c\u8bf4\u660e  server:  This indicates whether the agent is running in server or client mode  bootstrap:   a server may be in \"bootstrap\" mode   datacenter:  The -datacenter flag can be used to set the datacenter    \u542f\u52a8\u65e5\u5fd7   2017/03/23 15:55:40 [WARN] raft: Heartbeat timeout from \"\" reached, starting Election\n    2017/03/23 15:55:40 [INFO] raft: Node at 192.168.50.150:8300 [Candidate] entering Candidate state in term 2\n    2017/03/23 15:55:40 [INFO] raft: Election won. Tally: 1\n    2017/03/23 15:55:40 [INFO] raft: Node at 192.168.50.150:8300 [Leader] entering Leader state\n    2017/03/23 15:55:40 [INFO] consul: cluster leadership acquired\n    2017/03/23 15:55:40 [INFO] consul: New leader elected: JundeMacBook-Pro.local\n    2017/03/23 15:55:40 [INFO] consul: member 'JundeMacBook-Pro.local' joined, marking health alive\n    2017/03/23 15:55:42 [INFO] agent: Synced service 'consul'   \u90e8\u7f72\u5b8c\u6210\u540e\u53ef\u4ee5\u67e5\u770b   $ consul members\nNode                    Address              Status  Type    Build  Protocol  DC\nJundeMacBook-Pro.local  192.168.50.150:8301  alive   server  0.7.2  2         zjtest2    \u96c6\u7fa4\u90e8\u7f72   server\u5efa\u8bae\u81f3\u5c11\u4e09\u4e2a\u70b9\u90e8\u7f72\u3002  \u6240\u6709\u7684server\u4e0d\u80fd\u4ee5bootstrap\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u72b6\u6001\u7684\u4e0d\u4e00\u81f4\uff0c\u5982\u4e0b\u5f15\u7528\u539f\u6587\u8bf4\u660e   Multiple servers cannot be in bootstrap mode as that would put the cluster in an inconsistent state.    \u90e8\u7f72\u6b65\u9aa4   \u4ee5bootstrap\u65b9\u5f0f\u90e8\u7f72\u4e00\u53f0server      \u5176\u4ed6server\u4ee5join\u7684\u65b9\u5f0f\u52a0\u5165  \u4f18\u96c5\u4e0b\u7ebf\u8be5bootstrap\u7684server  \u52a0\u5165\u5230\u5269\u4f59\u4e2d\u7684\u4efb\u610f\u4e00\u53f0     \u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7consul members\u8fdb\u884c\u67e5\u770b\u96c6\u7fa4\u72b6\u6001", 
            "title": "consul"
        }, 
        {
            "location": "/restfulapi/", 
            "text": "Restful API \u7684\u8bbe\u8ba1\u89c4\u8303\n\n\nhttp://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html\n\n\n1.uri\n\n\n\n\nURI \u8868\u793a\u8d44\u6e90\uff0c\u8d44\u6e90\u4e00\u822c\u5bf9\u5e94\u670d\u52a1\u5668\u7aef\u9886\u57df\u6a21\u578b\u4e2d\u7684\u5b9e\u4f53\u7c7b\u3002\n\n\n\n\n\u89c4\u8303\n\n\n\n\n\u4e0d\u7528\u5927\u5199\uff1b\n\n\n\u7528\u4e2d\u6760-\u4e0d\u7528\u4e0b\u6760_\uff1b\n\n\n\u53c2\u6570\u5217\u8868\u8981encode\uff1b\n\n\nURI\u4e2d\u7684\u540d\u8bcd\u8868\u793a\u8d44\u6e90\u96c6\u5408\uff0c\u4f7f\u7528\u590d\u6570\u5f62\u5f0f\u3002\\\n\n\n\n\n\u8d44\u6e90\u96c6\u5408 vs \u5355\u4e2a\u8d44\u6e90\n\n\nURI\u8868\u793a\u8d44\u6e90\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a\u8d44\u6e90\u96c6\u5408\u3001\u5355\u4e2a\u8d44\u6e90\u3002\n\n\n\n\n\u8d44\u6e90\u96c6\u5408\uff1a\n\n\n\n\n/zoos //\u6240\u6709\u52a8\u7269\u56ed\n/zoos/1/animals //id\u4e3a1\u7684\u52a8\u7269\u56ed\u4e2d\u7684\u6240\u6709\u52a8\u7269\n\n\n\n\n\n\n\u5355\u4e2a\u8d44\u6e90\uff1a\n\n\n\n\n/zoos/1 //id\u4e3a1\u7684\u52a8\u7269\u56ed\n/zoos/1;2;3 //id\u4e3a1\uff0c2\uff0c3\u7684\u52a8\u7269\u56ed\n\n\n\n\n\u907f\u514d\u5c42\u7ea7\u8fc7\u6df1\u7684URI\n\n\n/\u5728url\u4e2d\u8868\u8fbe\u5c42\u7ea7\uff0c\u7528\u4e8e\u6309\u5b9e\u4f53\u5173\u8054\u5173\u7cfb\u8fdb\u884c\u5bf9\u8c61\u5bfc\u822a\uff0c\u4e00\u822c\u6839\u636eid\u5bfc\u822a\u3002\n\n\n\u8fc7\u6df1\u7684\u5bfc\u822a\u5bb9\u6613\u5bfc\u81f4url\u81a8\u80c0\uff0c\u4e0d\u6613\u7ef4\u62a4\uff0c\u5982 GET /zoos/1/areas/3/animals/4\uff0c\u5c3d\u91cf\u4f7f\u7528\u67e5\u8be2\u53c2\u6570\u4ee3\u66ff\u8def\u5f84\u4e2d\u7684\u5b9e\u4f53\u5bfc\u822a\uff0c\u5982GET /animals?zoo=1\narea=3\uff1b\n\n\n\u5bf9Composite\u8d44\u6e90\u7684\u8bbf\u95ee\n\n\n\u670d\u52a1\u5668\u7aef\u7684\u7ec4\u5408\u5b9e\u4f53\u5fc5\u987b\u5728uri\u4e2d\u901a\u8fc7\u7236\u5b9e\u4f53\u7684id\u5bfc\u822a\u8bbf\u95ee\u3002\n\n\n\n\n\n\n\n\n\u7ec4\u5408\u5b9e\u4f53\u4e0d\u662ffirst-class\u7684\u5b9e\u4f53\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u5b8c\u5168\u4f9d\u8d56\u7236\u5b9e\u4f53\uff0c\u65e0\u6cd5\u72ec\u7acb\u5b58\u5728\uff0c\u5728\u5b9e\u73b0\u4e0a\u901a\u5e38\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u67d0\u4e9b\u5217\u7684\u62bd\u8c61\uff0c\u4e0d\u76f4\u63a5\u5bf9\u5e94\u8868\uff0c\u4e5f\u65e0id\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u662f User \u2014 Address\uff0cAddress\u662f\u5bf9User\u8868\u4e2dzipCode/country/city\u4e09\u4e2a\u5b57\u6bb5\u7684\u7b80\u5355\u62bd\u8c61\uff0c\u65e0\u6cd5\u72ec\u7acb\u4e8eUser\u5b58\u5728\u3002\u5fc5\u987b\u901a\u8fc7User\u7d22\u5f15\u5230Address\uff1aGET /user/1/addresses\n\n\n\n\n\n\n\n\n2. Request\n\n\nHTTP\u65b9\u6cd5\n\n\n\n\n\u901a\u8fc7\u6807\u51c6HTTP\u65b9\u6cd5\u5bf9\u8d44\u6e90CRUD\n\n\nGET\uff1a\u67e5\u8be2\n\n\n\n\n GET /zoos\n GET /zoos/1\n GET /zoos/1/employees\n\n\n\n\n\n\nPOST\uff1a\u521b\u5efa\u5355\u4e2a\u8d44\u6e90\u3002POST\u4e00\u822c\u5411\u201c\u8d44\u6e90\u96c6\u5408\u201d\u578buri\u53d1\u8d77\n\n\n\n\nPOST /animals  //\u65b0\u589e\u52a8\u7269\nPOST /zoos/1/employees //\u4e3aid\u4e3a1\u7684\u52a8\u7269\u56ed\u96c7\u4f63\u5458\u5de5\n\n\n\n\n\n\nPUT\uff1a\u66f4\u65b0\u5355\u4e2a\u8d44\u6e90\uff08\u5168\u91cf\uff09\uff0c\u5ba2\u6237\u7aef\u63d0\u4f9b\u5b8c\u6574\u7684\u66f4\u65b0\u540e\u7684\u8d44\u6e90\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u662f PATCH\uff0cPATCH \u8d1f\u8d23\u90e8\u5206\u66f4\u65b0\uff0c\u5ba2\u6237\u7aef\u63d0\u4f9b\u8981\u66f4\u65b0\u7684\u90a3\u4e9b\u5b57\u6bb5\u3002PUT/PATCH\u4e00\u822c\u5411\u201c\u5355\u4e2a\u8d44\u6e90\u201d\u578buri\u53d1\u8d77\n\n\n\n\nPUT /animals/1\nPUT /zoos/1\n\n\n\n\n\n\nDELETE\uff1a\u5220\u9664\n\n\n\n\nDELETE /zoos/1/employees/2\nDELETE /zoos/1/employees/2;4;5\nDELETE /zoos/1/animals  //\u5220\u9664id\u4e3a1\u7684\u52a8\u7269\u56ed\u5185\u7684\u6240\u6709\u52a8\u7269\n\n\n\n\n\u5b89\u5168\u6027\u548c\u5e42\u7b49\u6027\n\n\n\n\n\u5b89\u5168\u6027\uff1a\u4e0d\u4f1a\u6539\u53d8\u8d44\u6e90\u72b6\u6001\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u53ea\u8bfb\u7684\uff1b\n\n\n\u5e42\u7b49\u6027\uff1a\u6267\u884c1\u6b21\u548c\u6267\u884cN\u6b21\uff0c\u5bf9\u8d44\u6e90\u72b6\u6001\u6539\u53d8\u7684\u6548\u679c\u662f\u7b49\u4ef7\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u5b89\u5168\u6027\n\n\n\u5e42\u7b49\u6027\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n\u221a\n\n\n\u221a\n\n\n\n\n\n\nPOST\n\n\n\u00d7\n\n\n\u00d7\n\n\n\n\n\n\nPUT\n\n\n\u00d7\n\n\n\u221a\n\n\n\n\n\n\nDELETE\n\n\n\u00d7\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\u5b89\u5168\u6027\u548c\u5e42\u7b49\u6027\u5747\u4e0d\u4fdd\u8bc1\u53cd\u590d\u8bf7\u6c42\u80fd\u62ff\u5230\u76f8\u540c\u7684response\u3002\u4ee5 DELETE \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21DELETE\u8fd4\u56de200\u8868\u793a\u5220\u9664\u6210\u529f\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de404\u63d0\u793a\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\u3002\n\n\n\n\n\u590d\u6742\u67e5\u8be2\n\n\n\n\n\u67e5\u8be2\u53ef\u4ee5\u634e\u5e26\u4ee5\u4e0b\u53c2\u6570\uff1a\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\u793a\u4f8b\n\n\n\u5907\u6ce8\n\n\n\n\n\n\n\n\n\n\n\u8fc7\u6ee4\u6761\u4ef6\n\n\n?type=1\nage=16\n\n\n\u5141\u8bb8\u4e00\u5b9a\u7684uri\u5197\u4f59\uff0c\u5982/zoos/1\u4e0e/zoos?id=1\n\n\n\n\n\n\n\u6392\u5e8f\n\n\n?sort=age,desc\n\n\n\n\n\n\n\n\n\u5206\u9875\n\n\n?limit=10\noffset=3\n\n\n\n\n\n\n\n\n\n\n\u5f85\u7eed\u3002\u3002\u3002\u3002\u3002\u3002\u3002", 
            "title": "restfulApi\u89c4\u8303"
        }, 
        {
            "location": "/restfulapi/#restful-api", 
            "text": "http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html", 
            "title": "Restful API \u7684\u8bbe\u8ba1\u89c4\u8303"
        }, 
        {
            "location": "/restfulapi/#1uri", 
            "text": "URI \u8868\u793a\u8d44\u6e90\uff0c\u8d44\u6e90\u4e00\u822c\u5bf9\u5e94\u670d\u52a1\u5668\u7aef\u9886\u57df\u6a21\u578b\u4e2d\u7684\u5b9e\u4f53\u7c7b\u3002", 
            "title": "1.uri"
        }, 
        {
            "location": "/restfulapi/#_1", 
            "text": "\u4e0d\u7528\u5927\u5199\uff1b  \u7528\u4e2d\u6760-\u4e0d\u7528\u4e0b\u6760_\uff1b  \u53c2\u6570\u5217\u8868\u8981encode\uff1b  URI\u4e2d\u7684\u540d\u8bcd\u8868\u793a\u8d44\u6e90\u96c6\u5408\uff0c\u4f7f\u7528\u590d\u6570\u5f62\u5f0f\u3002\\", 
            "title": "\u89c4\u8303"
        }, 
        {
            "location": "/restfulapi/#vs", 
            "text": "URI\u8868\u793a\u8d44\u6e90\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a\u8d44\u6e90\u96c6\u5408\u3001\u5355\u4e2a\u8d44\u6e90\u3002   \u8d44\u6e90\u96c6\u5408\uff1a   /zoos //\u6240\u6709\u52a8\u7269\u56ed\n/zoos/1/animals //id\u4e3a1\u7684\u52a8\u7269\u56ed\u4e2d\u7684\u6240\u6709\u52a8\u7269   \u5355\u4e2a\u8d44\u6e90\uff1a   /zoos/1 //id\u4e3a1\u7684\u52a8\u7269\u56ed\n/zoos/1;2;3 //id\u4e3a1\uff0c2\uff0c3\u7684\u52a8\u7269\u56ed", 
            "title": "\u8d44\u6e90\u96c6\u5408 vs \u5355\u4e2a\u8d44\u6e90"
        }, 
        {
            "location": "/restfulapi/#uri", 
            "text": "/\u5728url\u4e2d\u8868\u8fbe\u5c42\u7ea7\uff0c\u7528\u4e8e\u6309\u5b9e\u4f53\u5173\u8054\u5173\u7cfb\u8fdb\u884c\u5bf9\u8c61\u5bfc\u822a\uff0c\u4e00\u822c\u6839\u636eid\u5bfc\u822a\u3002  \u8fc7\u6df1\u7684\u5bfc\u822a\u5bb9\u6613\u5bfc\u81f4url\u81a8\u80c0\uff0c\u4e0d\u6613\u7ef4\u62a4\uff0c\u5982 GET /zoos/1/areas/3/animals/4\uff0c\u5c3d\u91cf\u4f7f\u7528\u67e5\u8be2\u53c2\u6570\u4ee3\u66ff\u8def\u5f84\u4e2d\u7684\u5b9e\u4f53\u5bfc\u822a\uff0c\u5982GET /animals?zoo=1 area=3\uff1b", 
            "title": "\u907f\u514d\u5c42\u7ea7\u8fc7\u6df1\u7684URI"
        }, 
        {
            "location": "/restfulapi/#composite", 
            "text": "\u670d\u52a1\u5668\u7aef\u7684\u7ec4\u5408\u5b9e\u4f53\u5fc5\u987b\u5728uri\u4e2d\u901a\u8fc7\u7236\u5b9e\u4f53\u7684id\u5bfc\u822a\u8bbf\u95ee\u3002     \u7ec4\u5408\u5b9e\u4f53\u4e0d\u662ffirst-class\u7684\u5b9e\u4f53\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u5b8c\u5168\u4f9d\u8d56\u7236\u5b9e\u4f53\uff0c\u65e0\u6cd5\u72ec\u7acb\u5b58\u5728\uff0c\u5728\u5b9e\u73b0\u4e0a\u901a\u5e38\u662f\u5bf9\u6570\u636e\u5e93\u8868\u4e2d\u67d0\u4e9b\u5217\u7684\u62bd\u8c61\uff0c\u4e0d\u76f4\u63a5\u5bf9\u5e94\u8868\uff0c\u4e5f\u65e0id\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u662f User \u2014 Address\uff0cAddress\u662f\u5bf9User\u8868\u4e2dzipCode/country/city\u4e09\u4e2a\u5b57\u6bb5\u7684\u7b80\u5355\u62bd\u8c61\uff0c\u65e0\u6cd5\u72ec\u7acb\u4e8eUser\u5b58\u5728\u3002\u5fc5\u987b\u901a\u8fc7User\u7d22\u5f15\u5230Address\uff1aGET /user/1/addresses", 
            "title": "\u5bf9Composite\u8d44\u6e90\u7684\u8bbf\u95ee"
        }, 
        {
            "location": "/restfulapi/#2-request", 
            "text": "", 
            "title": "2. Request"
        }, 
        {
            "location": "/restfulapi/#http", 
            "text": "\u901a\u8fc7\u6807\u51c6HTTP\u65b9\u6cd5\u5bf9\u8d44\u6e90CRUD  GET\uff1a\u67e5\u8be2    GET /zoos\n GET /zoos/1\n GET /zoos/1/employees   POST\uff1a\u521b\u5efa\u5355\u4e2a\u8d44\u6e90\u3002POST\u4e00\u822c\u5411\u201c\u8d44\u6e90\u96c6\u5408\u201d\u578buri\u53d1\u8d77   POST /animals  //\u65b0\u589e\u52a8\u7269\nPOST /zoos/1/employees //\u4e3aid\u4e3a1\u7684\u52a8\u7269\u56ed\u96c7\u4f63\u5458\u5de5   PUT\uff1a\u66f4\u65b0\u5355\u4e2a\u8d44\u6e90\uff08\u5168\u91cf\uff09\uff0c\u5ba2\u6237\u7aef\u63d0\u4f9b\u5b8c\u6574\u7684\u66f4\u65b0\u540e\u7684\u8d44\u6e90\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u662f PATCH\uff0cPATCH \u8d1f\u8d23\u90e8\u5206\u66f4\u65b0\uff0c\u5ba2\u6237\u7aef\u63d0\u4f9b\u8981\u66f4\u65b0\u7684\u90a3\u4e9b\u5b57\u6bb5\u3002PUT/PATCH\u4e00\u822c\u5411\u201c\u5355\u4e2a\u8d44\u6e90\u201d\u578buri\u53d1\u8d77   PUT /animals/1\nPUT /zoos/1   DELETE\uff1a\u5220\u9664   DELETE /zoos/1/employees/2\nDELETE /zoos/1/employees/2;4;5\nDELETE /zoos/1/animals  //\u5220\u9664id\u4e3a1\u7684\u52a8\u7269\u56ed\u5185\u7684\u6240\u6709\u52a8\u7269", 
            "title": "HTTP\u65b9\u6cd5"
        }, 
        {
            "location": "/restfulapi/#_2", 
            "text": "\u5b89\u5168\u6027\uff1a\u4e0d\u4f1a\u6539\u53d8\u8d44\u6e90\u72b6\u6001\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u53ea\u8bfb\u7684\uff1b  \u5e42\u7b49\u6027\uff1a\u6267\u884c1\u6b21\u548c\u6267\u884cN\u6b21\uff0c\u5bf9\u8d44\u6e90\u72b6\u6001\u6539\u53d8\u7684\u6548\u679c\u662f\u7b49\u4ef7\u7684\u3002       \u5b89\u5168\u6027  \u5e42\u7b49\u6027      GET  \u221a  \u221a    POST  \u00d7  \u00d7    PUT  \u00d7  \u221a    DELETE  \u00d7  \u221a      \u5b89\u5168\u6027\u548c\u5e42\u7b49\u6027\u5747\u4e0d\u4fdd\u8bc1\u53cd\u590d\u8bf7\u6c42\u80fd\u62ff\u5230\u76f8\u540c\u7684response\u3002\u4ee5 DELETE \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21DELETE\u8fd4\u56de200\u8868\u793a\u5220\u9664\u6210\u529f\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de404\u63d0\u793a\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\u3002", 
            "title": "\u5b89\u5168\u6027\u548c\u5e42\u7b49\u6027"
        }, 
        {
            "location": "/restfulapi/#_3", 
            "text": "\u67e5\u8be2\u53ef\u4ee5\u634e\u5e26\u4ee5\u4e0b\u53c2\u6570\uff1a      .  \u793a\u4f8b  \u5907\u6ce8      \u8fc7\u6ee4\u6761\u4ef6  ?type=1 age=16  \u5141\u8bb8\u4e00\u5b9a\u7684uri\u5197\u4f59\uff0c\u5982/zoos/1\u4e0e/zoos?id=1    \u6392\u5e8f  ?sort=age,desc     \u5206\u9875  ?limit=10 offset=3", 
            "title": "\u590d\u6742\u67e5\u8be2"
        }, 
        {
            "location": "/restfulapi/#_4", 
            "text": "", 
            "title": "\u5f85\u7eed\u3002\u3002\u3002\u3002\u3002\u3002\u3002"
        }, 
        {
            "location": "/feign-problem/", 
            "text": "Spring Cloud\u9879\u76ee\u4e2d\u901a\u8fc7Feign\u8fdb\u884c\u5185\u90e8\u670d\u52a1\u8c03\u7528\u53d1\u751f401\\407\u9519\u8bef\u65e0\u8fd4\u56de\u4fe1\u606f\u7684\u95ee\u9898\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u6700\u8fd1\u5728\u4f7f\u7528Spring Cloud\u6539\u9020\u73b0\u6709\u670d\u52a1\u7684\u5de5\u4f5c\u4e2d\uff0c\u5728\u5185\u90e8\u670d\u52a1\u7684\u8c03\u7528\u65b9\u5f0f\u4e0a\u9009\u62e9\u4e86Feign\u7ec4\u4ef6\uff0c\u7531\u4e8e\u670d\u52a1\u4e0e\u670d\u52a1\u4e4b\u95f4\u6709\u6743\u9650\u63a7\u5236\uff0c\u53d1\u73b0\u901a\u8fc7Feign\u6765\u8fdb\u884c\u8c03\u7528\u65f6\u5982\u679c\u53d1\u751f\u4e86401\u3001407\u9519\u8bef\u65f6\uff0c\u8c03\u7528\u65b9\u4e0d\u80fd\u591f\u53d6\u56de\u88ab\u8c03\u7528\u65b9\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u3002\n\n\n\u4ea7\u751f\u539f\u56e0\n\n\nFeign\u9ed8\u8ba4\u4f7f\u7528java.net.HttpURLConnection\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u8fc7\u67e5\u770b\u5176\u5b50\u7c7bsun.net.www.protocol.http.HttpURLConnection\u6e90\u7801\u53d1\u73b0\u4ee3\u7801\u4e2d\u5728\u8fdb\u884c\u901a\u4fe1\u65f6\u5355\u72ec\u5bf9\u9519\u8bef\u7801\u4e3a401\\407\u7684\u9519\u8bef\u8bf7\u6c42\u505a\u4e86\u5904\u7406\uff0c\u5f53\u8bf7\u6c42\u7684\u9519\u8bef\u7801\u4e3a401\\407\u65f6\uff0c\u4f1a\u5173\u95ed\u8bf7\u6c42\u6d41\uff0c\u7531\u4e8e\u6b64\u65f6\u8fd8\u5e76\u6ca1\u6709\u5c06\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u5199\u5165\u54cd\u5e94\u6d41\u4e2d\uff0c\u6240\u4ee5\u63a5\u6536\u7684\u8fd4\u56de\u4fe1\u606f\u4e2d\u4ec5\u4ec5\u80fd\u83b7\u53d6\u5230response.status()\uff0c\u800cresponse.body()\u4e3anull\u3002\nHttpURLConnection\u76f8\u5173\u4fe1\u606f\u7684\u6e90\u7801\u94fe\u63a5\uff1ahttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/net/www/protocol/http/HttpURLConnection.java#1079\n\n\n\u89e3\u51b3\u601d\u8def\n\n\n\u5173\u4e8e\u6b64\u95ee\u9898\u4ea7\u751f\u7684\u539f\u56e0\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u5c31\u662ffeign.Client\u5b9e\u73b0\u901a\u4fe1\u7684\u65b9\u5f0f\u9009\u7528\u4e86\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u7684HttpURLConnection\u3002\u60f3\u5230\u901a\u5e38\u5728Spring\u7684\u4ee3\u7801\u4e2dOCP\u90fd\u662f\u8fd0\u7528\u5f97\u5f88\u597d\u7684\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\u6709\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u4fe1\u5fc3\u4e86\uff0c\u6700\u4e0d\u6d4e\u5c31\u662f\u81ea\u5df1\u6269\u5c55Feign\uff0c\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5df1\u60f3\u8981\u7684feign.Client\uff0c\u5f53\u7136\u8fd9\u79cd\u4e8b\u60c5Spring Cloud\u57fa\u672c\u90fd\u4f1a\u81ea\u5df1\u641e\u5b9a\uff0c\u8fd9\u4e5f\u662fSpring Cloud\u5f3a\u5927\u5b8c\u5584\u7684\u4e00\u4e2a\u5730\u65b9\u3002\n\u901a\u8fc7\u8fd9\u4e2a\u601d\u8def\u67e5\u770b\u6e90\u7801\uff0c\u679c\u7136\u770b\u5230\u4e86Spring Cloud\u5728\u4f7f\u7528Feign\u63d0\u524d\u5185\u7f6e\u4e86\u4e09\u79cd\u901a\u4fe1\u65b9\u5f0f\uff08feign.Client.Default\uff0cfeign.httpclient.ApacheHttpClient\uff0cfeign.okhttp.OkHttpClient\uff09\uff0c\u5176\u4e2d\u7f3a\u7701\u7684\u60c5\u51b5\u4f7f\u7528\u7684\u5c31\u662ffeign.Client.Default\uff0c\u8fd9\u4e2a\u5c31\u662f\u4f7f\u7528HttpURLConnection\u901a\u4fe1\u7684\u65b9\u5f0f\u3002\n\n\n\u6e90\u7801\u89e3\u6790\n\n\n\u5728Spring Cloud\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86Ribbon\u7684\u7ec4\u4ef6\uff0c\u5176\u4f1a\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f7f\u7528Feign\uff0c\u67e5\u770borg.springframework.cloud.netflix.feign.ribbon.FeignRibbonClientAutoConfiguration\u6e90\u7801\n\n\n@ConditionalOnClass({ ILoadBalancer.class, Feign.class })\n@Configuration\n@AutoConfigureBefore(FeignAutoConfiguration.class)\npublic class FeignRibbonClientAutoConfiguration {\n\n        @Bean\n    @ConditionalOnMissingBean\n    public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n            SpringClientFactory clientFactory) {\n        return new LoadBalancerFeignClient(new Client.Default(null, null),\n                cachingFactory, clientFactory);\n    }\n\n        @Configuration\n    @ConditionalOnClass(ApacheHttpClient.class)\n    @ConditionalOnProperty(value = \nfeign.httpclient.enabled\n, matchIfMissing = true)\n    protected static class HttpClientFeignLoadBalancedConfiguration {\n\n        @Autowired(required = false)\n        private HttpClient httpClient;\n\n        @Bean\n        @ConditionalOnMissingBean(Client.class)\n        public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n                SpringClientFactory clientFactory) {\n            ApacheHttpClient delegate;\n            if (this.httpClient != null) {\n                delegate = new ApacheHttpClient(this.httpClient);\n            }\n            else {\n                delegate = new ApacheHttpClient();\n            }\n            return new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n        }\n    }\n\n    @Configuration\n    @ConditionalOnClass(OkHttpClient.class)\n    @ConditionalOnProperty(value = \nfeign.okhttp.enabled\n, matchIfMissing = true)\n    protected static class OkHttpFeignLoadBalancedConfiguration {\n\n        @Autowired(required = false)\n        private okhttp3.OkHttpClient okHttpClient;\n\n        @Bean\n        @ConditionalOnMissingBean(Client.class)\n        public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n                SpringClientFactory clientFactory) {\n            OkHttpClient delegate;\n            if (this.okHttpClient != null) {\n                delegate = new OkHttpClient(this.okHttpClient);\n            }\n            else {\n                delegate = new OkHttpClient();\n            }\n            return new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n        }\n    }\n}\n\n\n\n\n\n\n\u4ecefeignClient(CachingSpringLoadBalancerFactory cachingFactory, SpringClientFactory clientFactory) \u65b9\u6cd5\u7ed3\u5408\u5176\u4e0a\u6ce8\u89e3\u6211\u4eec\u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u77e5\u9053\uff0c\u5f53\u6ca1\u6709feign.ClientBean\u7684\u65f6\u5019\u4f1a\u9ed8\u8ba4\u751f\u6210feign.Client.Default\u6765\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u5c31\u662f\u4e4b\u524d\u8bf4\u7684\u7f3a\u7701\u901a\u4fe1\u65b9\u5f0f\n\n\n\u4eceHttpClientFeignLoadBalancedConfiguration\u3001OkHttpFeignLoadBalancedConfiguration\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5176\u751f\u6548\u7684\u6761\u4ef6\uff0c\u5f53classpath\u4e2d\u6709feign.httpclient.ApacheHttpClient\u5e76\u4e14\u914d\u7f6efeign.httpclient.enabled=true\uff08\u7f3a\u7701\u4e3atrue\uff09\u3001feign.okhttp.OkHttpClient\u5e76\u4e14\u914d\u7f6efeign.okhttp.enabled=true\uff08\u7f3a\u7701\u4e3atrue\uff09\n\n\n\u5f53\u4f7f\u7528ApacheHttpClient\u6216\u8005OkHttpClient\u8fdb\u884c\u901a\u4fe1\u65f6\u5c31\u4e0d\u4f1a\u5bfc\u81f4\u53d1\u751f401\\407\u9519\u8bef\u65f6\uff0c\u53d6\u4e0d\u5230\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u4e86\n\n\n\n\n\u89e3\u51b3\u65b9\u6cd5\n\n\n\u901a\u8fc7\u5176\u4e0a\u7684\u5206\u6790\uff0c\u89e3\u51b3\u65b9\u6cd5\u5df2\u7ecf\u663e\u800c\u6613\u89c1\u4e86\n\n\n1\u3001pom.xml\u6587\u4ef6\u4e2d\u65b0\u589e\n\n\ndependency\n\n         \ngroupId\ncom.netflix.feign\n/groupId\n\n         \nartifactId\nfeign-okhttp\n/artifactId\n\n         \nversion\n8.18.0\n/version\n\n   \n/dependency\n\n\n\n\n\n\u6216\u8005\n\n\ndependency\n\n         \ngroupId\ncom.netflix.feign\n/groupId\n\n         \nartifactId\nfeign-httpclient\n/artifactId\n\n         \nversion\n8.18.0\n/version\n\n   \n/dependency\n\n\n\n\n\n2\u3001application.properties\u6587\u4ef6\u4e2d\u589e\u52a0\uff08\u53ef\u7f3a\u7701\uff0c\u5982\u6709\u5207\u6362\u8c03\u7528\u65b9\u5f0f\u9700\u6c42\u53ef\u6dfb\u52a0\u914d\u7f6e\u8fdb\u884c\u63a7\u5236\uff09\n\n\nfeign.okhttp.enabled=true\n\n\n\u6216\u8005\n\n\nfeign.httpclient.enabled=true", 
            "title": "feign\u4f7f\u7528\u95ee\u9898"
        }, 
        {
            "location": "/feign-problem/#spring-cloudfeign401407", 
            "text": "", 
            "title": "Spring Cloud\u9879\u76ee\u4e2d\u901a\u8fc7Feign\u8fdb\u884c\u5185\u90e8\u670d\u52a1\u8c03\u7528\u53d1\u751f401\\407\u9519\u8bef\u65e0\u8fd4\u56de\u4fe1\u606f\u7684\u95ee\u9898"
        }, 
        {
            "location": "/feign-problem/#_1", 
            "text": "\u6700\u8fd1\u5728\u4f7f\u7528Spring Cloud\u6539\u9020\u73b0\u6709\u670d\u52a1\u7684\u5de5\u4f5c\u4e2d\uff0c\u5728\u5185\u90e8\u670d\u52a1\u7684\u8c03\u7528\u65b9\u5f0f\u4e0a\u9009\u62e9\u4e86Feign\u7ec4\u4ef6\uff0c\u7531\u4e8e\u670d\u52a1\u4e0e\u670d\u52a1\u4e4b\u95f4\u6709\u6743\u9650\u63a7\u5236\uff0c\u53d1\u73b0\u901a\u8fc7Feign\u6765\u8fdb\u884c\u8c03\u7528\u65f6\u5982\u679c\u53d1\u751f\u4e86401\u3001407\u9519\u8bef\u65f6\uff0c\u8c03\u7528\u65b9\u4e0d\u80fd\u591f\u53d6\u56de\u88ab\u8c03\u7528\u65b9\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u3002", 
            "title": "\u95ee\u9898\u63cf\u8ff0"
        }, 
        {
            "location": "/feign-problem/#_2", 
            "text": "Feign\u9ed8\u8ba4\u4f7f\u7528java.net.HttpURLConnection\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u8fc7\u67e5\u770b\u5176\u5b50\u7c7bsun.net.www.protocol.http.HttpURLConnection\u6e90\u7801\u53d1\u73b0\u4ee3\u7801\u4e2d\u5728\u8fdb\u884c\u901a\u4fe1\u65f6\u5355\u72ec\u5bf9\u9519\u8bef\u7801\u4e3a401\\407\u7684\u9519\u8bef\u8bf7\u6c42\u505a\u4e86\u5904\u7406\uff0c\u5f53\u8bf7\u6c42\u7684\u9519\u8bef\u7801\u4e3a401\\407\u65f6\uff0c\u4f1a\u5173\u95ed\u8bf7\u6c42\u6d41\uff0c\u7531\u4e8e\u6b64\u65f6\u8fd8\u5e76\u6ca1\u6709\u5c06\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u5199\u5165\u54cd\u5e94\u6d41\u4e2d\uff0c\u6240\u4ee5\u63a5\u6536\u7684\u8fd4\u56de\u4fe1\u606f\u4e2d\u4ec5\u4ec5\u80fd\u83b7\u53d6\u5230response.status()\uff0c\u800cresponse.body()\u4e3anull\u3002\nHttpURLConnection\u76f8\u5173\u4fe1\u606f\u7684\u6e90\u7801\u94fe\u63a5\uff1ahttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/net/www/protocol/http/HttpURLConnection.java#1079", 
            "title": "\u4ea7\u751f\u539f\u56e0"
        }, 
        {
            "location": "/feign-problem/#_3", 
            "text": "\u5173\u4e8e\u6b64\u95ee\u9898\u4ea7\u751f\u7684\u539f\u56e0\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u5c31\u662ffeign.Client\u5b9e\u73b0\u901a\u4fe1\u7684\u65b9\u5f0f\u9009\u7528\u4e86\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u7684HttpURLConnection\u3002\u60f3\u5230\u901a\u5e38\u5728Spring\u7684\u4ee3\u7801\u4e2dOCP\u90fd\u662f\u8fd0\u7528\u5f97\u5f88\u597d\u7684\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\u6709\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u4fe1\u5fc3\u4e86\uff0c\u6700\u4e0d\u6d4e\u5c31\u662f\u81ea\u5df1\u6269\u5c55Feign\uff0c\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5df1\u60f3\u8981\u7684feign.Client\uff0c\u5f53\u7136\u8fd9\u79cd\u4e8b\u60c5Spring Cloud\u57fa\u672c\u90fd\u4f1a\u81ea\u5df1\u641e\u5b9a\uff0c\u8fd9\u4e5f\u662fSpring Cloud\u5f3a\u5927\u5b8c\u5584\u7684\u4e00\u4e2a\u5730\u65b9\u3002\n\u901a\u8fc7\u8fd9\u4e2a\u601d\u8def\u67e5\u770b\u6e90\u7801\uff0c\u679c\u7136\u770b\u5230\u4e86Spring Cloud\u5728\u4f7f\u7528Feign\u63d0\u524d\u5185\u7f6e\u4e86\u4e09\u79cd\u901a\u4fe1\u65b9\u5f0f\uff08feign.Client.Default\uff0cfeign.httpclient.ApacheHttpClient\uff0cfeign.okhttp.OkHttpClient\uff09\uff0c\u5176\u4e2d\u7f3a\u7701\u7684\u60c5\u51b5\u4f7f\u7528\u7684\u5c31\u662ffeign.Client.Default\uff0c\u8fd9\u4e2a\u5c31\u662f\u4f7f\u7528HttpURLConnection\u901a\u4fe1\u7684\u65b9\u5f0f\u3002", 
            "title": "\u89e3\u51b3\u601d\u8def"
        }, 
        {
            "location": "/feign-problem/#_4", 
            "text": "\u5728Spring Cloud\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86Ribbon\u7684\u7ec4\u4ef6\uff0c\u5176\u4f1a\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f7f\u7528Feign\uff0c\u67e5\u770borg.springframework.cloud.netflix.feign.ribbon.FeignRibbonClientAutoConfiguration\u6e90\u7801  @ConditionalOnClass({ ILoadBalancer.class, Feign.class })\n@Configuration\n@AutoConfigureBefore(FeignAutoConfiguration.class)\npublic class FeignRibbonClientAutoConfiguration {\n\n        @Bean\n    @ConditionalOnMissingBean\n    public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n            SpringClientFactory clientFactory) {\n        return new LoadBalancerFeignClient(new Client.Default(null, null),\n                cachingFactory, clientFactory);\n    }\n\n        @Configuration\n    @ConditionalOnClass(ApacheHttpClient.class)\n    @ConditionalOnProperty(value =  feign.httpclient.enabled , matchIfMissing = true)\n    protected static class HttpClientFeignLoadBalancedConfiguration {\n\n        @Autowired(required = false)\n        private HttpClient httpClient;\n\n        @Bean\n        @ConditionalOnMissingBean(Client.class)\n        public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n                SpringClientFactory clientFactory) {\n            ApacheHttpClient delegate;\n            if (this.httpClient != null) {\n                delegate = new ApacheHttpClient(this.httpClient);\n            }\n            else {\n                delegate = new ApacheHttpClient();\n            }\n            return new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n        }\n    }\n\n    @Configuration\n    @ConditionalOnClass(OkHttpClient.class)\n    @ConditionalOnProperty(value =  feign.okhttp.enabled , matchIfMissing = true)\n    protected static class OkHttpFeignLoadBalancedConfiguration {\n\n        @Autowired(required = false)\n        private okhttp3.OkHttpClient okHttpClient;\n\n        @Bean\n        @ConditionalOnMissingBean(Client.class)\n        public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n                SpringClientFactory clientFactory) {\n            OkHttpClient delegate;\n            if (this.okHttpClient != null) {\n                delegate = new OkHttpClient(this.okHttpClient);\n            }\n            else {\n                delegate = new OkHttpClient();\n            }\n            return new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n        }\n    }\n}   \u4ecefeignClient(CachingSpringLoadBalancerFactory cachingFactory, SpringClientFactory clientFactory) \u65b9\u6cd5\u7ed3\u5408\u5176\u4e0a\u6ce8\u89e3\u6211\u4eec\u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u77e5\u9053\uff0c\u5f53\u6ca1\u6709feign.ClientBean\u7684\u65f6\u5019\u4f1a\u9ed8\u8ba4\u751f\u6210feign.Client.Default\u6765\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u5c31\u662f\u4e4b\u524d\u8bf4\u7684\u7f3a\u7701\u901a\u4fe1\u65b9\u5f0f  \u4eceHttpClientFeignLoadBalancedConfiguration\u3001OkHttpFeignLoadBalancedConfiguration\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5176\u751f\u6548\u7684\u6761\u4ef6\uff0c\u5f53classpath\u4e2d\u6709feign.httpclient.ApacheHttpClient\u5e76\u4e14\u914d\u7f6efeign.httpclient.enabled=true\uff08\u7f3a\u7701\u4e3atrue\uff09\u3001feign.okhttp.OkHttpClient\u5e76\u4e14\u914d\u7f6efeign.okhttp.enabled=true\uff08\u7f3a\u7701\u4e3atrue\uff09  \u5f53\u4f7f\u7528ApacheHttpClient\u6216\u8005OkHttpClient\u8fdb\u884c\u901a\u4fe1\u65f6\u5c31\u4e0d\u4f1a\u5bfc\u81f4\u53d1\u751f401\\407\u9519\u8bef\u65f6\uff0c\u53d6\u4e0d\u5230\u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u4e86", 
            "title": "\u6e90\u7801\u89e3\u6790"
        }, 
        {
            "location": "/feign-problem/#_5", 
            "text": "\u901a\u8fc7\u5176\u4e0a\u7684\u5206\u6790\uff0c\u89e3\u51b3\u65b9\u6cd5\u5df2\u7ecf\u663e\u800c\u6613\u89c1\u4e86  1\u3001pom.xml\u6587\u4ef6\u4e2d\u65b0\u589e  dependency \n          groupId com.netflix.feign /groupId \n          artifactId feign-okhttp /artifactId \n          version 8.18.0 /version \n    /dependency   \u6216\u8005  dependency \n          groupId com.netflix.feign /groupId \n          artifactId feign-httpclient /artifactId \n          version 8.18.0 /version \n    /dependency   2\u3001application.properties\u6587\u4ef6\u4e2d\u589e\u52a0\uff08\u53ef\u7f3a\u7701\uff0c\u5982\u6709\u5207\u6362\u8c03\u7528\u65b9\u5f0f\u9700\u6c42\u53ef\u6dfb\u52a0\u914d\u7f6e\u8fdb\u884c\u63a7\u5236\uff09  feign.okhttp.enabled=true  \u6216\u8005  feign.httpclient.enabled=true", 
            "title": "\u89e3\u51b3\u65b9\u6cd5"
        }, 
        {
            "location": "/designPattern/", 
            "text": "observer pattern\n\n\n\n* \u88ab\u89c2\u5bdf\u8005\n\n\npublic class DemoObservable extends Observable {\n    private String param;\n\n    public String getParam(){\n        return this.param;\n    }\n\n    public void setParam(String param){\n        this.param = param;\n        setChanged();\n        notifyObservers();\n    }\n}\n\n\n\n\n\u5728\u72b6\u6001\u53d8\u5316\u7684\u65f6\u5019\uff0c\u9700\u8981\u6539\u53d8\u72b6\u6001\u901a\u77e5\uff0c\u7136\u540e\u901a\u77e5\u89c2\u5bdf\u8005\u3002\n* \u89c2\u5bdf\u8005\n\n\npublic class DemoObserver implements Observer {\n    @Override\n    public void update(Observable o, Object arg) {\n        DemoObservable demoObservable = (DemoObservable) o;\n        System.out.println(\n\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u63a5\u6536\u5230\u6539\u53d8\u4fe1\u606f\uff1a\n+((DemoObservable) o).getParam());\n    }\n}\n\n\n\n\n\u89c2\u5bdf\u8005\u9700\u8981\u5b9e\u73b0update\u65b9\u6cd5\u3002\u4e00\u822c\u505a\u6cd5\u9700\u8981\u5173\u6ce8\u4e0bupdate\u65b9\u6cd5\u5b9e\u73b0\u540e\uff0c\u662f\u5426\u9700\u8981\u628a\u72b6\u6001\u6539\u56de\u6765\uff0c\u5373setChanged(false);\n\n\n\n\n\u6d4b\u8bd5\u7c7b\n\n\n\n\npublic class TestDemo {\n    public static void main(String[] args){\n        DemoObservable demoObservable = new DemoObservable();\n        DemoObserver demoObserver = new DemoObserver();\n        demoObservable.addObserver(demoObserver);\n        demoObservable.setParam(\n123123\n);\n    }\n}\n\n\n\n\n\n\n\u6d4b\u8bd5\u7ed3\u679c\n\n\n\n\n\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u63a5\u6536\u5230\u6539\u53d8\u4fe1\u606f\uff1a123123", 
            "title": "\u8bbe\u8ba1\u6a21\u5f0f"
        }, 
        {
            "location": "/designPattern/#observer-pattern", 
            "text": "* \u88ab\u89c2\u5bdf\u8005  public class DemoObservable extends Observable {\n    private String param;\n\n    public String getParam(){\n        return this.param;\n    }\n\n    public void setParam(String param){\n        this.param = param;\n        setChanged();\n        notifyObservers();\n    }\n}  \u5728\u72b6\u6001\u53d8\u5316\u7684\u65f6\u5019\uff0c\u9700\u8981\u6539\u53d8\u72b6\u6001\u901a\u77e5\uff0c\u7136\u540e\u901a\u77e5\u89c2\u5bdf\u8005\u3002\n* \u89c2\u5bdf\u8005  public class DemoObserver implements Observer {\n    @Override\n    public void update(Observable o, Object arg) {\n        DemoObservable demoObservable = (DemoObservable) o;\n        System.out.println( \u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u63a5\u6536\u5230\u6539\u53d8\u4fe1\u606f\uff1a +((DemoObservable) o).getParam());\n    }\n}  \u89c2\u5bdf\u8005\u9700\u8981\u5b9e\u73b0update\u65b9\u6cd5\u3002\u4e00\u822c\u505a\u6cd5\u9700\u8981\u5173\u6ce8\u4e0bupdate\u65b9\u6cd5\u5b9e\u73b0\u540e\uff0c\u662f\u5426\u9700\u8981\u628a\u72b6\u6001\u6539\u56de\u6765\uff0c\u5373setChanged(false);   \u6d4b\u8bd5\u7c7b   public class TestDemo {\n    public static void main(String[] args){\n        DemoObservable demoObservable = new DemoObservable();\n        DemoObserver demoObserver = new DemoObserver();\n        demoObservable.addObserver(demoObserver);\n        demoObservable.setParam( 123123 );\n    }\n}   \u6d4b\u8bd5\u7ed3\u679c   \u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u63a5\u6536\u5230\u6539\u53d8\u4fe1\u606f\uff1a123123", 
            "title": "observer pattern"
        }, 
        {
            "location": "/docker/", 
            "text": "docker \u7b80\u4ecb\n\n\nDocker \u4e24\u4e2a\u4e3b\u8981\u90e8\u4ef6\uff1a\n\n\nDocker: \u5f00\u6e90\u7684\u5bb9\u5668\u865a\u62df\u5316\u5e73\u53f0\nDocker Hub: \u7528\u4e8e\u5206\u4eab\u3001\u7ba1\u7406 Docker \u5bb9\u5668\u7684 Docker SaaS \u5e73\u53f0 -- Docker Hub\nDocker \u4f7f\u7528\u5ba2\u6237\u7aef-\u670d\u52a1\u5668 (C/S) \u67b6\u6784\u6a21\u5f0f\u3002Docker \u5ba2\u6237\u7aef\u4f1a\u4e0e Docker \u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u901a\u4fe1\u3002Docker \u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5904\u7406\u590d\u6742\u7e41\u91cd\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5efa\u7acb\u3001\u8fd0\u884c\u3001\u53d1\u5e03\u4f60\u7684 Docker \u5bb9\u5668\u3002Docker \u5ba2\u6237\u7aef\u548c\u5b88\u62a4\u8fdb\u7a0b\u53ef\u4ee5\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u4e0a\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Docker \u5ba2\u6237\u7aef\u53bb\u8fde\u63a5\u4e00\u4e2a\u8fdc\u7a0b\u7684 Docker \u5b88\u62a4\u8fdb\u7a0b\u3002Docker \u5ba2\u6237\u7aef\u548c\u5b88\u62a4\u8fdb\u7a0b\u4e4b\u95f4\u901a\u8fc7 socket \u6216\u8005 RESTful API \u8fdb\u884c\u901a\u4fe1\u3002\n\n\n\n\n Docker \u5b88\u62a4\u8fdb\u7a0b \n\n\n\n\n\u5982\u4e0a\u56fe\u6240\u793a\uff0cDocker \u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\u5728\u4e00\u53f0\u4e3b\u673a\u4e0a\u3002\u7528\u6237\u5e76\u4e0d\u76f4\u63a5\u548c\u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u662f\u901a\u8fc7 Docker \u5ba2\u6237\u7aef\u95f4\u63a5\u548c\u5176\u901a\u4fe1\u3002\n\n\n\n\n Docker \u5ba2\u6237\u7aef \n \n\n\n\n\nDocker \u5ba2\u6237\u7aef\uff0c\u5b9e\u9645\u4e0a\u662f docker \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u662f\u4e3b\u8981\u7684\u7528\u6237\u4e0e Docker \u4ea4\u4e92\u65b9\u5f0f\u3002\u5b83\u63a5\u6536\u7528\u6237\u6307\u4ee4\u5e76\u4e14\u4e0e\u80cc\u540e\u7684 Docker \u5b88\u62a4\u8fdb\u7a0b\u901a\u4fe1\uff0c\u5982\u6b64\u6765\u56de\u5f80\u590d\u3002\n\n\n\n\n Docker \u5185\u90e8 \n \n\n\n\n\n\u8981\u7406\u89e3 Docker \u5185\u90e8\u6784\u5efa\uff0c\u9700\u8981\u7406\u89e3\u4ee5\u4e0b\u4e09\u79cd\u90e8\u4ef6\uff1a\n\n\nDocker \u955c\u50cf - Docker images\nDocker \u4ed3\u5e93 - Docker registeries\nDocker \u5bb9\u5668 - Docker containers\n\n\n\n\n\n\nDocker \u955c\u50cf\n\n\n\n\nDocker \u955c\u50cf\u662f Docker \u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u53ea\u8bfb\u6a21\u677f\uff0c\u6bcf\u4e00\u4e2a\u955c\u50cf\u7531\u4e00\u7cfb\u5217\u7684\u5c42 (layers) \u7ec4\u6210\u3002Docker \u4f7f\u7528 UnionFS \u6765\u5c06\u8fd9\u4e9b\u5c42\u8054\u5408\u5230\u5355\u72ec\u7684\u955c\u50cf\u4e2d\u3002UnionFS \u5141\u8bb8\u72ec\u7acb\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939(\u79f0\u4e4b\u4e3a\u5206\u652f)\u88ab\u900f\u660e\u8986\u76d6\uff0c\u5f62\u6210\u4e00\u4e2a\u5355\u72ec\u8fde\u8d2f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u6b63\u56e0\u4e3a\u6709\u4e86\u8fd9\u4e9b\u5c42\u7684\u5b58\u5728\uff0cDocker \u662f\u5982\u6b64\u7684\u8f7b\u91cf\u3002\u5f53\u4f60\u6539\u53d8\u4e86\u4e00\u4e2a Docker \u955c\u50cf\uff0c\u6bd4\u5982\u5347\u7ea7\u5230\u67d0\u4e2a\u7a0b\u5e8f\u5230\u65b0\u7684\u7248\u672c\uff0c\u4e00\u4e2a\u65b0\u7684\u5c42\u4f1a\u88ab\u521b\u5efa\u3002\u56e0\u6b64\uff0c\u4e0d\u7528\u66ff\u6362\u6574\u4e2a\u539f\u5148\u7684\u955c\u50cf\u6216\u8005\u91cd\u65b0\u5efa\u7acb(\u5728\u4f7f\u7528\u865a\u62df\u673a\u7684\u65f6\u5019\u4f60\u53ef\u80fd\u4f1a\u8fd9\u4e48\u505a)\uff0c\u53ea\u662f\u4e00\u4e2a\u65b0\u7684\u5c42\u88ab\u6dfb\u52a0\u6216\u5347\u7ea7\u4e86\u3002\u73b0\u5728\u4f60\u4e0d\u7528\u91cd\u65b0\u53d1\u5e03\u6574\u4e2a\u955c\u50cf\uff0c\u53ea\u9700\u8981\u5347\u7ea7\uff0c\u5c42\u4f7f\u5f97\u5206\u53d1 Docker \u955c\u50cf\u53d8\u5f97\u7b80\u5355\u548c\u5feb\u901f\u3002\n\n\n\n\nDocker \u4ed3\u5e93\n\n\n\n\nDocker \u4ed3\u5e93\u7528\u6765\u4fdd\u5b58\u955c\u50cf\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ee3\u7801\u63a7\u5236\u4e2d\u7684\u4ee3\u7801\u4ed3\u5e93\u3002\u540c\u6837\u7684\uff0cDocker \u4ed3\u5e93\u4e5f\u6709\u516c\u6709\u548c\u79c1\u6709\u7684\u6982\u5ff5\u3002\u516c\u6709\u7684 Docker \u4ed3\u5e93\u540d\u5b57\u662f Docker Hub\u3002Docker Hub \u63d0\u4f9b\u4e86\u5e9e\u5927\u7684\u955c\u50cf\u96c6\u5408\u4f9b\u4f7f\u7528\u3002\u8fd9\u4e9b\u955c\u50cf\u53ef\u4ee5\u662f\u81ea\u5df1\u521b\u5efa\uff0c\u6216\u8005\u5728\u522b\u4eba\u7684\u955c\u50cf\u57fa\u7840\u4e0a\u521b\u5efa\u3002Docker \u4ed3\u5e93\u662f Docker \u7684\u5206\u53d1\u90e8\u5206\u3002\n\n\n\n\nDocker \u5bb9\u5668\n\n\n\n\nDocker \u5bb9\u5668\u548c\u6587\u4ef6\u5939\u5f88\u7c7b\u4f3c\uff0c\u4e00\u4e2aDocker\u5bb9\u5668\u5305\u542b\u4e86\u6240\u6709\u7684\u67d0\u4e2a\u5e94\u7528\u8fd0\u884c\u6240\u9700\u8981\u7684\u73af\u5883\u3002\u6bcf\u4e00\u4e2a Docker \u5bb9\u5668\u90fd\u662f\u4ece Docker \u955c\u50cf\u521b\u5efa\u7684\u3002Docker \u5bb9\u5668\u53ef\u4ee5\u8fd0\u884c\u3001\u5f00\u59cb\u3001\u505c\u6b62\u3001\u79fb\u52a8\u548c\u5220\u9664\u3002\u6bcf\u4e00\u4e2a Docker \u5bb9\u5668\u90fd\u662f\u72ec\u7acb\u548c\u5b89\u5168\u7684\u5e94\u7528\u5e73\u53f0\uff0cDocker \u5bb9\u5668\u662f Docker \u7684\u8fd0\u884c\u90e8\u5206\u3002\n\n\n\n\nlibcontainer\n\n\n\n\nDocker \u4ece 0.9 \u7248\u672c\u5f00\u59cb\u4f7f\u7528 libcontainer \u66ff\u4ee3 lxc\uff0clibcontainer \u548c Linux \u7cfb\u7edf\u7684\u4ea4\u4e92\u56fe\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\n \u547d\u540d\u7a7a\u95f4\u300cNamespaces\u300d \n\n\n\n\n\n\npid namespace\n\n\n\n\n\n\n\u4e0d\u540c\u7528\u6237\u7684\u8fdb\u7a0b\u5c31\u662f\u901a\u8fc7 pid namespace \u9694\u79bb\u5f00\u7684\uff0c\u4e14\u4e0d\u540c namespace \u4e2d\u53ef\u4ee5\u6709\u76f8\u540c PID\u3002\u5177\u6709\u4ee5\u4e0b\u7279\u5f81:\n\n\n\u6bcf\u4e2a namespace \u4e2d\u7684 pid \u662f\u6709\u81ea\u5df1\u7684 pid=1 \u7684\u8fdb\u7a0b(\u7c7b\u4f3c /sbin/init \u8fdb\u7a0b)\n\u6bcf\u4e2a namespace \u4e2d\u7684\u8fdb\u7a0b\u53ea\u80fd\u5f71\u54cd\u81ea\u5df1\u7684\u540c\u4e00\u4e2a namespace \u6216\u5b50 namespace \u4e2d\u7684\u8fdb\u7a0b\n\u56e0\u4e3a /proc \u5305\u542b\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u56e0\u6b64\u5728 container \u4e2d\u7684 pseudo-filesystem \u7684 /proc \u76ee\u5f55\u53ea\u80fd\u770b\u5230\u81ea\u5df1 namespace \u4e2d\u7684\u8fdb\u7a0b\n\u56e0\u4e3a namespace \u5141\u8bb8\u5d4c\u5957\uff0c\u7236 namespace \u53ef\u4ee5\u5f71\u54cd\u5b50 namespace \u7684\u8fdb\u7a0b\uff0c\u6240\u4ee5\u5b50 namespace \u7684\u8fdb\u7a0b\u53ef\u4ee5\u5728\u7236 namespace \u4e2d\u770b\u5230\uff0c\u4f46\u662f\u5177\u6709\u4e0d\u540c\u7684 pid\n\n\n\n\nmnt namespace\n\n\n\n\n\u7c7b\u4f3c chroot\uff0c\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u653e\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u76ee\u5f55\u6267\u884c\u3002mnt namespace \u5141\u8bb8\u4e0d\u540c namespace \u7684\u8fdb\u7a0b\u770b\u5230\u7684\u6587\u4ef6\u7ed3\u6784\u4e0d\u540c\uff0c\u8fd9\u6837\u6bcf\u4e2a namespace \u4e2d\u7684\u8fdb\u7a0b\u6240\u770b\u5230\u7684\u6587\u4ef6\u76ee\u5f55\u5c31\u88ab\u9694\u79bb\u5f00\u4e86\u3002\u540c chroot \u4e0d\u540c\uff0c\u6bcf\u4e2a namespace \u4e2d\u7684 container \u5728 /proc/mounts \u7684\u4fe1\u606f\u53ea\u5305\u542b\u6240\u5728 namespace \u7684 mount point\u3002\n\n\n\n\nnet namespace\n\n\n\n\n\u7f51\u7edc\u9694\u79bb\u662f\u901a\u8fc7 net namespace \u5b9e\u73b0\u7684\uff0c \u6bcf\u4e2a net namespace \u6709\u72ec\u7acb\u7684 network devices, IP addresses, IP routing tables, /proc/net \u76ee\u5f55\u3002\u8fd9\u6837\u6bcf\u4e2a container \u7684\u7f51\u7edc\u5c31\u80fd\u9694\u79bb\u5f00\u6765\u3002 docker \u9ed8\u8ba4\u91c7\u7528 veth \u7684\u65b9\u5f0f\u5c06 container \u4e2d\u7684\u865a\u62df\u7f51\u5361\u540c host \u4e0a\u7684\u4e00\u4e2a docker bridge \u8fde\u63a5\u5728\u4e00\u8d77\u3002\n\n\n\n\nuts namespace\n\n\n\n\nUTS (\"UNIX Time-sharing System\") namespace \u5141\u8bb8\u6bcf\u4e2a container \u62e5\u6709\u72ec\u7acb\u7684 hostname \u548c domain name, \u4f7f\u5176\u5728\u7f51\u7edc\u4e0a\u53ef\u4ee5\u88ab\u89c6\u4f5c\u4e00\u4e2a\u72ec\u7acb\u7684\u8282\u70b9\u800c\u975e Host \u4e0a\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002\n\n\n\n\nipc namespace\n\n\n\n\ncontainer \u4e2d\u8fdb\u7a0b\u4ea4\u4e92\u8fd8\u662f\u91c7\u7528 Linux \u5e38\u89c1\u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u65b9\u6cd5 (interprocess communication - IPC), \u5305\u62ec\u5e38\u89c1\u7684\u4fe1\u53f7\u91cf\u3001\u6d88\u606f\u961f\u5217\u548c\u5171\u4eab\u5185\u5b58\u3002\u7136\u800c\u540c VM \u4e0d\u540c\uff0ccontainer \u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u5b9e\u9645\u4e0a\u8fd8\u662f host \u4e0a\u5177\u6709\u76f8\u540c pid namespace \u4e2d\u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\uff0c\u56e0\u6b64\u9700\u8981\u5728IPC\u8d44\u6e90\u7533\u8bf7\u65f6\u52a0\u5165 namespace \u4fe1\u606f - \u6bcf\u4e2a IPC \u8d44\u6e90\u6709\u4e00\u4e2a\u552f\u4e00\u7684 32bit ID\u3002\n\n\n\n\nuser namespace\n\n\n\n\n\u6bcf\u4e2a container \u53ef\u4ee5\u6709\u4e0d\u540c\u7684 user \u548c group id, \u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4ee5 container \u5185\u90e8\u7684\u7528\u6237\u5728 container \u5185\u90e8\u6267\u884c\u7a0b\u5e8f\u800c\u975e Host \u4e0a\u7684\u7528\u6237\u3002\n\n\n\u6709\u4e86\u4ee5\u4e0a 6 \u79cd namespace \u4ece\u8fdb\u7a0b\u3001\u7f51\u7edc\u3001IPC\u3001\u6587\u4ef6\u7cfb\u7edf\u3001UTS \u548c\u7528\u6237\u89d2\u5ea6\u7684\u9694\u79bb\uff0c\u4e00\u4e2a container \u5c31\u53ef\u4ee5\u5bf9\u5916\u5c55\u73b0\u51fa\u4e00\u4e2a\u72ec\u7acb\u8ba1\u7b97\u673a\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u4e0d\u540c container \u4ece OS \u5c42\u9762\u5b9e\u73b0\u4e86\u9694\u79bb\u3002 \u7136\u800c\u4e0d\u540c namespace \u4e4b\u95f4\u8d44\u6e90\u8fd8\u662f\u76f8\u4e92\u7ade\u4e89\u7684\uff0c\u4ecd\u7136\u9700\u8981\u7c7b\u4f3c ulimit \u6765\u7ba1\u7406\u6bcf\u4e2a container \u6240\u80fd\u4f7f\u7528\u7684\u8d44\u6e90 - cgroup\u3002\n\n\n\n\n \u8d44\u6e90\u914d\u989d\u300ccgroups\u300d \n\n\n\n\ncgroups \u5b9e\u73b0\u4e86\u5bf9\u8d44\u6e90\u7684\u914d\u989d\u548c\u5ea6\u91cf\u3002 cgroups \u7684\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u63d0\u4f9b\u7c7b\u4f3c\u6587\u4ef6\u7684\u63a5\u53e3\uff0c\u5728 /cgroup \u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u5373\u53ef\u65b0\u5efa\u4e00\u4e2a group\uff0c\u5728\u6b64\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa task \u6587\u4ef6\uff0c\u5e76\u5c06 pid \u5199\u5165\u8be5\u6587\u4ef6\uff0c\u5373\u53ef\u5b9e\u73b0\u5bf9\u8be5\u8fdb\u7a0b\u7684\u8d44\u6e90\u63a7\u5236\u3002\u5177\u4f53\u7684\u8d44\u6e90\u914d\u7f6e\u9009\u9879\u53ef\u4ee5\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u5b50 subsystem \uff0c{\u5b50\u7cfb\u7edf\u524d\u7f00}.{\u8d44\u6e90\u9879} \u662f\u5178\u578b\u7684\u914d\u7f6e\u65b9\u6cd5\uff0c \u5982 memory.usage_in_bytes \u5c31\u5b9a\u4e49\u4e86\u8be5 group \u5728 subsystem memory \u4e2d\u7684\u4e00\u4e2a\u5185\u5b58\u9650\u5236\u9009\u9879\u3002 \u53e6\u5916\uff0ccgroups \u4e2d\u7684 subsystem \u53ef\u4ee5\u968f\u610f\u7ec4\u5408\uff0c\u4e00\u4e2a subsystem \u53ef\u4ee5\u5728\u4e0d\u540c\u7684 group \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4e00\u4e2a group \u5305\u542b\u591a\u4e2a subsystem - \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a subsystem\u3002\n\n\n\n\nmemory\n\n\n\u5185\u5b58\u76f8\u5173\u7684\u9650\u5236\n\n\n\n\n\n\ncpu\n\n\n\u5728 cgroup \u4e2d\uff0c\u5e76\u4e0d\u80fd\u50cf\u786c\u4ef6\u865a\u62df\u5316\u65b9\u6848\u4e00\u6837\u80fd\u591f\u5b9a\u4e49 CPU \u80fd\u529b\uff0c\u4f46\u662f\u80fd\u591f\u5b9a\u4e49 CPU \u8f6e\u8f6c\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u5177\u6709\u8f83\u9ad8 CPU \u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u4f1a\u66f4\u53ef\u80fd\u5f97\u5230 CPU \u8fd0\u7b97\u3002 \u901a\u8fc7\u5c06\u53c2\u6570\u5199\u5165 cpu.shares ,\u5373\u53ef\u5b9a\u4e49\u6539 cgroup \u7684 CPU \u4f18\u5148\u7ea7 - \u8fd9\u91cc\u662f\u4e00\u4e2a\u76f8\u5bf9\u6743\u91cd\uff0c\u800c\u975e\u7edd\u5bf9\u503c\n\n\n\n\n\n\nblkio\n\n\nblock IO \u76f8\u5173\u7684\u7edf\u8ba1\u548c\u9650\u5236\uff0cbyte/operation \u7edf\u8ba1\u548c\u9650\u5236 (IOPS \u7b49)\uff0c\u8bfb\u5199\u901f\u5ea6\u9650\u5236\u7b49\uff0c\u4f46\u662f\u8fd9\u91cc\u4e3b\u8981\u7edf\u8ba1\u7684\u90fd\u662f\u540c\u6b65 IO\n\n\n\n\n\n\ndevices\n\n\n\u8bbe\u5907\u6743\u9650\u9650\u5236\n\n\n\n\n\n\n\n\ndocker\u57fa\u7840\u7528\u6cd5\n\n\nDocker HUB : Docker\u955c\u50cf\u9996\u9875\uff0c\u5305\u62ec\u5b98\u65b9\u955c\u50cf\u548c\u5176\u5b83\u516c\u5f00\u955c\u50cf\n\u56e0\u4e3a\u56fd\u60c5\u7684\u539f\u56e0\uff0c\u56fd\u5185\u4e0b\u8f7d Docker HUB \u5b98\u65b9\u7684\u76f8\u5173\u955c\u50cf\u6bd4\u8f83\u6162\uff0c\u53ef\u4ee5\u4f7f\u7528 Daocloud \u955c\u50cf\u52a0\u901f\u3002\n\n\n\n\nSearch images\n\n\n\n\n$ sudo docker search ubuntu\n\n\n\n\n\n\nPull images\n\n\n\n\n$ sudo docker pull ubuntu # \u83b7\u53d6 ubuntu \u5b98\u65b9\u955c\u50cf\n$ sudo docker images # \u67e5\u770b\u5f53\u524d\u955c\u50cf\u5217\u8868\n\n\n\n\n\n\nRunning an interactive shell\n\n\n\n\n$ sudo docker run -i -t ubuntu:14.04 /bin/bash\n\ndocker run - \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\n-t - \u5206\u914d\u4e00\u4e2a\uff08\u4f2a\uff09tty (link is external)\n-i - \u4ea4\u4e92\u6a21\u5f0f (so we can interact with it)\nubuntu:14.04 - \u4f7f\u7528 ubuntu \u57fa\u7840\u955c\u50cf 14.04\n/bin/bash - \u8fd0\u884c\u547d\u4ee4 bash shell\n\n\n\n\n\u6ce8: ubuntu \u4f1a\u6709\u591a\u4e2a\u7248\u672c\uff0c\u901a\u8fc7\u6307\u5b9a tag \u6765\u542f\u52a8\u7279\u5b9a\u7684\u7248\u672c [image]:[tag]\n\n\n$ sudo docker ps # \u67e5\u770b\u5f53\u524d\u8fd0\u884c\u7684\u5bb9\u5668, ps -a \u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u7684\u5bb9\u5668\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes\n\n\n\n\n\n\n\u76f8\u5173\u5feb\u6377\u952e\n\n\n\n\n\u9000\u51fa\uff1aCtrl-D or exit\ndetach\uff1aCtrl-P + Ctrl-Q\nattach: docker attach CONTAINER-ID\n\n\n\n\nDocker \u547d\u4ee4\u5e2e\u52a9\n\n\n\n\ndocker help\n\n\ndocker command\n\n\n\n\n\n\n\n\n$ sudo docker   # docker \u547d\u4ee4\u5e2e\u52a9\n\nCommands:\n    attach    Attach to a running container                 # \u5f53\u524d shell \u4e0b attach \u8fde\u63a5\u6307\u5b9a\u8fd0\u884c\u955c\u50cf\n    build     Build an image from a Dockerfile              # \u901a\u8fc7 Dockerfile \u5b9a\u5236\u955c\u50cf\n    commit    Create a new image from a container's changes # \u63d0\u4ea4\u5f53\u524d\u5bb9\u5668\u4e3a\u65b0\u7684\u955c\u50cf\n    cp        Copy files/folders from the containers filesystem to the host path\n              # \u4ece\u5bb9\u5668\u4e2d\u62f7\u8d1d\u6307\u5b9a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u5230\u5bbf\u4e3b\u673a\u4e2d\n    create    Create a new container                        # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\uff0c\u540c run\uff0c\u4f46\u4e0d\u542f\u52a8\u5bb9\u5668\n    diff      Inspect changes on a container's filesystem   # \u67e5\u770b docker \u5bb9\u5668\u53d8\u5316\n    events    Get real time events from the server          # \u4ece docker \u670d\u52a1\u83b7\u53d6\u5bb9\u5668\u5b9e\u65f6\u4e8b\u4ef6\n    exec      Run a command in an existing container        # \u5728\u5df2\u5b58\u5728\u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u547d\u4ee4\n    export    Stream the contents of a container as a tar archive   \n              # \u5bfc\u51fa\u5bb9\u5668\u7684\u5185\u5bb9\u6d41\u4f5c\u4e3a\u4e00\u4e2a tar \u5f52\u6863\u6587\u4ef6[\u5bf9\u5e94 import ]\n    history   Show the history of an image                  # \u5c55\u793a\u4e00\u4e2a\u955c\u50cf\u5f62\u6210\u5386\u53f2\n    images    List images                                   # \u5217\u51fa\u7cfb\u7edf\u5f53\u524d\u955c\u50cf\n    import    Create a new filesystem image from the contents of a tarball  \n              # \u4ecetar\u5305\u4e2d\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u7cfb\u7edf\u6620\u50cf[\u5bf9\u5e94 export]\n    info      Display system-wide information               # \u663e\u793a\u7cfb\u7edf\u76f8\u5173\u4fe1\u606f\n    inspect   Return low-level information on a container   # \u67e5\u770b\u5bb9\u5668\u8be6\u7ec6\u4fe1\u606f\n    kill      Kill a running container                      # kill \u6307\u5b9a docker \u5bb9\u5668\n    load      Load an image from a tar archive              # \u4ece\u4e00\u4e2a tar \u5305\u4e2d\u52a0\u8f7d\u4e00\u4e2a\u955c\u50cf[\u5bf9\u5e94 save]\n    login     Register or Login to the docker registry server   \n              # \u6ce8\u518c\u6216\u8005\u767b\u9646\u4e00\u4e2a docker \u6e90\u670d\u52a1\u5668\n    logout    Log out from a Docker registry server         # \u4ece\u5f53\u524d Docker registry \u9000\u51fa\n    logs      Fetch the logs of a container                 # \u8f93\u51fa\u5f53\u524d\u5bb9\u5668\u65e5\u5fd7\u4fe1\u606f\n    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT\n              # \u67e5\u770b\u6620\u5c04\u7aef\u53e3\u5bf9\u5e94\u7684\u5bb9\u5668\u5185\u90e8\u6e90\u7aef\u53e3\n    pause     Pause all processes within a container        # \u6682\u505c\u5bb9\u5668\n    ps        List containers                               # \u5217\u51fa\u5bb9\u5668\u5217\u8868\n    pull      Pull an image or a repository from the docker registry server\n              # \u4ecedocker\u955c\u50cf\u6e90\u670d\u52a1\u5668\u62c9\u53d6\u6307\u5b9a\u955c\u50cf\u6216\u8005\u5e93\u955c\u50cf\n    push      Push an image or a repository to the docker registry server\n              # \u63a8\u9001\u6307\u5b9a\u955c\u50cf\u6216\u8005\u5e93\u955c\u50cf\u81f3docker\u6e90\u670d\u52a1\u5668\n    restart   Restart a running container                   # \u91cd\u542f\u8fd0\u884c\u7684\u5bb9\u5668\n    rm        Remove one or more containers                 # \u79fb\u9664\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5bb9\u5668\n    rmi       Remove one or more images                 \n              # \u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u955c\u50cf[\u65e0\u5bb9\u5668\u4f7f\u7528\u8be5\u955c\u50cf\u624d\u53ef\u5220\u9664\uff0c\u5426\u5219\u9700\u5220\u9664\u76f8\u5173\u5bb9\u5668\u624d\u53ef\u7ee7\u7eed\u6216 -f \u5f3a\u5236\u5220\u9664]\n    run       Run a command in a new container\n              # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u5e76\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4\n    save      Save an image to a tar archive                # \u4fdd\u5b58\u4e00\u4e2a\u955c\u50cf\u4e3a\u4e00\u4e2a tar \u5305[\u5bf9\u5e94 load]\n    search    Search for an image on the Docker Hub         # \u5728 docker hub \u4e2d\u641c\u7d22\u955c\u50cf\n    start     Start a stopped containers                    # \u542f\u52a8\u5bb9\u5668\n    stop      Stop a running containers                     # \u505c\u6b62\u5bb9\u5668\n    tag       Tag an image into a repository                # \u7ed9\u6e90\u4e2d\u955c\u50cf\u6253\u6807\u7b7e\n    top       Lookup the running processes of a container   # \u67e5\u770b\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u8fdb\u7a0b\u4fe1\u606f\n    unpause   Unpause a paused container                    # \u53d6\u6d88\u6682\u505c\u5bb9\u5668\n    version   Show the docker version information           # \u67e5\u770b docker \u7248\u672c\u53f7\n    wait      Block until a container stops, then print its exit code   \n              # \u622a\u53d6\u5bb9\u5668\u505c\u6b62\u65f6\u7684\u9000\u51fa\u72b6\u6001\u503c\nRun 'docker COMMAND --help' for more information on a command.\n\n\n\n\n\n\ndocker option\n\n\n\n\nUsage of docker:\n  --api-enable-cors=false                Enable CORS headers in the remote API                      # \u8fdc\u7a0b API \u4e2d\u5f00\u542f CORS \u5934\n  -b, --bridge=\n                        Attach containers to a pre-existing network bridge         # \u6865\u63a5\u7f51\u7edc\n                                           use 'none' to disable container networking\n  --bip=\n                               Use this CIDR notation address for the network bridge's IP, not compatible with -b\n                                         # \u548c -b \u9009\u9879\u4e0d\u517c\u5bb9\uff0c\u5177\u4f53\u6ca1\u6709\u6d4b\u8bd5\u8fc7\n  -d, --daemon=false                     Enable daemon mode                                         # daemon \u6a21\u5f0f\n  -D, --debug=false                      Enable debug mode                                          # debug \u6a21\u5f0f\n  --dns=[]                               Force docker to use specific DNS servers                   # \u5f3a\u5236 docker \u4f7f\u7528\u6307\u5b9a dns \u670d\u52a1\u5668\n  --dns-search=[]                        Force Docker to use specific DNS search domains            # \u5f3a\u5236 docker \u4f7f\u7528\u6307\u5b9a dns \u641c\u7d22\u57df\n  -e, --exec-driver=\nnative\n             Force the docker runtime to use a specific exec driver     # \u5f3a\u5236 docker \u8fd0\u884c\u65f6\u4f7f\u7528\u6307\u5b9a\u6267\u884c\u9a71\u52a8\u5668\n  --fixed-cidr=\n                        IPv4 subnet for fixed IPs (ex: 10.20.0.0/16)\n                                           this subnet must be nested in the bridge subnet (which is defined by -b or --bip)\n  -G, --group=\ndocker\n                   Group to assign the unix socket specified by -H when running in daemon mode\n                                           use '' (the empty string) to disable setting of a group\n  -g, --graph=\n/var/lib/docker\n          Path to use as the root of the docker runtime              # \u5bb9\u5668\u8fd0\u884c\u7684\u6839\u76ee\u5f55\u8def\u5f84\n  -H, --host=[]                          The socket(s) to bind to in daemon mode                    # daemon \u6a21\u5f0f\u4e0b docker \u6307\u5b9a\u7ed1\u5b9a\u65b9\u5f0f[tcp or \u672c\u5730 socket]\n                                           specified using one or more tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd.\n  --icc=true                             Enable inter-container communication                       # \u8de8\u5bb9\u5668\u901a\u4fe1\n  --insecure-registry=[]                 Enable insecure communication with specified registries (no certificate verification for HTTPS and enable HTTP fallback) (e.g., localhost:5000 or 10.20.0.0/16)\n  --ip=\n0.0.0.0\n                         Default IP address to use when binding container ports     # \u6307\u5b9a\u76d1\u542c\u5730\u5740\uff0c\u9ed8\u8ba4\u6240\u6709 ip\n  --ip-forward=true                      Enable net.ipv4.ip_forward                                 # \u5f00\u542f\u8f6c\u53d1\n  --ip-masq=true                         Enable IP masquerading for bridge's IP range\n  --iptables=true                        Enable Docker's addition of iptables rules                 # \u6dfb\u52a0\u5bf9\u5e94 iptables \u89c4\u5219\n  --mtu=0                                Set the containers network MTU                             # \u8bbe\u7f6e\u7f51\u7edc mtu\n                                           if no value is provided: default to the default route MTU or 1500 if no default route is available\n  -p, --pidfile=\n/var/run/docker.pid\n    Path to use for daemon PID file                            # \u6307\u5b9a pid \u6587\u4ef6\u4f4d\u7f6e\n  --registry-mirror=[]                   Specify a preferred Docker registry mirror                  \n  -s, --storage-driver=\n                Force the docker runtime to use a specific storage driver  # \u5f3a\u5236 docker \u8fd0\u884c\u65f6\u4f7f\u7528\u6307\u5b9a\u5b58\u50a8\u9a71\u52a8\n  --selinux-enabled=false                Enable selinux support                                     # \u5f00\u542f selinux \u652f\u6301\n  --storage-opt=[]                       Set storage driver options                                 # \u8bbe\u7f6e\u5b58\u50a8\u9a71\u52a8\u9009\u9879\n  --tls=false                            Use TLS; implied by tls-verify flags                       # \u5f00\u542f tls\n  --tlscacert=\n/root/.docker/ca.pem\n     Trust only remotes providing a certificate signed by the CA given here\n  --tlscert=\n/root/.docker/cert.pem\n     Path to TLS certificate file                               # tls \u8bc1\u4e66\u6587\u4ef6\u4f4d\u7f6e\n  --tlskey=\n/root/.docker/key.pem\n       Path to TLS key file                                       # tls key \u6587\u4ef6\u4f4d\u7f6e\n  --tlsverify=false                      Use TLS and verify the remote (daemon: verify client, client: verify daemon) # \u4f7f\u7528 tls \u5e76\u786e\u8ba4\u8fdc\u7a0b\u63a7\u5236\u4e3b\u673a\n  -v, --version=false                    Print version information and quit   \n\n\n\n\n\n\ndocker search\n\n\n\n\n$ sudo docker search --help\n\nUsage: docker search TERM\n\nSearch the Docker Hub for images     # \u4ece Docker Hub \u641c\u7d22\u955c\u50cf\n\n  --automated=false    Only show automated builds\n  --no-trunc=false     Don't truncate output\n  -s, --stars=0        Only displays with at least xxx stars\n\n\n\n\n\u793a\u4f8b\uff1a\n\n\n$ sudo docker search -s 100 ubuntu      \n# \u67e5\u627e star \u6570\u81f3\u5c11\u4e3a 100 \u7684\u955c\u50cf\uff0c\u627e\u51fa\u53ea\u6709\u5b98\u65b9\u955c\u50cf start \u6570\u8d85\u8fc7 100\uff0c\u9ed8\u8ba4\u4e0d\u52a0 s \u9009\u9879\u627e\u51fa\u6240\u6709\u76f8\u5173 ubuntu \u955c\u50cf\nNAME      DESCRIPTION                  STARS     OFFICIAL   AUTOMATED\nubuntu    Official Ubuntu base image   425       [OK]\n\n\n\n\n\n\ndocker info\n\n\n\n\n$ sudo docker info \nContainers: 1                       # \u5bb9\u5668\u4e2a\u6570\nImages: 22                          # \u955c\u50cf\u4e2a\u6570\nStorage Driver: devicemapper        # \u5b58\u50a8\u9a71\u52a8\n Pool Name: docker-8:17-3221225728-pool\n Pool Blocksize: 65.54 kB\n Data file: /data/docker/devicemapper/devicemapper/data\n Metadata file: /data/docker/devicemapper/devicemapper/metadata\n Data Space Used: 1.83 GB\n Data Space Total: 107.4 GB\n Metadata Space Used: 2.191 MB\n Metadata Space Total: 2.147 GB\n Library Version: 1.02.84-RHEL7 (2014-03-26)\nExecution Driver: native-0.2        # \u5b58\u50a8\u9a71\u52a8\nKernel Version: 3.10.0-123.el7.x86_64\nOperating System: CentOS Linux 7 (Core)\n\n\n\n\n\n\ndocker pull \n docker push\n\n\n\n\n$ sudo docker pull --help           # pull \u62c9\u53d6\u955c\u50cf\n\nUsage: docker pull [OPTIONS] NAME[:TAG]\n\nPull an image or a repository from the registry\n\n  -a, --all-tags=false    Download all tagged images in the repository\n\n$ sudo docker push                  # push \u63a8\u9001\u6307\u5b9a\u955c\u50cf\n\nUsage: docker push NAME[:TAG]\n\nPush an image or a repository to the registry\n\n\n\n\n\u793a\u4f8b\uff1a\n\n\n$ sudo docker pull ubuntu           # \u4e0b\u8f7d\u5b98\u65b9 ubuntu docker \u955c\u50cf\uff0c\u9ed8\u8ba4\u4e0b\u8f7d\u6240\u6709 ubuntu \u5b98\u65b9\u5e93\u955c\u50cf\n$ sudo docker pull ubuntu:14.04     # \u4e0b\u8f7d\u6307\u5b9a\u7248\u672c ubuntu \u5b98\u65b9\u955c\u50cf\n\n\n\n\n$ sudo docker push 192.168.0.100:5000/ubuntu\n# \u63a8\u9001\u955c\u50cf\u5e93\u5230\u79c1\u6709\u6e90[\u53ef\u6ce8\u518c docker \u5b98\u65b9\u8d26\u6237\uff0c\u63a8\u9001\u5230\u5b98\u65b9\u81ea\u6709\u8d26\u6237]\n$ sudo docker push 192.168.0.100:5000/ubuntu:14.04 \n# \u63a8\u9001\u6307\u5b9a\u955c\u50cf\u5230\u79c1\u6709\u6e90\n\n\n\n\n\n\ndocker images\n\n\n\n\n\u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u955c\u50cf\n\n\n$ sudo docker images --help\n\nUsage: docker images [OPTIONS] [NAME]\n\nList images\n\n  -a, --all=false      Show all images (by default filter out the intermediate image layers)\n  # -a \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u7684\u6240\u6709\u955c\u50cf\uff0c\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\uff0c\u9ed8\u8ba4 docker images \u663e\u793a\u6700\u7ec8\u955c\u50cf\uff0c\u4e0d\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n  -f, --filter=[]      Provide filter values (i.e. 'dangling=true')\n  --no-trunc=false     Don't truncate output\n  -q, --quiet=false    Only show numeric IDs\n\n\n\n\n\u793a\u4f8b\uff1a\n\n\n$ sudo docker images            # \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u955c\u50cf\uff0c\u4e0d\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n$ sudo docker images -a         # \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u955c\u50cf\uff0c\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n$ sudo docker images ubuntu     # \u663e\u793a\u5f53\u524d\u7cfb\u7edf docker ubuntu \u5e93\u4e2d\u7684\u6240\u6709\u955c\u50cf\nREPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                     12.04               ebe4be4dd427        4 weeks ago         210.6 MB\nubuntu                     14.04               e54ca5efa2e9        4 weeks ago         276.5 MB\nubuntu                     14.04-ssh           6334d3ac099a        7 weeks ago         383.2 MB\n\n\n\n\n\n\ndocker rmi\n\n\n\n\n\u5220\u9664\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u955c\u50cf\n\n\n$ sudo docker rmi --help\n\nUsage: docker rmi IMAGE [IMAGE...]\n\nRemove one or more images\n\n  -f, --force=false    Force removal of the image       # \u5f3a\u5236\u79fb\u9664\u955c\u50cf\u4e0d\u7ba1\u662f\u5426\u6709\u5bb9\u5668\u4f7f\u7528\u8be5\u955c\u50cf\n  --no-prune=false     Do not delete untagged parents   # \u4e0d\u8981\u5220\u9664\u672a\u6807\u8bb0\u7684\u7236\u955c\u50cf\n\n\n\n\n\n\ndocker run\n\n\n\n\n$ sudo docker run --help\n\nUsage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\n  -a, --attach=[]            Attach to stdin, stdout or stderr.\n  -c, --cpu-shares=0         CPU shares (relative weight)                       # \u8bbe\u7f6e cpu \u4f7f\u7528\u6743\u91cd\n  --cap-add=[]               Add Linux capabilities\n  --cap-drop=[]              Drop Linux capabilities\n  --cidfile=\n               Write the container ID to the file                 # \u628a\u5bb9\u5668 id \u5199\u5165\u5230\u6307\u5b9a\u6587\u4ef6\n  --cpuset=\n                CPUs in which to allow execution (0-3, 0,1)        # cpu \u7ed1\u5b9a\n  -d, --detach=false         Detached mode: Run container in the background, print new container id # \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\n  --device=[]                Add a host device to the container (e.g. --device=/dev/sdc:/dev/xvdc)\n  --dns=[]                   Set custom dns servers                             # \u8bbe\u7f6e dns\n  --dns-search=[]            Set custom dns search domains                      # \u8bbe\u7f6e dns \u57df\u641c\u7d22\n  -e, --env=[]               Set environment variables                          # \u5b9a\u4e49\u73af\u5883\u53d8\u91cf\n  --entrypoint=\n            Overwrite the default entrypoint of the image      # \uff1f\n  --env-file=[]              Read in a line delimited file of ENV variables     # \u4ece\u6307\u5b9a\u6587\u4ef6\u8bfb\u53d6\u53d8\u91cf\u503c\n  --expose=[]                Expose a port from the container without publishing it to your host    # \u6307\u5b9a\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7aef\u53e3\n  -h, --hostname=\n          Container host name                                # \u8bbe\u7f6e\u5bb9\u5668\u4e3b\u673a\u540d\n  -i, --interactive=false    Keep stdin open even if not attached               # \u4fdd\u6301\u6807\u51c6\u8f93\u51fa\u5f00\u542f\u5373\u4f7f\u6ca1\u6709 attached\n  --link=[]                  Add link to another container (name:alias)         # \u6dfb\u52a0\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u5bb9\u5668\n  --lxc-conf=[]              (lxc exec-driver only) Add custom lxc options --lxc-conf=\nlxc.cgroup.cpuset.cpus = 0,1\n\n  -m, --memory=\n            Memory limit (format: \nnumber\noptional unit\n, where unit = b, k, m or g) # \u5185\u5b58\u9650\u5236\n  --name=\n                  Assign a name to the container                     # \u8bbe\u7f6e\u5bb9\u5668\u540d\n  --net=\nbridge\n             Set the Network mode for the container             # \u8bbe\u7f6e\u5bb9\u5668\u7f51\u7edc\u6a21\u5f0f\n                               'bridge': creates a new network stack for the container on the docker bridge\n                               'none': no networking for this container\n                               'container:\nname|id\n': reuses another container network stack\n                               'host': use the host network stack inside the container.  Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure.\n  -P, --publish-all=false    Publish all exposed ports to the host interfaces   # \u81ea\u52a8\u6620\u5c04\u5bb9\u5668\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u7aef\u53e3\n  -p, --publish=[]           Publish a container's port to the host             # \u6307\u5b9a\u7aef\u53e3\u6620\u5c04\n                               format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort\n                               (use 'docker port' to see the actual mapping)\n  --privileged=false         Give extended privileges to this container         # \u63d0\u4f9b\u66f4\u591a\u7684\u6743\u9650\u7ed9\u5bb9\u5668\n  --restart=\n               Restart policy to apply when a container exits (no, on-failure[:max-retry], always)\n  --rm=false                 Automatically remove the container when it exits (incompatible with -d) # \u5982\u679c\u5bb9\u5668\u9000\u51fa\u81ea\u52a8\u79fb\u9664\u548c -d \u9009\u9879\u51b2\u7a81\n  --security-opt=[]          Security Options\n  --sig-proxy=true           Proxify received signals to the process (even in non-tty mode). SIGCHLD is not proxied.\n  -t, --tty=false            Allocate a pseudo-tty                              # \u5206\u914d\u4f2a\u7ec8\u7aef\n  -u, --user=\n              Username or UID                                    # \u6307\u5b9a\u8fd0\u884c\u5bb9\u5668\u7684\u7528\u6237 uid \u6216\u8005\u7528\u6237\u540d\n  -v, --volume=[]            Bind mount a volume (e.g., from the host: -v /host:/container, from docker: -v /container)     \n                             # \u6302\u8f7d\u5377\n  --volumes-from=[]          Mount volumes from the specified container(s)      # \u4ece\u6307\u5b9a\u5bb9\u5668\u6302\u8f7d\u5377\n  -w, --workdir=\n           Working directory inside the container             # \u6307\u5b9a\u5bb9\u5668\u5de5\u4f5c\u76ee\u5f55\n\n\n\n\n\u793a\u4f8b\uff1a\n\n\n$ sudo docker images ubuntu\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu              14.04               e54ca5efa2e9        4 weeks ago         276.5 MB\n... ...\n$ sudo docker run -t -i -c 100 -m 512MB -h test1 -d --name=\ndocker_test1\n ubuntu /bin/bash \n# \u521b\u5efa\u4e00\u4e2a cpu \u4f18\u5148\u7ea7\u4e3a 100\uff0c\u5185\u5b58\u9650\u5236 512MB\uff0c\u4e3b\u673a\u540d\u4e3a test1\uff0c\u540d\u4e3a docker_test1 \u540e\u53f0\u8fd0\u884c bash \u7684\u5bb9\u5668\na424ca613c9f2247cd3ede95adfbaf8d28400cbcb1d5f9b69a7b56f97b2b52e5\n$ sudo docker ps \nCONTAINER ID        IMAGE           COMMAND         CREATED             STATUS              PORTS       NAMES\na424ca613c9f        ubuntu:14.04    /bin/bash       6 seconds ago       Up 5 seconds                    docker_test1\n$ sudo docker attach docker_test1\nroot@test1:/# pwd\n/\nroot@test1:/# exit\nexit\n\n\n\n\n\n\ndocker start|stop|kill... ...\n\n\n\n\ndocker start|stop|kill|restart|pause|unpause|rm|commit|inspect|logs\n\n\ndocker start CONTAINER [CONTAINER...]\n# \u8fd0\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u505c\u6b62\u7684\u5bb9\u5668\ndocker stop CONTAINER [CONTAINER...]\n# \u505c\u6389\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd0\u884c\u7684\u5bb9\u5668 -t \u9009\u9879\u53ef\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\ndocker kill [OPTIONS] CONTAINER [CONTAINER...]\n# \u9ed8\u8ba4 kill \u53d1\u9001 SIGKILL \u4fe1\u53f7 -s \u53ef\u4ee5\u6307\u5b9a\u53d1\u9001 kill \u4fe1\u53f7\u7c7b\u578b\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n# \u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd0\u884c\u7684\u5bb9\u5668 -t \u9009\u9879\u53ef\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\ndocker pause CONTAINER\n# \u6682\u505c\u4e00\u4e2a\u5bb9\u5668\uff0c\u65b9\u4fbf commit\ndocker unpause CONTAINER\n# \u7ee7\u7eed\u6682\u505c\u7684\u5bb9\u5668\ndocker rm [OPTIONS] CONTAINER [CONTAINER...]\n# \u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\n-f, --force=false Force removal of running container\n-l, --link=false Remove the specified link and not the underlying container\n-v, --volumes=false Remove the volumes associated with the container\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n# \u63d0\u4ea4\u6307\u5b9a\u5bb9\u5668\u4e3a\u955c\u50cf\n-a, --author=\n Author (e.g., \nJohn Hannibal Smith hannibal@a-team.com\n)\n-m, --message=\n Commit message\n-p, --pause=true Pause container during commit\n# \u9ed8\u8ba4 commit \u662f\u6682\u505c\u72b6\u6001\ndocker inspect CONTAINER|IMAGE [CONTAINER|IMAGE...]\n# \u67e5\u770b\u5bb9\u5668\u6216\u8005\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f\ndocker logs CONTAINER\n# \u8f93\u51fa\u6307\u5b9a\u5bb9\u5668\u65e5\u5fd7\u4fe1\u606f\n-f, --follow=false Follow log output\n# \u7c7b\u4f3c tail -f\n-t, --timestamps=false Show timestamps\n--tail=\nall\n Output the specified number of lines at the end of logs (defaults to all logs)\n\n\n\n\n\n\n\n\n Docker 1.3 \u65b0\u589e\u7279\u6027\u548c\u547d\u4ee4 \n\n\n\n\n\n\nDigital Signature Verification\n\n\n\n\n\n\nDocker 1.3 \u7248\u672c\u5c06\u4f7f\u7528\u6570\u5b57\u7b7e\u540d\u81ea\u52a8\u9a8c\u8bc1\u6240\u6709\u5b98\u65b9\u5e93\u7684\u6765\u6e90\u548c\u5b8c\u6574\u6027\uff0c\u5982\u679c\u4e00\u4e2a\u5b98\u65b9\u955c\u50cf\u88ab\u7be1\u6539\u6216\u8005\u88ab\u7834\u574f\uff0c\u76ee\u524d Docker \u53ea\u4f1a\u5bf9\u8fd9\u79cd\u60c5\u51b5\u53d1\u51fa\u8b66\u544a\u800c\u5e76\u4e0d\u963b\u6b62\u5bb9\u5668\u7684\u8fd0\u884c\u3002\n\n\n\n\nInject new processes with docker exec\n\n\n\n\ndocker exec --help\n\nUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\nRun a command in an existing container\n\n  -d, --detach=false         Detached mode: run command in the background\n  -i, --interactive=false    Keep STDIN open even if not attached\n  -t, --tty=false            Allocate a pseudo-TTY\n\n\n\n\n\u4e3a\u4e86\u7b80\u5316\u8c03\u8bd5\uff0c\u53ef\u4ee5\u4f7f\u7528 docker exec \u547d\u4ee4\u901a\u8fc7 Docker API \u548c CLI \u5728\u8fd0\u884c\u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u7a0b\u5e8f\u3002\n\n\n$ docker exec -it ubuntu_bash bash\n\n\n\n\n\u4e0a\u4f8b\u5c06\u5728\u5bb9\u5668 ubuntu_bash \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Bash \u4f1a\u8bdd\u3002\n\n\n\n\nTune container lifecycles with docker create\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 docker run \n \u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5e76\u8fd0\u884c\u5176\u4e2d\u7684\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u7528\u6237\u8981\u6c42\u521b\u5efa\u5bb9\u5668\u7684\u65f6\u5019\u4e0d\u542f\u52a8\u5bb9\u5668\uff0c\u6240\u4ee5 docker create \u5e94\u8fd0\u800c\u751f\u4e86\u3002\n\n\n$ docker create -t -i fedora bash\n6d8af538ec541dd581ebc2a24153a28329acb5268abe5ef868c1f1a261221752\n\n\n\n\n\u4e0a\u4f8b\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u5199\u7684\u5bb9\u5668\u5c42 (\u5e76\u4e14\u6253\u5370\u51fa\u5bb9\u5668 ID)\uff0c\u4f46\u662f\u5e76\u4e0d\u8fd0\u884c\u5b83\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u8be5\u5bb9\u5668\uff1a\n\n\n$ docker start -a -i 6d8af538ec5\nbash-4.2#\n\n\n\n\n\n\nSecurity Options\n\n\n\n\n\u901a\u8fc7 --security-opt \u9009\u9879\uff0c\u8fd0\u884c\u5bb9\u5668\u65f6\u7528\u6237\u53ef\u81ea\u5b9a\u4e49 SELinux \u548c AppArmor \u5377\u6807\u548c\u914d\u7f6e\u3002\n\n\n$ docker run --security-opt label:type:svirt_apache -i -t centos \\ bash\n\n\n\n\n\u4e0a\u4f8b\u53ea\u5141\u8bb8\u5bb9\u5668\u76d1\u542c\u5728 Apache \u7aef\u53e3\uff0c\u8fd9\u4e2a\u9009\u9879\u7684\u597d\u5904\u662f\u7528\u6237\u4e0d\u9700\u8981\u8fd0\u884c docker \u7684\u65f6\u5019\u6307\u5b9a --privileged \u9009\u9879\uff0c\u964d\u4f4e\u5b89\u5168\u98ce\u9669\u3002\n\n\n\n\nDocker 1.5 \u65b0\u7279\u6027\n\n\n\n\n\u53c2\u8003\u6587\u6863\uff1ahttp://dockerone.com/article/202\n\n\nDocker \u7aef\u53e3\u6620\u5c04\n\n\n# Find IP address of container with ID \ncontainer_id\n \u901a\u8fc7\u5bb9\u5668 id \u83b7\u53d6 ip\n$ sudo docker inspect \ncontainer_id\n | grep IPAddress | cut -d \u2019\n\u2019 -f 4\n\n\n\n\n\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u4e9b ip \u662f\u57fa\u4e8e\u672c\u5730\u7cfb\u7edf\u7684\u5e76\u4e14\u5bb9\u5668\u7684\u7aef\u53e3\u975e\u672c\u5730\u4e3b\u673a\u662f\u8bbf\u95ee\u4e0d\u5230\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u7aef\u53e3\u53ea\u80fd\u672c\u5730\u8bbf\u95ee\u5916\uff0c\u5bf9\u4e8e\u5bb9\u5668\u7684\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\u8fd9\u4e9b ip \u5728\u5bb9\u5668\u6bcf\u6b21\u542f\u52a8\u7684\u65f6\u5019\u90fd\u4f1a\u6539\u53d8\u3002\n\n\nDocker \u89e3\u51b3\u4e86\u5bb9\u5668\u7684\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u7ed9\u5bb9\u5668\u5185\u90e8\u670d\u52a1\u7684\u8bbf\u95ee\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u53ef\u9760\u7684\u65b9\u6cd5\u3002Docker \u901a\u8fc7\u7aef\u53e3\u7ed1\u5b9a\u4e3b\u673a\u7cfb\u7edf\u7684\u63a5\u53e3\uff0c\u5141\u8bb8\u975e\u672c\u5730\u5ba2\u6237\u7aef\u8bbf\u95ee\u5bb9\u5668\u5185\u90e8\u8fd0\u884c\u7684\u670d\u52a1\u3002\u4e3a\u4e86\u7b80\u4fbf\u7684\u4f7f\u5f97\u5bb9\u5668\u95f4\u901a\u4fe1\uff0cDocker \u63d0\u4f9b\u4e86\u8fd9\u79cd\u8fde\u63a5\u673a\u5236\u3002\n\n\n\n\n\u81ea\u52a8\u6620\u5c04\u7aef\u53e3\n\n\n\n\n-P \u4f7f\u7528\u65f6\u9700\u8981\u6307\u5b9a --expose \u9009\u9879\uff0c\u6307\u5b9a\u9700\u8981\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u7aef\u53e3\n\n\n$ sudo docker run -t -P --expose 22 --name server  ubuntu:14.04\n\n\n\n\n\u4f7f\u7528 docker run -P \u81ea\u52a8\u7ed1\u5b9a\u6240\u6709\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u5bb9\u5668\u7aef\u53e3\uff0c\u6620\u5c04\u7684\u7aef\u53e3\u5c06\u4f1a\u4ece\u6ca1\u6709\u4f7f\u7528\u7684\u7aef\u53e3\u6c60\u4e2d (49000..49900) \u81ea\u52a8\u9009\u62e9\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 docker ps \u3001docker inspect \n \u6216\u8005 docker port \n \n \u786e\u5b9a\u5177\u4f53\u7684\u7ed1\u5b9a\u4fe1\u606f\u3002\n\n\n\n\n\u7ed1\u5b9a\u7aef\u53e3\u5230\u6307\u5b9a\u63a5\u53e3\n\n\n\n\n\u57fa\u672c\u8bed\u6cd5\n\n\n$ sudo docker run -p [([\nhost_interface\n:[host_port]])|(\nhost_port\n):]\ncontainer_port\n[/udp] \nimage\n \ncmd\n\n\n\n\n\n\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7ed1\u5b9a ip \u5219\u76d1\u542c\u6240\u6709\u7f51\u7edc\u63a5\u53e3\u3002\n\n\n\n\n\u7ed1\u5b9a TCP \u7aef\u53e3\n\n\n\n\n# Bind TCP port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1:80:8080 \nimage\n \ncmd\n\n# Bind TCP port 8080 of the container to a dynamically allocated TCP port on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1::8080 \nimage\n \ncmd\n\n# Bind TCP port 8080 of the container to TCP port 80 on all available interfaces of the host machine.\n$ sudo docker run -p 80:8080 \nimage\n \ncmd\n\n# Bind TCP port 8080 of the container to a dynamically allocated TCP port on all available interfaces\n$ sudo docker run -p 8080 \nimage\n \ncmd\n\n\n\n\n\n\n\n\u7ed1\u5b9a UDP \u7aef\u53e3\n\n\n\n\n# Bind UDP port 5353 of the container to UDP port 53 on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1:53:5353/udp \nimage\n \ncmd\n\n\n\n\n\nDocker \u7f51\u7edc\u914d\u7f6e\n\n\n\n\nDokcer \u901a\u8fc7\u4f7f\u7528 Linux \u6865\u63a5\u63d0\u4f9b\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff0cdocker0 \u6865\u63a5\u63a5\u53e3\u7684\u76ee\u7684\u5c31\u662f\u65b9\u4fbf Docker \u7ba1\u7406\u3002\u5f53 Docker daemon \u542f\u52a8\u65f6\u9700\u8981\u505a\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\ncreates the docker0 bridge if not present\n# \u5982\u679c docker0 \u4e0d\u5b58\u5728\u5219\u521b\u5efa\nsearches for an IP address range which doesn\u2019t overlap with an existing route\n# \u641c\u7d22\u4e00\u4e2a\u4e0e\u5f53\u524d\u8def\u7531\u4e0d\u51b2\u7a81\u7684 ip \u6bb5\npicks an IP in the selected range\n# \u5728\u786e\u5b9a\u7684\u8303\u56f4\u4e2d\u9009\u62e9 ip\nassigns this IP to the docker0 bridge\n# \u7ed1\u5b9a ip \u5230 docker0\n\n\n\n\n\n\nDocker \u56db\u79cd\u7f51\u7edc\u6a21\u5f0f\n\n\n\n\n\u56db\u79cd\u7f51\u7edc\u6a21\u5f0f\u6458\u81ea:http://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice\n\ndocker run \u521b\u5efa Docker \u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u7528 --net \u9009\u9879\u6307\u5b9a\u5bb9\u5668\u7684\u7f51\u7edc\u6a21\u5f0f\uff0cDocker \u6709\u4ee5\u4e0b 4 \u79cd\u7f51\u7edc\u6a21\u5f0f\uff1a\n\nhost \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=host \u6307\u5b9a\u3002\ncontainer \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=container:NAME_or_ID \u6307\u5b9a\u3002\nnone \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=none \u6307\u5b9a\u3002\nbridge \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=bridge \u6307\u5b9a\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u3002\n\n\n\n\n\n\nhost \u6a21\u5f0f\n\n\n\n\n\u5982\u679c\u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u4f7f\u7528 host \u6a21\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bb9\u5668\u5c06\u4e0d\u4f1a\u83b7\u5f97\u4e00\u4e2a\u72ec\u7acb\u7684 Network Namespace\uff0c\u800c\u662f\u548c\u5bbf\u4e3b\u673a\u5171\u7528\u4e00\u4e2a Network Namespace\u3002\u5bb9\u5668\u5c06\u4e0d\u4f1a\u865a\u62df\u51fa\u81ea\u5df1\u7684\u7f51\u5361\uff0c\u914d\u7f6e\u81ea\u5df1\u7684 IP \u7b49\uff0c\u800c\u662f\u4f7f\u7528\u5bbf\u4e3b\u673a\u7684 IP \u548c\u7aef\u53e3\u3002\n\n\n\u4f8b\u5982\uff0c\u6211\u4eec\u5728 10.10.101.105/24 \u7684\u673a\u5668\u4e0a\u7528 host \u6a21\u5f0f\u542f\u52a8\u4e00\u4e2a\u542b\u6709 web \u5e94\u7528\u7684 Docker \u5bb9\u5668\uff0c\u76d1\u542c tcp 80 \u7aef\u53e3\u3002\u5f53\u6211\u4eec\u5728\u5bb9\u5668\u4e2d\u6267\u884c\u4efb\u4f55\u7c7b\u4f3c ifconfig \u547d\u4ee4\u67e5\u770b\u7f51\u7edc\u73af\u5883\u65f6\uff0c\u770b\u5230\u7684\u90fd\u662f\u5bbf\u4e3b\u673a\u4e0a\u7684\u4fe1\u606f\u3002\u800c\u5916\u754c\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\uff0c\u5219\u76f4\u63a5\u4f7f\u7528 10.10.101.105:80 \u5373\u53ef\uff0c\u4e0d\u7528\u4efb\u4f55 NAT \u8f6c\u6362\uff0c\u5c31\u5982\u76f4\u63a5\u8dd1\u5728\u5bbf\u4e3b\u673a\u4e2d\u4e00\u6837\u3002\u4f46\u662f\uff0c\u5bb9\u5668\u7684\u5176\u4ed6\u65b9\u9762\uff0c\u5982\u6587\u4ef6\u7cfb\u7edf\u3001\u8fdb\u7a0b\u5217\u8868\u7b49\u8fd8\u662f\u548c\u5bbf\u4e3b\u673a\u9694\u79bb\u7684\u3002\n\n\n\n\ncontainer \u6a21\u5f0f\n\n\n\n\n\u8fd9\u4e2a\u6a21\u5f0f\u6307\u5b9a\u65b0\u521b\u5efa\u7684\u5bb9\u5668\u548c\u5df2\u7ecf\u5b58\u5728\u7684\u4e00\u4e2a\u5bb9\u5668\u5171\u4eab\u4e00\u4e2a Network Namespace\uff0c\u800c\u4e0d\u662f\u548c\u5bbf\u4e3b\u673a\u5171\u4eab\u3002\u65b0\u521b\u5efa\u7684\u5bb9\u5668\u4e0d\u4f1a\u521b\u5efa\u81ea\u5df1\u7684\u7f51\u5361\uff0c\u914d\u7f6e\u81ea\u5df1\u7684 IP\uff0c\u800c\u662f\u548c\u4e00\u4e2a\u6307\u5b9a\u7684\u5bb9\u5668\u5171\u4eab IP\u3001\u7aef\u53e3\u8303\u56f4\u7b49\u3002\u540c\u6837\uff0c\u4e24\u4e2a\u5bb9\u5668\u9664\u4e86\u7f51\u7edc\u65b9\u9762\uff0c\u5176\u4ed6\u7684\u5982\u6587\u4ef6\u7cfb\u7edf\u3001\u8fdb\u7a0b\u5217\u8868\u7b49\u8fd8\u662f\u9694\u79bb\u7684\u3002\u4e24\u4e2a\u5bb9\u5668\u7684\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 lo \u7f51\u5361\u8bbe\u5907\u901a\u4fe1\u3002\n\n\n\n\nnone\u6a21\u5f0f\n\n\n\n\n\u8fd9\u4e2a\u6a21\u5f0f\u548c\u524d\u4e24\u4e2a\u4e0d\u540c\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cDocker \u5bb9\u5668\u62e5\u6709\u81ea\u5df1\u7684 Network Namespace\uff0c\u4f46\u662f\uff0c\u5e76\u4e0d\u4e3a Docker\u5bb9\u5668\u8fdb\u884c\u4efb\u4f55\u7f51\u7edc\u914d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a Docker \u5bb9\u5668\u6ca1\u6709\u7f51\u5361\u3001IP\u3001\u8def\u7531\u7b49\u4fe1\u606f\u3002\u9700\u8981\u6211\u4eec\u81ea\u5df1\u4e3a Docker \u5bb9\u5668\u6dfb\u52a0\u7f51\u5361\u3001\u914d\u7f6e IP \u7b49\u3002\n\n\n\n\nbridge\u6a21\u5f0f\n\n\n\n\n\nbridge \u6a21\u5f0f\u662f Docker \u9ed8\u8ba4\u7684\u7f51\u7edc\u8bbe\u7f6e\uff0c\u6b64\u6a21\u5f0f\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5bb9\u5668\u5206\u914d Network Namespace\u3001\u8bbe\u7f6e IP \u7b49\uff0c\u5e76\u5c06\u4e00\u4e2a\u4e3b\u673a\u4e0a\u7684 Docker \u5bb9\u5668\u8fde\u63a5\u5230\u4e00\u4e2a\u865a\u62df\u7f51\u6865\u4e0a\u3002\u5f53 Docker server \u542f\u52a8\u65f6\uff0c\u4f1a\u5728\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a docker0 \u7684\u865a\u62df\u7f51\u6865\uff0c\u6b64\u4e3b\u673a\u4e0a\u542f\u52a8\u7684 Docker \u5bb9\u5668\u4f1a\u8fde\u63a5\u5230\u8fd9\u4e2a\u865a\u62df\u7f51\u6865\u4e0a\u3002\u865a\u62df\u7f51\u6865\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u7269\u7406\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u8fd9\u6837\u4e3b\u673a\u4e0a\u7684\u6240\u6709\u5bb9\u5668\u5c31\u901a\u8fc7\u4ea4\u6362\u673a\u8fde\u5728\u4e86\u4e00\u4e2a\u4e8c\u5c42\u7f51\u7edc\u4e2d\u3002\u63a5\u4e0b\u6765\u5c31\u8981\u4e3a\u5bb9\u5668\u5206\u914d IP \u4e86\uff0cDocker \u4f1a\u4ece RFC1918 \u6240\u5b9a\u4e49\u7684\u79c1\u6709 IP \u7f51\u6bb5\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u548c\u5bbf\u4e3b\u673a\u4e0d\u540c\u7684IP\u5730\u5740\u548c\u5b50\u7f51\u5206\u914d\u7ed9 docker0\uff0c\u8fde\u63a5\u5230 docker0 \u7684\u5bb9\u5668\u5c31\u4ece\u8fd9\u4e2a\u5b50\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u672a\u5360\u7528\u7684 IP \u4f7f\u7528\u3002\u5982\u4e00\u822c Docker \u4f1a\u4f7f\u7528 172.17.0.0/16 \u8fd9\u4e2a\u7f51\u6bb5\uff0c\u5e76\u5c06 172.17.42.1/16 \u5206\u914d\u7ed9 docker0 \u7f51\u6865\uff08\u5728\u4e3b\u673a\u4e0a\u4f7f\u7528 ifconfig \u547d\u4ee4\u662f\u53ef\u4ee5\u770b\u5230 docker0 \u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u7f51\u6865\u7684\u7ba1\u7406\u63a5\u53e3\uff0c\u5728\u5bbf\u4e3b\u673a\u4e0a\u4f5c\u4e3a\u4e00\u5757\u865a\u62df\u7f51\u5361\u4f7f\u7528\uff09\n\n\n\n\n\u5217\u51fa\u5f53\u524d\u4e3b\u673a\u7f51\u6865\n\n\n\n\n$ sudo brctl show  # brctl \u5de5\u5177\u4f9d\u8d56 bridge-utils \u8f6f\u4ef6\u5305\nbridge name bridge id STP enabled interfaces\ndocker0 8000.000000000000 no\n\n\n\n\n\n\n\u67e5\u770b\u5f53\u524d docker0 ip\n\n\n\n\n$ sudo ifconfig docker0\ndocker0 Link encap:Ethernet HWaddr xx:xx:xx:xx:xx:xx\ninet addr:172.17.42.1 Bcast:0.0.0.0 Mask:255.255.0.0\n\n\n\n\n\u5728\u5bb9\u5668\u8fd0\u884c\u65f6\uff0c\u6bcf\u4e2a\u5bb9\u5668\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u7279\u5b9a\u7684\u865a\u62df\u673a\u53e3\u5e76\u6865\u63a5\u5230 docker0\u3002\u6bcf\u4e2a\u5bb9\u5668\u90fd\u4f1a\u914d\u7f6e\u540c docker0 ip \u76f8\u540c\u7f51\u6bb5\u7684\u4e13\u7528 ip \u5730\u5740\uff0cdocker0 \u7684 IP \u5730\u5740\u88ab\u7528\u4e8e\u6240\u6709\u5bb9\u5668\u7684\u9ed8\u8ba4\u7f51\u5173\u3002\n\n\n\n\n\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\n\n\n\n\n$ sudo docker run -t -i -d ubuntu /bin/bash\n52f811c5d3d69edddefc75aff5a4525fc8ba8bcfa1818132f9dc7d4f7c7e78b4\n$ sudo brctl show\nbridge name bridge id STP enabled interfaces\ndocker0 8000.fef213db5a66 no vethQCDY1N\n\n\n\n\n\u4ee5\u4e0a, docker0 \u626e\u6f14\u7740 52f811c5d3d6 container \u8fd9\u4e2a\u5bb9\u5668\u7684\u865a\u62df\u63a5\u53e3 vethQCDY1N interface \u6865\u63a5\u7684\u89d2\u8272\u3002\n\n\n\u4f7f\u7528\u7279\u5b9a\u8303\u56f4\u7684 IP\n \n\n\nDocker \u4f1a\u5c1d\u8bd5\u5bfb\u627e\u6ca1\u6709\u88ab\u4e3b\u673a\u4f7f\u7528\u7684 ip \u6bb5\uff0c\u5c3d\u7ba1\u5b83\u9002\u7528\u4e8e\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f46\u662f\u5b83\u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u6709\u65f6\u5019\u6211\u4eec\u8fd8\u662f\u9700\u8981\u5bf9 ip \u8fdb\u4e00\u6b65\u89c4\u5212\u3002Docker \u5141\u8bb8\u4f60\u7ba1\u7406 docker0 \u6865\u63a5\u6216\u8005\u901a\u8fc7 -b \u9009\u9879\u81ea\u5b9a\u4e49\u6865\u63a5\u7f51\u5361\uff0c\u9700\u8981\u5b89\u88c5 bridge-utils \u8f6f\u4ef6\u5305\u3002\n\n\n\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\nensure Docker is stopped\n# \u786e\u4fdd docker \u7684\u8fdb\u7a0b\u662f\u505c\u6b62\u7684\ncreate your own bridge (bridge0 for example)\n# \u521b\u5efa\u81ea\u5b9a\u4e49\u7f51\u6865\nassign a specific IP to this bridge\n# \u7ed9\u7f51\u6865\u5206\u914d\u7279\u5b9a\u7684 ip\nstart Docker with the -b=bridge0 parameter\n# \u4ee5 -b \u7684\u65b9\u5f0f\u6307\u5b9a\u7f51\u6865\n\n\n\n\n# Stopping Docker and removing docker0\n\n$ sudo service docker stop\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n\n# Create our own bridge\n\n$ sudo brctl addbr bridge0\n$ sudo ip addr add 192.168.5.1/24 dev bridge0\n$ sudo ip link set dev bridge0 up\n\n# Confirming that our bridge is up and running\n\n$ ip addr show bridge0\n4: bridge0: \nBROADCAST,MULTICAST\n mtu 1500 qdisc noop state UP group default\n    link/ether 66:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.5.1/24 scope global bridge0\n       valid_lft forever preferred_lft forever\n\n# Tell Docker about it and restart (on Ubuntu)\n\n$ echo 'DOCKER_OPTS=\n-b=bridge0\n' \n /etc/default/docker\n$ sudo service docker start\n\n\n\n\n\u53c2\u8003\u6587\u6863\uff1ahttps://docs.docker.com/articles/networking/\n\n\n\n\n\u4e0d\u540c\u4e3b\u673a\u95f4\u5bb9\u5668\u901a\u4fe1\n\n\n\n\n\u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u501f\u52a9\u4e8e pipework \u8fd9\u4e2a\u5de5\u5177\uff1a\n\n\n$ git clone https://github.com/jpetazzo/pipework.git\n$ sudo cp -rp pipework/pipework /usr/local/bin/\n\n\n\n\n\u5b89\u88c5\u76f8\u5e94\u4f9d\u8d56\u8f6f\u4ef6\n\n\n$ sudo apt-get install iputils-arping bridge-utils -y\n\n\n\n\n\u6865\u63a5\u7f51\u7edc\n\n\n\u6865\u63a5\u7f51\u7edc\u53ef\u4ee5\u53c2\u8003 https://github.com/opskumu/Day/blob/master/tips/tips.md \u5173\u4e8e\u6865\u63a5\u7684\u914d\u7f6e\u8bf4\u660e\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\n# brctl show\nbridge name     bridge id               STP enabled     interfaces\nbr0             8000.000c291412cd       no              eth0\ndocker0         8000.56847afe9799       no              vetheb48029\n\n\n\n\n\u53ef\u4ee5\u5220\u9664 docker0\uff0c\u76f4\u63a5\u628a docker \u7684\u6865\u63a5\u6307\u5b9a\u4e3a br0\u3002\u4e5f\u53ef\u4ee5\u4fdd\u7559\u4f7f\u7528\u9ed8\u8ba4\u7684\u914d\u7f6e\uff0c\u8fd9\u6837\u5355\u4e3b\u673a\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u901a\u8fc7 docker0\uff0c\u800c\u8de8\u4e3b\u673a\u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u901a\u8fc7 pipework \u65b0\u5efa docker \u5bb9\u5668\u7684\u7f51\u5361\u6865\u63a5\u5230 br0\uff0c\u8fd9\u6837\u8de8\u4e3b\u673a\u5bb9\u5668\u4e4b\u95f4\u5c31\u53ef\u4ee5\u901a\u4fe1\u4e86\u3002\n\n\n\n\n\n\nubuntu\n\n\n\n\n\n\n$ sudo service docker stop\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n$ echo 'DOCKER_OPTS=\n-b=br0\n' \n /etc/default/docker\n$ sudo service docker start\n\n\n\n\n\n\n\n\nCentOS 7/RHEL 7\n\n\n\n\n\n\n$ sudo systemctl stop docker\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n$ cat /etc/sysconfig/docker | grep 'OPTIONS='\nOPTIONS=--selinux-enabled -b=br0 -H fd://\n$ sudo systemctl start docker\n\n\n\n\n\n\npipework\n\n\n\n\n\n\u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u501f\u52a9\u4e8e pipework \u8fd9\u4e2a\u5de5\u5177\u7ed9 docker \u5bb9\u5668\u65b0\u5efa\u865a\u62df\u7f51\u5361\u5e76\u7ed1\u5b9a IP \u6865\u63a5\u5230 br0\n\n\n$ git clone https://github.com/jpetazzo/pipework.git\n$ sudo cp -rp pipework/pipework /usr/local/bin/\n$ pipework \nSyntax:\npipework \nhostinterface\n [-i containerinterface] \nguest\n \nipaddr\n/\nsubnet\n[@default_gateway] [macaddr][@vlan]\npipework \nhostinterface\n [-i containerinterface] \nguest\n dhcp [macaddr][@vlan]\npipework --wait [-i containerinterface]\n\n\n\n\n\u5982\u679c\u5220\u9664\u4e86\u9ed8\u8ba4\u7684 docker0 \u6865\u63a5\uff0c\u628a docker \u9ed8\u8ba4\u6865\u63a5\u6307\u5b9a\u5230\u4e86 br0\uff0c\u5219\u6700\u597d\u5728\u521b\u5efa\u5bb9\u5668\u7684\u65f6\u5019\u52a0\u4e0a --net=none\uff0c\u9632\u6b62\u81ea\u52a8\u5206\u914d\u7684 IP \u5728\u5c40\u57df\u7f51\u4e2d\u6709\u51b2\u7a81\u3002\n\n\n$ sudo docker run --rm -ti --net=none ubuntu:14.04 /bin/bash\nroot@a46657528059:/#\n$                  # Ctrl-P + Ctrl-Q \u56de\u5230\u5bbf\u4e3b\u673a shell\uff0c\u5bb9\u5668 detach \u72b6\u6001\n$ sudo docker  ps\nCONTAINER ID    IMAGE          COMMAND       CREATED         STATUS          PORTS      NAMES\na46657528059    ubuntu:14.04   \n/bin/bash\n   4 minutes ago   Up 4 minutes               hungry_lalande\n$ sudo pipework br0 -i eth0 a46657528059 192.168.115.10/24@192.168.115.2 \n# \u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7f51\u5361\u8bbe\u5907\u540d\uff0c\u5219\u9ed8\u8ba4\u6dfb\u52a0\u4e3a eth1\n# \u53e6\u5916 pipework \u4e0d\u80fd\u6dfb\u52a0\u9759\u6001\u8def\u7531\uff0c\u5982\u679c\u6709\u9700\u6c42\u5219\u53ef\u4ee5\u5728 run \u7684\u65f6\u5019\u52a0\u4e0a --privileged=true \u6743\u9650\u5728\u5bb9\u5668\u4e2d\u624b\u52a8\u6dfb\u52a0\uff0c\n# \u4f46\u8fd9\u79cd\u5b89\u5168\u6027\u6709\u7f3a\u9677\uff0c\u53ef\u4ee5\u901a\u8fc7 ip netns \u64cd\u4f5c\n$ sudo docker attach a46657528059\nroot@a46657528059:/# ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 86:b6:6b:e8:2e:4d  \n          inet addr:192.168.115.10  Bcast:0.0.0.0  Mask:255.255.255.0\n          inet6 addr: fe80::84b6:6bff:fee8:2e4d/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:648 (648.0 B)  TX bytes:690 (690.0 B)\n\nroot@a46657528059:/# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.115.2   0.0.0.0         UG    0      0        0 eth0\n192.168.115.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0\n\n\n\n\n\u4f7f\u7528 ip netns \u6dfb\u52a0\u9759\u6001\u8def\u7531\uff0c\u907f\u514d\u521b\u5efa\u5bb9\u5668\u4f7f\u7528 --privileged=true \u9009\u9879\u9020\u6210\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5b89\u5168\u95ee\u9898\uff1a\n\n\n$ docker inspect --format=\n{{ .State.Pid }}\n a46657528059 # \u83b7\u53d6\u6307\u5b9a\u5bb9\u5668 pid\n6350\n$ sudo ln -s /proc/6350/ns/net /var/run/netns/6350\n$ sudo ip netns exec 6350 ip route add 192.168.0.0/16 dev eth0 via 192.168.115.2\n$ sudo ip netns exec 6350 ip route    # \u6dfb\u52a0\u6210\u529f\n192.168.0.0/16 via 192.168.115.2 dev eth0 \n... ...\n\n\n\n\n\u5728\u5176\u5b83\u5bbf\u4e3b\u673a\u8fdb\u884c\u76f8\u5e94\u7684\u914d\u7f6e\uff0c\u65b0\u5efa\u5bb9\u5668\u5e76\u4f7f\u7528 pipework \u6dfb\u52a0\u865a\u62df\u7f51\u5361\u6865\u63a5\u5230 br0\uff0c\u6d4b\u8bd5\u901a\u4fe1\u60c5\u51b5\u5373\u53ef\u3002\n\n\n\u53e6\u5916\uff0cpipework \u53ef\u4ee5\u521b\u5efa\u5bb9\u5668\u7684 vlan \u7f51\u7edc\uff0c\u8fd9\u91cc\u4e0d\u4f5c\u8fc7\u591a\u7684\u4ecb\u7ecd\u4e86\uff0c\u5b98\u65b9\u6587\u6863\u5df2\u7ecf\u5199\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u53ef\u4ee5\u67e5\u770b\u4ee5\u4e0b\u4e24\u7bc7\u6587\u7ae0\uff1a\n\n\n\n\npipwork\u5b98\u65b9\u6587\u6863\uff1ahttps://github.com/jpetazzo/pipework\n\n\nDocker \u7f51\u7edc\u8be6\u89e3\u53ca pipework \u6e90\u7801\u89e3\u8bfb\u4e0e\u5b9e\u8df5\uff1ahttp://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice\n\n\n\n\nDockerfile\n\n\nDocker \u53ef\u4ee5\u901a\u8fc7 Dockerfile \u7684\u5185\u5bb9\u6765\u81ea\u52a8\u6784\u5efa\u955c\u50cf\u3002Dockerfile \u662f\u4e00\u4e2a\u5305\u542b\u521b\u5efa\u955c\u50cf\u6240\u6709\u547d\u4ee4\u7684\u6587\u672c\u6587\u4ef6\uff0c\u901a\u8fc7 docker build \u547d\u4ee4\u53ef\u4ee5\u6839\u636e Dockerfile \u7684\u5185\u5bb9\u6784\u5efa\u955c\u50cf\uff0c\u5728\u4ecb\u7ecd\u5982\u4f55\u6784\u5efa\u4e4b\u524d\u5148\u4ecb\u7ecd\u4e0b Dockerfile \u7684\u57fa\u672c\u8bed\u6cd5\u7ed3\u6784\u3002\n\n\nDockerfile \u6709\u4ee5\u4e0b\u6307\u4ee4\u9009\u9879:\n\n\n\n\nFROM\n\n\nMAINTAINER\n\n\nRUN\n\n\nCMD\n\n\nEXPOSE\n\n\nENV\n\n\nADD\n\n\nCOPY\n\n\nENTRYPOINT\n\n\nVOLUME\n\n\nUSER\n\n\nWORKDIR\n\n\n\n\nONBUILD\n\n\nFROM\n\n\n\u7528\u6cd5:\n\n\nFROM \nimage\n\n\n\n\nFROM \u6307\u5b9a\u6784\u5efa\u955c\u50cf\u7684\u57fa\u7840\u6e90\u955c\u50cf\uff0c\u5982\u679c\u672c\u5730\u6ca1\u6709\u6307\u5b9a\u7684\u955c\u50cf\uff0c\u5219\u4f1a\u81ea\u52a8\u4ece Docker \u7684\u516c\u5171\u5e93 pull \u955c\u50cf\u4e0b\u6765\u3002\n\n\nFROM \u5fc5\u987b\u662f Dockerfile \u4e2d\u975e\u6ce8\u91ca\u884c\u7684\u7b2c\u4e00\u4e2a\u6307\u4ee4\uff0c\u5373\u4e00\u4e2a Dockerfile \u4ece FROM \u8bed\u53e5\u5f00\u59cb\u3002\n\n\nFROM \u53ef\u4ee5\u5728\u4e00\u4e2a Dockerfile \u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u5982\u679c\u6709\u9700\u6c42\u5728\u4e00\u4e2a Dockerfile \u4e2d\u521b\u5efa\u591a\u4e2a\u955c\u50cf\u3002\n\n\n\u5982\u679c FROM \u8bed\u53e5\u6ca1\u6709\u6307\u5b9a\u955c\u50cf\u6807\u7b7e\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 latest \u6807\u7b7e\u3002\n\n\n\n\nMAINTAINER\n\n\n\u7528\u6cd5:\n\n\nMAINTAINER \nname\n\n\n\u6307\u5b9a\u521b\u5efa\u955c\u50cf\u7684\u7528\u6237\n\n\nRUN\n\n\nRUN \u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\n\n\n\n\nRUN (the command is run in a shell - /bin/sh -c - shell form)\n\n\nRUN [\"executable\", \"param1\", \"param2\"] (exec form)\n\n\n\n\n\u6bcf\u6761 RUN \u6307\u4ee4\u5c06\u5728\u5f53\u524d\u955c\u50cf\u57fa\u7840\u4e0a\u6267\u884c\u6307\u5b9a\u547d\u4ee4\uff0c\u5e76\u63d0\u4ea4\u4e3a\u65b0\u7684\u955c\u50cf\uff0c\u540e\u7eed\u7684 RUN \u90fd\u5728\u4e4b\u524d RUN \u63d0\u4ea4\u540e\u7684\u955c\u50cf\u4e3a\u57fa\u7840\uff0c\u955c\u50cf\u662f\u5206\u5c42\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u955c\u50cf\u7684\u4efb\u4f55\u4e00\u4e2a\u5386\u53f2\u63d0\u4ea4\u70b9\u6765\u521b\u5efa\uff0c\u7c7b\u4f3c\u6e90\u7801\u7684\u7248\u672c\u63a7\u5236\u3002\n\n\nexec \u65b9\u5f0f\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u6570\u7ec4\uff0c\u6240\u4ee5\u5fc5\u987b\u4f7f\u7528\u53cc\u5f15\u53f7\u800c\u4e0d\u662f\u5355\u5f15\u53f7\u3002exec \u65b9\u5f0f\u4e0d\u4f1a\u8c03\u7528\u4e00\u4e2a\u547d\u4ee4 shell\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u4f1a\u7ee7\u627f\u76f8\u5e94\u7684\u53d8\u91cf\uff0c\u5982\uff1a\n\n\nRUN [ \"echo\", \"$HOME\" ]\n\n\n\u8fd9\u79cd\u65b9\u5f0f\u662f\u4e0d\u4f1a\u8fbe\u5230\u8f93\u51fa HOME \u53d8\u91cf\u7684\uff0c\u6b63\u786e\u7684\u65b9\u5f0f\u5e94\u8be5\u662f\u8fd9\u6837\u7684\n\n\nRUN [ \"sh\", \"-c\", \"echo\", \"$HOME\" ]\n\n\nRUN \u4ea7\u751f\u7684\u7f13\u5b58\u5728\u4e0b\u4e00\u6b21\u6784\u5efa\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u5931\u6548\u7684\uff0c\u4f1a\u88ab\u91cd\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 --no-cache \u9009\u9879\uff0c\u5373 docker build --no-cache\uff0c\u5982\u6b64\u4fbf\u4e0d\u4f1a\u7f13\u5b58\u3002\n\n\nCMD\n\n\nCMD \u6709\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f:\n\n\n\n\nCMD [\"executable\",\"param1\",\"param2\"] (exec form, this is the preferred form, \u4f18\u5148\u9009\u62e9)\n\n\nCMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT)\n\n\nCMD command param1 param2 (shell form)\n\n\n\n\nCMD \u6307\u5b9a\u5728 Dockerfile \u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4f1a\u751f\u6548\u3002\n\n\nCMD \u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u542f\u52a8\u5bb9\u5668\u65f6\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u547d\u4ee4\u6267\u884c\u9009\u9879\u3002\u5982\u679c\u7528\u6237\u542f\u52a8\u5bb9\u5668\u65f6\u6307\u5b9a\u4e86\u8fd0\u884c\u7684\u547d\u4ee4\uff0c\u5219\u4f1a\u8986\u76d6\u6389 CMD \u6307\u5b9a\u7684\u547d\u4ee4\u3002\n\n\nCMD \u4f1a\u5728\u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u6267\u884c\uff0cbuild \u65f6\u4e0d\u6267\u884c\uff0c\u800c RUN \u53ea\u662f\u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u6267\u884c\uff0c\u540e\u7eed\u955c\u50cf\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u542f\u52a8\u5bb9\u5668\u5c31\u4e0e RUN \u65e0\u5173\u4e86\uff0c\u8fd9\u4e2a\u521d\u5b66\u8005\u5bb9\u6613\u5f04\u6df7\u8fd9\u4e2a\u6982\u5ff5\uff0c\u8fd9\u91cc\u7b80\u5355\u6ce8\u89e3\u4e00\u4e0b\u3002\n\n\nEXPOSE\n\n\nEXPOSE \nport\n [\nport\n...]\n\n\n\u544a\u8bc9 Docker \u670d\u52a1\u7aef\u5bb9\u5668\u5bf9\u5916\u6620\u5c04\u7684\u672c\u5730\u7aef\u53e3\uff0c\u9700\u8981\u5728 docker run \u7684\u65f6\u5019\u4f7f\u7528 -p \u6216\u8005 -P \u9009\u9879\u751f\u6548\u3002\n\n\nENV\n\n\nENV \nkey\n \nvalue\n       # \u53ea\u80fd\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\nENV \nkey\n=\nvalue\n ...   # \u5141\u8bb8\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u53d8\u91cf\n\n\n\u6307\u5b9a\u4e00\u4e2a\u73af\u8282\u53d8\u91cf\uff0c\u4f1a\u88ab\u540e\u7eed RUN \u6307\u4ee4\u4f7f\u7528\uff0c\u5e76\u5728\u5bb9\u5668\u8fd0\u884c\u65f6\u4fdd\u7559\u3002\n\n\n\u4f8b\u5b50:\n\n\nENV myName=\"John Doe\" myDog=Rex\\ The\\ Dog \\\nmyCat=fluffy\n\n\n\u7b49\u540c\u4e8e\n\n\nENV myName John Doe\nENV myDog Rex The Dog\nENV myCat fluffy\n\n\nADD\n\n\nADD \nsrc\n... \ndest\n\n\nADD \u590d\u5236\u672c\u5730\u4e3b\u673a\u6587\u4ef6\u3001\u76ee\u5f55\u6216\u8005\u8fdc\u7a0b\u6587\u4ef6 URLS \u4ece \u5e76\u4e14\u6dfb\u52a0\u5230\u5bb9\u5668\u6307\u5b9a\u8def\u5f84\u4e2d \u3002\n\u652f\u6301\u901a\u8fc7 GO \u7684\u6b63\u5219\u6a21\u7cca\u5339\u914d\uff0c\u5177\u4f53\u89c4\u5219\u53ef\u53c2\u89c1 Go filepath.Match\uff08http://golang.org/pkg/path/filepath/#Match\uff09\n\n\nADD hom* /mydir/        # adds all files starting with \"hom\"\nADD hom?.txt /mydir/    # ? is replaced with any single character\n\n\n\n\n\u8def\u5f84\u5fc5\u987b\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u5bf9\u5e94\u76ee\u5f55\n\n\n\u8def\u5f84\u5fc5\u987b\u662f Dockerfile \u6240\u5728\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84\n\n\n\u5982\u679c\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u53ea\u4f1a\u590d\u5236\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\uff0c\u800c\u76ee\u5f55\u672c\u8eab\u5219\u4e0d\u4f1a\u88ab\u590d\u5236\n\n\n\n\nCOPY\n\n\nCOPY \nsrc\n... \ndest\n\n\nCOPY \u590d\u5236\u65b0\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u4ece \u5e76\u4e14\u6dfb\u52a0\u5230\u5bb9\u5668\u6307\u5b9a\u8def\u5f84\u4e2d \u3002\u7528\u6cd5\u540c ADD\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u662f\u4e0d\u80fd\u6307\u5b9a\u8fdc\u7a0b\u6587\u4ef6 URLS\u3002\n\n\nENTRYPOINT\n\n\n\n\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] (the preferred exec form\uff0c\u4f18\u5148\u9009\u62e9)\n\n\nENTRYPOINT command param1 param2 (shell form)\n\n\n\n\n\u914d\u7f6e\u5bb9\u5668\u542f\u52a8\u540e\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5e76\u4e14\u4e0d\u53ef\u88ab docker run \u63d0\u4f9b\u7684\u53c2\u6570\u8986\u76d6\uff0c\u800c CMD \u662f\u53ef\u4ee5\u88ab\u8986\u76d6\u7684\u3002\u5982\u679c\u9700\u8981\u8986\u76d6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 docker run --entrypoint \u9009\u9879\u3002\n\n\n\u6bcf\u4e2a Dockerfile \u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a ENTRYPOINT\uff0c\u5f53\u6307\u5b9a\u591a\u4e2a\u65f6\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u751f\u6548\u3002\n\n\nExec form ENTRYPOINT \u4f8b\u5b50\uff1a\n\n\n\u901a\u8fc7 ENTRYPOINT \u4f7f\u7528 exec form \u65b9\u5f0f\u8bbe\u7f6e\u7a33\u5b9a\u7684\u9ed8\u8ba4\u547d\u4ee4\u548c\u9009\u9879\uff0c\u800c\u4f7f\u7528 CMD \u6dfb\u52a0\u9ed8\u8ba4\u4e4b\u5916\u7ecf\u5e38\u88ab\u6539\u52a8\u7684\u9009\u9879\u3002\n\n\nFROM ubuntu\nENTRYPOINT [\"top\", \"-b\"]\nCMD [\"-c\"]\n\n\n\u901a\u8fc7 Dockerfile \u4f7f\u7528 ENTRYPOINT \u5c55\u793a\u524d\u53f0\u8fd0\u884c Apache \u670d\u52a1\n\n\nFROM debian:stable\nRUN apt-get update \n apt-get install -y --force-yes apache2\nEXPOSE 80 443\nVOLUME [\"/var/www\", \"/var/log/apache2\", \"/etc/apache2\"]\nENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]\n\n\nShell form ENTRYPOINT \u4f8b\u5b50:\n\n\n\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5728 /bin/sh -c \u4e2d\u6267\u884c\uff0c\u4f1a\u5ffd\u7565\u4efb\u4f55 CMD \u6216\u8005 docker run \u547d\u4ee4\u884c\u9009\u9879\uff0c\u4e3a\u4e86\u786e\u4fdd docker stop \u80fd\u591f\u505c\u6b62\u957f\u65f6\u95f4\u8fd0\u884c ENTRYPOINT \u7684\u5bb9\u5668\uff0c\u786e\u4fdd\u6267\u884c\u7684\u65f6\u5019\u4f7f\u7528 exec \u9009\u9879\u3002\n\n\nFROM ubuntu\nENTRYPOINT exec top -b\n\n\n\u5982\u679c\u5728 ENTRYPOINT \u5fd8\u8bb0\u4f7f\u7528 exec \u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 CMD \u8865\u4e0a:\n\n\nFROM ubuntu\nENTRYPOINT top -b\nCMD --ignored-param1 # --ignored-param2 ... --ignored-param3 ... \u4f9d\u6b64\u7c7b\u63a8\n\n\nVOLUME\n\n\nVOLUME [\"/data\"]\n\n\n\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u4ece\u672c\u5730\u4e3b\u673a\u6216\u5176\u4ed6\u5bb9\u5668\u6302\u8f7d\u7684\u6302\u8f7d\u70b9\uff0c\u540e\u7eed\u5177\u4f53\u4ecb\u7ecd\u3002\n\n\nUSER\n\n\nUSER daemon\n\n\n\u6307\u5b9a\u8fd0\u884c\u5bb9\u5668\u65f6\u7684\u7528\u6237\u540d\u6216 UID\uff0c\u540e\u7eed\u7684 RUN\u3001CMD\u3001ENTRYPOINT \u4e5f\u4f1a\u4f7f\u7528\u6307\u5b9a\u7528\u6237\u3002\n\n\nWORKDIR\n\n\nWORKDIR /path/to/workdir\n\n\n\u4e3a\u540e\u7eed\u7684 RUN\u3001CMD\u3001ENTRYPOINT \u6307\u4ee4\u914d\u7f6e\u5de5\u4f5c\u76ee\u5f55\u3002\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a WORKDIR \u6307\u4ee4\uff0c\u540e\u7eed\u547d\u4ee4\u5982\u679c\u53c2\u6570\u662f\u76f8\u5bf9\u8def\u5f84\uff0c\u5219\u4f1a\u57fa\u4e8e\u4e4b\u524d\u547d\u4ee4\u6307\u5b9a\u7684\u8def\u5f84\u3002\n\n\nWORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN pwd\n\n\n\u6700\u7ec8\u8def\u5f84\u662f /a/b/c\u3002\n\n\nWORKDIR \u6307\u4ee4\u53ef\u4ee5\u5728 ENV \u8bbe\u7f6e\u53d8\u91cf\u4e4b\u540e\u8c03\u7528\u73af\u5883\u53d8\u91cf:\n\n\nENV DIRPATH /path\nWORKDIR $DIRPATH/$DIRNAME\n\n\n\u6700\u7ec8\u8def\u5f84\u5219\u4e3a /path/$DIRNAME\u3002\n\n\nONBUILD\n\n\nONBUILD [INSTRUCTION]\n\n\n\u914d\u7f6e\u5f53\u6240\u521b\u5efa\u7684\u955c\u50cf\u4f5c\u4e3a\u5176\u5b83\u65b0\u521b\u5efa\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u65f6\uff0c\u6240\u6267\u884c\u7684\u64cd\u4f5c\u6307\u4ee4\u3002\n\n\n\u4f8b\u5982\uff0cDockerfile \u4f7f\u7528\u5982\u4e0b\u7684\u5185\u5bb9\u521b\u5efa\u4e86\u955c\u50cf image-A\uff1a\n\n\n[...]\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n[...]\n\n\n\u5982\u679c\u57fa\u4e8e image-A \u521b\u5efa\u65b0\u7684\u955c\u50cf\u65f6\uff0c\u65b0\u7684 Dockerfile \u4e2d\u4f7f\u7528 FROM image-A \u6307\u5b9a\u57fa\u7840\u955c\u50cf\u65f6\uff0c\u4f1a\u81ea\u52a8\u6267\u884c ONBUILD \u6307\u4ee4\u5185\u5bb9\uff0c\u7b49\u4ef7\u4e8e\u5728\u540e\u9762\u6dfb\u52a0\u4e86\u4e24\u6761\u6307\u4ee4\u3002\n\n\nADD . /app/src\nRUN /usr/local/bin/python-build --dir /app/src`\n\n\n\u4f7f\u7528 ONBUILD \u6307\u4ee4\u7684\u955c\u50cf\uff0c\u63a8\u8350\u5728\u6807\u7b7e\u4e2d\u6ce8\u660e\uff0c\u4f8b\u5982 ruby:1.9-onbuild\u3002\n\n\nDockerfile Examples\n\n\n\n\n\n\n# Nginx\n#\n# VERSION               0.0.1\n\nFROM      ubuntu\nMAINTAINER Victor Vieux \nvictor@docker.com\n\n\nRUN apt-get update \n apt-get install -y inotify-tools nginx apache2 openssh-server\n\n# Firefox over VNC\n#\n# VERSION               0.3\n\nFROM ubuntu\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\nRUN apt-get update \n apt-get install -y x11vnc xvfb firefox\nRUN mkdir ~/.vnc\n# Setup a password\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n# Autostart firefox (might not be the best way, but it does the trick)\nRUN bash -c 'echo \nfirefox\n \n /.bashrc'\n\nEXPOSE 5900\nCMD    [\nx11vnc\n, \n-forever\n, \n-usepw\n, \n-create\n]\n\n# Multiple images example\n#\n# VERSION               0.1\n\nFROM ubuntu\nRUN echo foo \n bar\n# Will output something like ===\n 907ad6c2736f\n\nFROM ubuntu\nRUN echo moo \n oink\n# Will output something like ===\n 695d7793cbe4\n\n# You\u1fbfll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with\n# /oink.\n\n\n\n\ndocker build\n\n$ docker build --help\n\nUsage: docker build [OPTIONS] PATH | URL | -\n\nBuild a new image from the source code at PATH\n\n  --force-rm=false     Always remove intermediate containers, even after unsuccessful builds # \u79fb\u9664\u8fc7\u6e21\u5bb9\u5668\uff0c\u5373\u4f7f\u6784\u5efa\u5931\u8d25\n  --no-cache=false     Do not use cache when building the image                              # \u4e0d\u5b9e\u7528 cache        \n  -q, --quiet=false    Suppress the verbose output generated by the containers               \n  --rm=true            Remove intermediate containers after a successful build               # \u6784\u5efa\u6210\u529f\u540e\u79fb\u9664\u8fc7\u6e21\u5c42\u5bb9\u5668\n  -t, --tag=\n         Repository name (and optionally a tag) to be applied to the resulting image in case of success\n\n  \u53c2\u8003\u6587\u6863:https://docs.docker.com/reference/builder/\n\n\n\n\nDockerfile \u6307\u4ee4\nFROM: \u53ea\u8981\u53ef\u80fd\u5c31\u4f7f\u7528\u5b98\u65b9\u955c\u50cf\u5e93\u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\nRUN: \u4e3a\u4fdd\u6301\u53ef\u8bfb\u6027\u3001\u65b9\u4fbf\u7406\u89e3\u3001\u53ef\u7ef4\u62a4\u6027\uff0c\u628a\u957f\u6216\u8005\u590d\u6742\u7684 RUN \u8bed\u53e5\u4f7f\u7528 \\ \u5206\u9694\u7b26\u5206\u6210\u591a\u884c\n\u4e0d\u5efa\u8bae RUN apt-get update \u72ec\u7acb\u6210\u884c\uff0c\u5426\u5219\u5982\u679c\u540e\u7eed\u5305\u6709\u66f4\u65b0\uff0c\u90a3\u4e48\u4e5f\u4e0d\u4f1a\u518d\u6267\u884c\u66f4\u65b0\n\u907f\u514d\u4f7f\u7528 RUN apt-get upgrade \u6216\u8005 dist-upgrade\uff0c\u5f88\u591a\u5fc5\u8981\u7684\u5305\u5728\u4e00\u4e2a\u975e privileged \u6743\u9650\u7684\u5bb9\u5668\u91cc\u662f\u65e0\u6cd5\u5347\u7ea7\u7684\u3002\u5982\u679c\u77e5\u9053\u67d0\u4e2a\u5305\u66f4\u65b0\uff0c\u4f7f\u7528 apt-get install -y xxx\n\u6807\u51c6\u5199\u6cd5\nRUN apt-get update \n apt-get install -y package-bar package-foo\n\n\u4f8b\u5b50\uff1a\nRUN apt-get update \n apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    btrfs-tools \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    git \\\n    iptables \\\n    libapparmor-dev \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    lxc=1.0* \\\n    mercurial \\\n    parallel \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.0*\n\n    CMD: \u63a8\u8350\u4f7f\u7528 CMD [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d\u2026] \u8fd9\u79cd\u683c\u5f0f\uff0cCMD [\u201cparam\u201d, \u201cparam\u201d] \u5219\u914d\u5408 ENTRYPOINT \u4f7f\u7528\n    EXPOSE: Dockerfile \u6307\u5b9a\u8981\u516c\u5f00\u7684\u7aef\u53e3\uff0c\u4f7f\u7528 docker run \u65f6\u6307\u5b9a\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684\u7aef\u53e3\u5373\u53ef\n    ENV: \u4e3a\u4e86\u4f7f\u65b0\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u8fd0\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 ENV \u66f4\u65b0 PATH \u53d8\u91cf\u3002\u5982 ENV PATH /usr/local/nginx/bin:$PATH \u786e\u4fdd CMD [\nnginx\n] \u5373\u53ef\u8fd0\u884c\n\n    ENV \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u53d8\u91cf\uff1a\n\n    ENV PG_MAJOR 9.3\n    ENV PG_VERSION 9.3.4\n| tar -xJC /usr/src/postgress \n \u2026 |\n    ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n\n    ADD or COPY: ADD \u6bd4 COPY \u591a\u4e00\u4e9b\u7279\u6027\u300ctar \u6587\u4ef6\u81ea\u52a8\u89e3\u5305\u548c\u652f\u6301\u8fdc\u7a0b URL\u300d\uff0c\u4e0d\u63a8\u8350\u6dfb\u52a0\u8fdc\u7a0b URL\n\n    \u5982\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f:\n    ADD http://example.com/big.tar.xz /usr/src/things/\n    RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things\n    RUN make -C /usr/src/things all\n\n    \u63a8\u8350\u4f7f\u7528 curl \u6216\u8005 wget \u66ff\u6362\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f:\n    UN mkdir -p /usr/src/things \\\n    \n curl -SL http://example.com/big.tar.gz \\\n    | tar -xJC /usr/src/things \\\n    \n make -C /usr/src/things all\n\n    \u5982\u679c\u4e0d\u9700\u8981\u6dfb\u52a0 tar \u6587\u4ef6\uff0c\u63a8\u8350\u4f7f\u7528 COPY\u3002\n\n\n\n\n\u955c\u50cf\u52a0\u901f\n\n\nhttps://dashboard.daocloud.io", 
            "title": "docker\u57fa\u7840"
        }, 
        {
            "location": "/docker/#docker", 
            "text": "Docker \u4e24\u4e2a\u4e3b\u8981\u90e8\u4ef6\uff1a  Docker: \u5f00\u6e90\u7684\u5bb9\u5668\u865a\u62df\u5316\u5e73\u53f0\nDocker Hub: \u7528\u4e8e\u5206\u4eab\u3001\u7ba1\u7406 Docker \u5bb9\u5668\u7684 Docker SaaS \u5e73\u53f0 -- Docker Hub\nDocker \u4f7f\u7528\u5ba2\u6237\u7aef-\u670d\u52a1\u5668 (C/S) \u67b6\u6784\u6a21\u5f0f\u3002Docker \u5ba2\u6237\u7aef\u4f1a\u4e0e Docker \u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u901a\u4fe1\u3002Docker \u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5904\u7406\u590d\u6742\u7e41\u91cd\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5efa\u7acb\u3001\u8fd0\u884c\u3001\u53d1\u5e03\u4f60\u7684 Docker \u5bb9\u5668\u3002Docker \u5ba2\u6237\u7aef\u548c\u5b88\u62a4\u8fdb\u7a0b\u53ef\u4ee5\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u4e0a\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Docker \u5ba2\u6237\u7aef\u53bb\u8fde\u63a5\u4e00\u4e2a\u8fdc\u7a0b\u7684 Docker \u5b88\u62a4\u8fdb\u7a0b\u3002Docker \u5ba2\u6237\u7aef\u548c\u5b88\u62a4\u8fdb\u7a0b\u4e4b\u95f4\u901a\u8fc7 socket \u6216\u8005 RESTful API \u8fdb\u884c\u901a\u4fe1\u3002    Docker \u5b88\u62a4\u8fdb\u7a0b    \u5982\u4e0a\u56fe\u6240\u793a\uff0cDocker \u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\u5728\u4e00\u53f0\u4e3b\u673a\u4e0a\u3002\u7528\u6237\u5e76\u4e0d\u76f4\u63a5\u548c\u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u662f\u901a\u8fc7 Docker \u5ba2\u6237\u7aef\u95f4\u63a5\u548c\u5176\u901a\u4fe1\u3002    Docker \u5ba2\u6237\u7aef      Docker \u5ba2\u6237\u7aef\uff0c\u5b9e\u9645\u4e0a\u662f docker \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u662f\u4e3b\u8981\u7684\u7528\u6237\u4e0e Docker \u4ea4\u4e92\u65b9\u5f0f\u3002\u5b83\u63a5\u6536\u7528\u6237\u6307\u4ee4\u5e76\u4e14\u4e0e\u80cc\u540e\u7684 Docker \u5b88\u62a4\u8fdb\u7a0b\u901a\u4fe1\uff0c\u5982\u6b64\u6765\u56de\u5f80\u590d\u3002    Docker \u5185\u90e8      \u8981\u7406\u89e3 Docker \u5185\u90e8\u6784\u5efa\uff0c\u9700\u8981\u7406\u89e3\u4ee5\u4e0b\u4e09\u79cd\u90e8\u4ef6\uff1a  Docker \u955c\u50cf - Docker images\nDocker \u4ed3\u5e93 - Docker registeries\nDocker \u5bb9\u5668 - Docker containers   Docker \u955c\u50cf   Docker \u955c\u50cf\u662f Docker \u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u53ea\u8bfb\u6a21\u677f\uff0c\u6bcf\u4e00\u4e2a\u955c\u50cf\u7531\u4e00\u7cfb\u5217\u7684\u5c42 (layers) \u7ec4\u6210\u3002Docker \u4f7f\u7528 UnionFS \u6765\u5c06\u8fd9\u4e9b\u5c42\u8054\u5408\u5230\u5355\u72ec\u7684\u955c\u50cf\u4e2d\u3002UnionFS \u5141\u8bb8\u72ec\u7acb\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939(\u79f0\u4e4b\u4e3a\u5206\u652f)\u88ab\u900f\u660e\u8986\u76d6\uff0c\u5f62\u6210\u4e00\u4e2a\u5355\u72ec\u8fde\u8d2f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u6b63\u56e0\u4e3a\u6709\u4e86\u8fd9\u4e9b\u5c42\u7684\u5b58\u5728\uff0cDocker \u662f\u5982\u6b64\u7684\u8f7b\u91cf\u3002\u5f53\u4f60\u6539\u53d8\u4e86\u4e00\u4e2a Docker \u955c\u50cf\uff0c\u6bd4\u5982\u5347\u7ea7\u5230\u67d0\u4e2a\u7a0b\u5e8f\u5230\u65b0\u7684\u7248\u672c\uff0c\u4e00\u4e2a\u65b0\u7684\u5c42\u4f1a\u88ab\u521b\u5efa\u3002\u56e0\u6b64\uff0c\u4e0d\u7528\u66ff\u6362\u6574\u4e2a\u539f\u5148\u7684\u955c\u50cf\u6216\u8005\u91cd\u65b0\u5efa\u7acb(\u5728\u4f7f\u7528\u865a\u62df\u673a\u7684\u65f6\u5019\u4f60\u53ef\u80fd\u4f1a\u8fd9\u4e48\u505a)\uff0c\u53ea\u662f\u4e00\u4e2a\u65b0\u7684\u5c42\u88ab\u6dfb\u52a0\u6216\u5347\u7ea7\u4e86\u3002\u73b0\u5728\u4f60\u4e0d\u7528\u91cd\u65b0\u53d1\u5e03\u6574\u4e2a\u955c\u50cf\uff0c\u53ea\u9700\u8981\u5347\u7ea7\uff0c\u5c42\u4f7f\u5f97\u5206\u53d1 Docker \u955c\u50cf\u53d8\u5f97\u7b80\u5355\u548c\u5feb\u901f\u3002   Docker \u4ed3\u5e93   Docker \u4ed3\u5e93\u7528\u6765\u4fdd\u5b58\u955c\u50cf\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ee3\u7801\u63a7\u5236\u4e2d\u7684\u4ee3\u7801\u4ed3\u5e93\u3002\u540c\u6837\u7684\uff0cDocker \u4ed3\u5e93\u4e5f\u6709\u516c\u6709\u548c\u79c1\u6709\u7684\u6982\u5ff5\u3002\u516c\u6709\u7684 Docker \u4ed3\u5e93\u540d\u5b57\u662f Docker Hub\u3002Docker Hub \u63d0\u4f9b\u4e86\u5e9e\u5927\u7684\u955c\u50cf\u96c6\u5408\u4f9b\u4f7f\u7528\u3002\u8fd9\u4e9b\u955c\u50cf\u53ef\u4ee5\u662f\u81ea\u5df1\u521b\u5efa\uff0c\u6216\u8005\u5728\u522b\u4eba\u7684\u955c\u50cf\u57fa\u7840\u4e0a\u521b\u5efa\u3002Docker \u4ed3\u5e93\u662f Docker \u7684\u5206\u53d1\u90e8\u5206\u3002   Docker \u5bb9\u5668   Docker \u5bb9\u5668\u548c\u6587\u4ef6\u5939\u5f88\u7c7b\u4f3c\uff0c\u4e00\u4e2aDocker\u5bb9\u5668\u5305\u542b\u4e86\u6240\u6709\u7684\u67d0\u4e2a\u5e94\u7528\u8fd0\u884c\u6240\u9700\u8981\u7684\u73af\u5883\u3002\u6bcf\u4e00\u4e2a Docker \u5bb9\u5668\u90fd\u662f\u4ece Docker \u955c\u50cf\u521b\u5efa\u7684\u3002Docker \u5bb9\u5668\u53ef\u4ee5\u8fd0\u884c\u3001\u5f00\u59cb\u3001\u505c\u6b62\u3001\u79fb\u52a8\u548c\u5220\u9664\u3002\u6bcf\u4e00\u4e2a Docker \u5bb9\u5668\u90fd\u662f\u72ec\u7acb\u548c\u5b89\u5168\u7684\u5e94\u7528\u5e73\u53f0\uff0cDocker \u5bb9\u5668\u662f Docker \u7684\u8fd0\u884c\u90e8\u5206\u3002   libcontainer   Docker \u4ece 0.9 \u7248\u672c\u5f00\u59cb\u4f7f\u7528 libcontainer \u66ff\u4ee3 lxc\uff0clibcontainer \u548c Linux \u7cfb\u7edf\u7684\u4ea4\u4e92\u56fe\u5982\u4e0b\uff1a      \u547d\u540d\u7a7a\u95f4\u300cNamespaces\u300d     pid namespace    \u4e0d\u540c\u7528\u6237\u7684\u8fdb\u7a0b\u5c31\u662f\u901a\u8fc7 pid namespace \u9694\u79bb\u5f00\u7684\uff0c\u4e14\u4e0d\u540c namespace \u4e2d\u53ef\u4ee5\u6709\u76f8\u540c PID\u3002\u5177\u6709\u4ee5\u4e0b\u7279\u5f81:  \u6bcf\u4e2a namespace \u4e2d\u7684 pid \u662f\u6709\u81ea\u5df1\u7684 pid=1 \u7684\u8fdb\u7a0b(\u7c7b\u4f3c /sbin/init \u8fdb\u7a0b)\n\u6bcf\u4e2a namespace \u4e2d\u7684\u8fdb\u7a0b\u53ea\u80fd\u5f71\u54cd\u81ea\u5df1\u7684\u540c\u4e00\u4e2a namespace \u6216\u5b50 namespace \u4e2d\u7684\u8fdb\u7a0b\n\u56e0\u4e3a /proc \u5305\u542b\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u56e0\u6b64\u5728 container \u4e2d\u7684 pseudo-filesystem \u7684 /proc \u76ee\u5f55\u53ea\u80fd\u770b\u5230\u81ea\u5df1 namespace \u4e2d\u7684\u8fdb\u7a0b\n\u56e0\u4e3a namespace \u5141\u8bb8\u5d4c\u5957\uff0c\u7236 namespace \u53ef\u4ee5\u5f71\u54cd\u5b50 namespace \u7684\u8fdb\u7a0b\uff0c\u6240\u4ee5\u5b50 namespace \u7684\u8fdb\u7a0b\u53ef\u4ee5\u5728\u7236 namespace \u4e2d\u770b\u5230\uff0c\u4f46\u662f\u5177\u6709\u4e0d\u540c\u7684 pid   mnt namespace   \u7c7b\u4f3c chroot\uff0c\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u653e\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u76ee\u5f55\u6267\u884c\u3002mnt namespace \u5141\u8bb8\u4e0d\u540c namespace \u7684\u8fdb\u7a0b\u770b\u5230\u7684\u6587\u4ef6\u7ed3\u6784\u4e0d\u540c\uff0c\u8fd9\u6837\u6bcf\u4e2a namespace \u4e2d\u7684\u8fdb\u7a0b\u6240\u770b\u5230\u7684\u6587\u4ef6\u76ee\u5f55\u5c31\u88ab\u9694\u79bb\u5f00\u4e86\u3002\u540c chroot \u4e0d\u540c\uff0c\u6bcf\u4e2a namespace \u4e2d\u7684 container \u5728 /proc/mounts \u7684\u4fe1\u606f\u53ea\u5305\u542b\u6240\u5728 namespace \u7684 mount point\u3002   net namespace   \u7f51\u7edc\u9694\u79bb\u662f\u901a\u8fc7 net namespace \u5b9e\u73b0\u7684\uff0c \u6bcf\u4e2a net namespace \u6709\u72ec\u7acb\u7684 network devices, IP addresses, IP routing tables, /proc/net \u76ee\u5f55\u3002\u8fd9\u6837\u6bcf\u4e2a container \u7684\u7f51\u7edc\u5c31\u80fd\u9694\u79bb\u5f00\u6765\u3002 docker \u9ed8\u8ba4\u91c7\u7528 veth \u7684\u65b9\u5f0f\u5c06 container \u4e2d\u7684\u865a\u62df\u7f51\u5361\u540c host \u4e0a\u7684\u4e00\u4e2a docker bridge \u8fde\u63a5\u5728\u4e00\u8d77\u3002   uts namespace   UTS (\"UNIX Time-sharing System\") namespace \u5141\u8bb8\u6bcf\u4e2a container \u62e5\u6709\u72ec\u7acb\u7684 hostname \u548c domain name, \u4f7f\u5176\u5728\u7f51\u7edc\u4e0a\u53ef\u4ee5\u88ab\u89c6\u4f5c\u4e00\u4e2a\u72ec\u7acb\u7684\u8282\u70b9\u800c\u975e Host \u4e0a\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002   ipc namespace   container \u4e2d\u8fdb\u7a0b\u4ea4\u4e92\u8fd8\u662f\u91c7\u7528 Linux \u5e38\u89c1\u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u65b9\u6cd5 (interprocess communication - IPC), \u5305\u62ec\u5e38\u89c1\u7684\u4fe1\u53f7\u91cf\u3001\u6d88\u606f\u961f\u5217\u548c\u5171\u4eab\u5185\u5b58\u3002\u7136\u800c\u540c VM \u4e0d\u540c\uff0ccontainer \u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u5b9e\u9645\u4e0a\u8fd8\u662f host \u4e0a\u5177\u6709\u76f8\u540c pid namespace \u4e2d\u7684\u8fdb\u7a0b\u95f4\u4ea4\u4e92\uff0c\u56e0\u6b64\u9700\u8981\u5728IPC\u8d44\u6e90\u7533\u8bf7\u65f6\u52a0\u5165 namespace \u4fe1\u606f - \u6bcf\u4e2a IPC \u8d44\u6e90\u6709\u4e00\u4e2a\u552f\u4e00\u7684 32bit ID\u3002   user namespace   \u6bcf\u4e2a container \u53ef\u4ee5\u6709\u4e0d\u540c\u7684 user \u548c group id, \u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4ee5 container \u5185\u90e8\u7684\u7528\u6237\u5728 container \u5185\u90e8\u6267\u884c\u7a0b\u5e8f\u800c\u975e Host \u4e0a\u7684\u7528\u6237\u3002  \u6709\u4e86\u4ee5\u4e0a 6 \u79cd namespace \u4ece\u8fdb\u7a0b\u3001\u7f51\u7edc\u3001IPC\u3001\u6587\u4ef6\u7cfb\u7edf\u3001UTS \u548c\u7528\u6237\u89d2\u5ea6\u7684\u9694\u79bb\uff0c\u4e00\u4e2a container \u5c31\u53ef\u4ee5\u5bf9\u5916\u5c55\u73b0\u51fa\u4e00\u4e2a\u72ec\u7acb\u8ba1\u7b97\u673a\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u4e0d\u540c container \u4ece OS \u5c42\u9762\u5b9e\u73b0\u4e86\u9694\u79bb\u3002 \u7136\u800c\u4e0d\u540c namespace \u4e4b\u95f4\u8d44\u6e90\u8fd8\u662f\u76f8\u4e92\u7ade\u4e89\u7684\uff0c\u4ecd\u7136\u9700\u8981\u7c7b\u4f3c ulimit \u6765\u7ba1\u7406\u6bcf\u4e2a container \u6240\u80fd\u4f7f\u7528\u7684\u8d44\u6e90 - cgroup\u3002    \u8d44\u6e90\u914d\u989d\u300ccgroups\u300d    cgroups \u5b9e\u73b0\u4e86\u5bf9\u8d44\u6e90\u7684\u914d\u989d\u548c\u5ea6\u91cf\u3002 cgroups \u7684\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u63d0\u4f9b\u7c7b\u4f3c\u6587\u4ef6\u7684\u63a5\u53e3\uff0c\u5728 /cgroup \u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u5373\u53ef\u65b0\u5efa\u4e00\u4e2a group\uff0c\u5728\u6b64\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa task \u6587\u4ef6\uff0c\u5e76\u5c06 pid \u5199\u5165\u8be5\u6587\u4ef6\uff0c\u5373\u53ef\u5b9e\u73b0\u5bf9\u8be5\u8fdb\u7a0b\u7684\u8d44\u6e90\u63a7\u5236\u3002\u5177\u4f53\u7684\u8d44\u6e90\u914d\u7f6e\u9009\u9879\u53ef\u4ee5\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u5b50 subsystem \uff0c{\u5b50\u7cfb\u7edf\u524d\u7f00}.{\u8d44\u6e90\u9879} \u662f\u5178\u578b\u7684\u914d\u7f6e\u65b9\u6cd5\uff0c \u5982 memory.usage_in_bytes \u5c31\u5b9a\u4e49\u4e86\u8be5 group \u5728 subsystem memory \u4e2d\u7684\u4e00\u4e2a\u5185\u5b58\u9650\u5236\u9009\u9879\u3002 \u53e6\u5916\uff0ccgroups \u4e2d\u7684 subsystem \u53ef\u4ee5\u968f\u610f\u7ec4\u5408\uff0c\u4e00\u4e2a subsystem \u53ef\u4ee5\u5728\u4e0d\u540c\u7684 group \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4e00\u4e2a group \u5305\u542b\u591a\u4e2a subsystem - \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a subsystem\u3002   memory  \u5185\u5b58\u76f8\u5173\u7684\u9650\u5236    cpu  \u5728 cgroup \u4e2d\uff0c\u5e76\u4e0d\u80fd\u50cf\u786c\u4ef6\u865a\u62df\u5316\u65b9\u6848\u4e00\u6837\u80fd\u591f\u5b9a\u4e49 CPU \u80fd\u529b\uff0c\u4f46\u662f\u80fd\u591f\u5b9a\u4e49 CPU \u8f6e\u8f6c\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u5177\u6709\u8f83\u9ad8 CPU \u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u4f1a\u66f4\u53ef\u80fd\u5f97\u5230 CPU \u8fd0\u7b97\u3002 \u901a\u8fc7\u5c06\u53c2\u6570\u5199\u5165 cpu.shares ,\u5373\u53ef\u5b9a\u4e49\u6539 cgroup \u7684 CPU \u4f18\u5148\u7ea7 - \u8fd9\u91cc\u662f\u4e00\u4e2a\u76f8\u5bf9\u6743\u91cd\uff0c\u800c\u975e\u7edd\u5bf9\u503c    blkio  block IO \u76f8\u5173\u7684\u7edf\u8ba1\u548c\u9650\u5236\uff0cbyte/operation \u7edf\u8ba1\u548c\u9650\u5236 (IOPS \u7b49)\uff0c\u8bfb\u5199\u901f\u5ea6\u9650\u5236\u7b49\uff0c\u4f46\u662f\u8fd9\u91cc\u4e3b\u8981\u7edf\u8ba1\u7684\u90fd\u662f\u540c\u6b65 IO    devices  \u8bbe\u5907\u6743\u9650\u9650\u5236", 
            "title": "docker \u7b80\u4ecb"
        }, 
        {
            "location": "/docker/#docker_1", 
            "text": "Docker HUB : Docker\u955c\u50cf\u9996\u9875\uff0c\u5305\u62ec\u5b98\u65b9\u955c\u50cf\u548c\u5176\u5b83\u516c\u5f00\u955c\u50cf\n\u56e0\u4e3a\u56fd\u60c5\u7684\u539f\u56e0\uff0c\u56fd\u5185\u4e0b\u8f7d Docker HUB \u5b98\u65b9\u7684\u76f8\u5173\u955c\u50cf\u6bd4\u8f83\u6162\uff0c\u53ef\u4ee5\u4f7f\u7528 Daocloud \u955c\u50cf\u52a0\u901f\u3002   Search images   $ sudo docker search ubuntu   Pull images   $ sudo docker pull ubuntu # \u83b7\u53d6 ubuntu \u5b98\u65b9\u955c\u50cf\n$ sudo docker images # \u67e5\u770b\u5f53\u524d\u955c\u50cf\u5217\u8868   Running an interactive shell   $ sudo docker run -i -t ubuntu:14.04 /bin/bash\n\ndocker run - \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\n-t - \u5206\u914d\u4e00\u4e2a\uff08\u4f2a\uff09tty (link is external)\n-i - \u4ea4\u4e92\u6a21\u5f0f (so we can interact with it)\nubuntu:14.04 - \u4f7f\u7528 ubuntu \u57fa\u7840\u955c\u50cf 14.04\n/bin/bash - \u8fd0\u884c\u547d\u4ee4 bash shell  \u6ce8: ubuntu \u4f1a\u6709\u591a\u4e2a\u7248\u672c\uff0c\u901a\u8fc7\u6307\u5b9a tag \u6765\u542f\u52a8\u7279\u5b9a\u7684\u7248\u672c [image]:[tag]  $ sudo docker ps # \u67e5\u770b\u5f53\u524d\u8fd0\u884c\u7684\u5bb9\u5668, ps -a \u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u7684\u5bb9\u5668\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes   \u76f8\u5173\u5feb\u6377\u952e   \u9000\u51fa\uff1aCtrl-D or exit\ndetach\uff1aCtrl-P + Ctrl-Q\nattach: docker attach CONTAINER-ID", 
            "title": "docker\u57fa\u7840\u7528\u6cd5"
        }, 
        {
            "location": "/docker/#docker_2", 
            "text": "docker help  docker command     $ sudo docker   # docker \u547d\u4ee4\u5e2e\u52a9\n\nCommands:\n    attach    Attach to a running container                 # \u5f53\u524d shell \u4e0b attach \u8fde\u63a5\u6307\u5b9a\u8fd0\u884c\u955c\u50cf\n    build     Build an image from a Dockerfile              # \u901a\u8fc7 Dockerfile \u5b9a\u5236\u955c\u50cf\n    commit    Create a new image from a container's changes # \u63d0\u4ea4\u5f53\u524d\u5bb9\u5668\u4e3a\u65b0\u7684\u955c\u50cf\n    cp        Copy files/folders from the containers filesystem to the host path\n              # \u4ece\u5bb9\u5668\u4e2d\u62f7\u8d1d\u6307\u5b9a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u5230\u5bbf\u4e3b\u673a\u4e2d\n    create    Create a new container                        # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\uff0c\u540c run\uff0c\u4f46\u4e0d\u542f\u52a8\u5bb9\u5668\n    diff      Inspect changes on a container's filesystem   # \u67e5\u770b docker \u5bb9\u5668\u53d8\u5316\n    events    Get real time events from the server          # \u4ece docker \u670d\u52a1\u83b7\u53d6\u5bb9\u5668\u5b9e\u65f6\u4e8b\u4ef6\n    exec      Run a command in an existing container        # \u5728\u5df2\u5b58\u5728\u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u547d\u4ee4\n    export    Stream the contents of a container as a tar archive   \n              # \u5bfc\u51fa\u5bb9\u5668\u7684\u5185\u5bb9\u6d41\u4f5c\u4e3a\u4e00\u4e2a tar \u5f52\u6863\u6587\u4ef6[\u5bf9\u5e94 import ]\n    history   Show the history of an image                  # \u5c55\u793a\u4e00\u4e2a\u955c\u50cf\u5f62\u6210\u5386\u53f2\n    images    List images                                   # \u5217\u51fa\u7cfb\u7edf\u5f53\u524d\u955c\u50cf\n    import    Create a new filesystem image from the contents of a tarball  \n              # \u4ecetar\u5305\u4e2d\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u7cfb\u7edf\u6620\u50cf[\u5bf9\u5e94 export]\n    info      Display system-wide information               # \u663e\u793a\u7cfb\u7edf\u76f8\u5173\u4fe1\u606f\n    inspect   Return low-level information on a container   # \u67e5\u770b\u5bb9\u5668\u8be6\u7ec6\u4fe1\u606f\n    kill      Kill a running container                      # kill \u6307\u5b9a docker \u5bb9\u5668\n    load      Load an image from a tar archive              # \u4ece\u4e00\u4e2a tar \u5305\u4e2d\u52a0\u8f7d\u4e00\u4e2a\u955c\u50cf[\u5bf9\u5e94 save]\n    login     Register or Login to the docker registry server   \n              # \u6ce8\u518c\u6216\u8005\u767b\u9646\u4e00\u4e2a docker \u6e90\u670d\u52a1\u5668\n    logout    Log out from a Docker registry server         # \u4ece\u5f53\u524d Docker registry \u9000\u51fa\n    logs      Fetch the logs of a container                 # \u8f93\u51fa\u5f53\u524d\u5bb9\u5668\u65e5\u5fd7\u4fe1\u606f\n    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT\n              # \u67e5\u770b\u6620\u5c04\u7aef\u53e3\u5bf9\u5e94\u7684\u5bb9\u5668\u5185\u90e8\u6e90\u7aef\u53e3\n    pause     Pause all processes within a container        # \u6682\u505c\u5bb9\u5668\n    ps        List containers                               # \u5217\u51fa\u5bb9\u5668\u5217\u8868\n    pull      Pull an image or a repository from the docker registry server\n              # \u4ecedocker\u955c\u50cf\u6e90\u670d\u52a1\u5668\u62c9\u53d6\u6307\u5b9a\u955c\u50cf\u6216\u8005\u5e93\u955c\u50cf\n    push      Push an image or a repository to the docker registry server\n              # \u63a8\u9001\u6307\u5b9a\u955c\u50cf\u6216\u8005\u5e93\u955c\u50cf\u81f3docker\u6e90\u670d\u52a1\u5668\n    restart   Restart a running container                   # \u91cd\u542f\u8fd0\u884c\u7684\u5bb9\u5668\n    rm        Remove one or more containers                 # \u79fb\u9664\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5bb9\u5668\n    rmi       Remove one or more images                 \n              # \u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u955c\u50cf[\u65e0\u5bb9\u5668\u4f7f\u7528\u8be5\u955c\u50cf\u624d\u53ef\u5220\u9664\uff0c\u5426\u5219\u9700\u5220\u9664\u76f8\u5173\u5bb9\u5668\u624d\u53ef\u7ee7\u7eed\u6216 -f \u5f3a\u5236\u5220\u9664]\n    run       Run a command in a new container\n              # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u5e76\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4\n    save      Save an image to a tar archive                # \u4fdd\u5b58\u4e00\u4e2a\u955c\u50cf\u4e3a\u4e00\u4e2a tar \u5305[\u5bf9\u5e94 load]\n    search    Search for an image on the Docker Hub         # \u5728 docker hub \u4e2d\u641c\u7d22\u955c\u50cf\n    start     Start a stopped containers                    # \u542f\u52a8\u5bb9\u5668\n    stop      Stop a running containers                     # \u505c\u6b62\u5bb9\u5668\n    tag       Tag an image into a repository                # \u7ed9\u6e90\u4e2d\u955c\u50cf\u6253\u6807\u7b7e\n    top       Lookup the running processes of a container   # \u67e5\u770b\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u8fdb\u7a0b\u4fe1\u606f\n    unpause   Unpause a paused container                    # \u53d6\u6d88\u6682\u505c\u5bb9\u5668\n    version   Show the docker version information           # \u67e5\u770b docker \u7248\u672c\u53f7\n    wait      Block until a container stops, then print its exit code   \n              # \u622a\u53d6\u5bb9\u5668\u505c\u6b62\u65f6\u7684\u9000\u51fa\u72b6\u6001\u503c\nRun 'docker COMMAND --help' for more information on a command.   docker option   Usage of docker:\n  --api-enable-cors=false                Enable CORS headers in the remote API                      # \u8fdc\u7a0b API \u4e2d\u5f00\u542f CORS \u5934\n  -b, --bridge=                         Attach containers to a pre-existing network bridge         # \u6865\u63a5\u7f51\u7edc\n                                           use 'none' to disable container networking\n  --bip=                                Use this CIDR notation address for the network bridge's IP, not compatible with -b\n                                         # \u548c -b \u9009\u9879\u4e0d\u517c\u5bb9\uff0c\u5177\u4f53\u6ca1\u6709\u6d4b\u8bd5\u8fc7\n  -d, --daemon=false                     Enable daemon mode                                         # daemon \u6a21\u5f0f\n  -D, --debug=false                      Enable debug mode                                          # debug \u6a21\u5f0f\n  --dns=[]                               Force docker to use specific DNS servers                   # \u5f3a\u5236 docker \u4f7f\u7528\u6307\u5b9a dns \u670d\u52a1\u5668\n  --dns-search=[]                        Force Docker to use specific DNS search domains            # \u5f3a\u5236 docker \u4f7f\u7528\u6307\u5b9a dns \u641c\u7d22\u57df\n  -e, --exec-driver= native              Force the docker runtime to use a specific exec driver     # \u5f3a\u5236 docker \u8fd0\u884c\u65f6\u4f7f\u7528\u6307\u5b9a\u6267\u884c\u9a71\u52a8\u5668\n  --fixed-cidr=                         IPv4 subnet for fixed IPs (ex: 10.20.0.0/16)\n                                           this subnet must be nested in the bridge subnet (which is defined by -b or --bip)\n  -G, --group= docker                    Group to assign the unix socket specified by -H when running in daemon mode\n                                           use '' (the empty string) to disable setting of a group\n  -g, --graph= /var/lib/docker           Path to use as the root of the docker runtime              # \u5bb9\u5668\u8fd0\u884c\u7684\u6839\u76ee\u5f55\u8def\u5f84\n  -H, --host=[]                          The socket(s) to bind to in daemon mode                    # daemon \u6a21\u5f0f\u4e0b docker \u6307\u5b9a\u7ed1\u5b9a\u65b9\u5f0f[tcp or \u672c\u5730 socket]\n                                           specified using one or more tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd.\n  --icc=true                             Enable inter-container communication                       # \u8de8\u5bb9\u5668\u901a\u4fe1\n  --insecure-registry=[]                 Enable insecure communication with specified registries (no certificate verification for HTTPS and enable HTTP fallback) (e.g., localhost:5000 or 10.20.0.0/16)\n  --ip= 0.0.0.0                          Default IP address to use when binding container ports     # \u6307\u5b9a\u76d1\u542c\u5730\u5740\uff0c\u9ed8\u8ba4\u6240\u6709 ip\n  --ip-forward=true                      Enable net.ipv4.ip_forward                                 # \u5f00\u542f\u8f6c\u53d1\n  --ip-masq=true                         Enable IP masquerading for bridge's IP range\n  --iptables=true                        Enable Docker's addition of iptables rules                 # \u6dfb\u52a0\u5bf9\u5e94 iptables \u89c4\u5219\n  --mtu=0                                Set the containers network MTU                             # \u8bbe\u7f6e\u7f51\u7edc mtu\n                                           if no value is provided: default to the default route MTU or 1500 if no default route is available\n  -p, --pidfile= /var/run/docker.pid     Path to use for daemon PID file                            # \u6307\u5b9a pid \u6587\u4ef6\u4f4d\u7f6e\n  --registry-mirror=[]                   Specify a preferred Docker registry mirror                  \n  -s, --storage-driver=                 Force the docker runtime to use a specific storage driver  # \u5f3a\u5236 docker \u8fd0\u884c\u65f6\u4f7f\u7528\u6307\u5b9a\u5b58\u50a8\u9a71\u52a8\n  --selinux-enabled=false                Enable selinux support                                     # \u5f00\u542f selinux \u652f\u6301\n  --storage-opt=[]                       Set storage driver options                                 # \u8bbe\u7f6e\u5b58\u50a8\u9a71\u52a8\u9009\u9879\n  --tls=false                            Use TLS; implied by tls-verify flags                       # \u5f00\u542f tls\n  --tlscacert= /root/.docker/ca.pem      Trust only remotes providing a certificate signed by the CA given here\n  --tlscert= /root/.docker/cert.pem      Path to TLS certificate file                               # tls \u8bc1\u4e66\u6587\u4ef6\u4f4d\u7f6e\n  --tlskey= /root/.docker/key.pem        Path to TLS key file                                       # tls key \u6587\u4ef6\u4f4d\u7f6e\n  --tlsverify=false                      Use TLS and verify the remote (daemon: verify client, client: verify daemon) # \u4f7f\u7528 tls \u5e76\u786e\u8ba4\u8fdc\u7a0b\u63a7\u5236\u4e3b\u673a\n  -v, --version=false                    Print version information and quit      docker search   $ sudo docker search --help\n\nUsage: docker search TERM\n\nSearch the Docker Hub for images     # \u4ece Docker Hub \u641c\u7d22\u955c\u50cf\n\n  --automated=false    Only show automated builds\n  --no-trunc=false     Don't truncate output\n  -s, --stars=0        Only displays with at least xxx stars  \u793a\u4f8b\uff1a  $ sudo docker search -s 100 ubuntu      \n# \u67e5\u627e star \u6570\u81f3\u5c11\u4e3a 100 \u7684\u955c\u50cf\uff0c\u627e\u51fa\u53ea\u6709\u5b98\u65b9\u955c\u50cf start \u6570\u8d85\u8fc7 100\uff0c\u9ed8\u8ba4\u4e0d\u52a0 s \u9009\u9879\u627e\u51fa\u6240\u6709\u76f8\u5173 ubuntu \u955c\u50cf\nNAME      DESCRIPTION                  STARS     OFFICIAL   AUTOMATED\nubuntu    Official Ubuntu base image   425       [OK]   docker info   $ sudo docker info \nContainers: 1                       # \u5bb9\u5668\u4e2a\u6570\nImages: 22                          # \u955c\u50cf\u4e2a\u6570\nStorage Driver: devicemapper        # \u5b58\u50a8\u9a71\u52a8\n Pool Name: docker-8:17-3221225728-pool\n Pool Blocksize: 65.54 kB\n Data file: /data/docker/devicemapper/devicemapper/data\n Metadata file: /data/docker/devicemapper/devicemapper/metadata\n Data Space Used: 1.83 GB\n Data Space Total: 107.4 GB\n Metadata Space Used: 2.191 MB\n Metadata Space Total: 2.147 GB\n Library Version: 1.02.84-RHEL7 (2014-03-26)\nExecution Driver: native-0.2        # \u5b58\u50a8\u9a71\u52a8\nKernel Version: 3.10.0-123.el7.x86_64\nOperating System: CentOS Linux 7 (Core)   docker pull   docker push   $ sudo docker pull --help           # pull \u62c9\u53d6\u955c\u50cf\n\nUsage: docker pull [OPTIONS] NAME[:TAG]\n\nPull an image or a repository from the registry\n\n  -a, --all-tags=false    Download all tagged images in the repository\n\n$ sudo docker push                  # push \u63a8\u9001\u6307\u5b9a\u955c\u50cf\n\nUsage: docker push NAME[:TAG]\n\nPush an image or a repository to the registry  \u793a\u4f8b\uff1a  $ sudo docker pull ubuntu           # \u4e0b\u8f7d\u5b98\u65b9 ubuntu docker \u955c\u50cf\uff0c\u9ed8\u8ba4\u4e0b\u8f7d\u6240\u6709 ubuntu \u5b98\u65b9\u5e93\u955c\u50cf\n$ sudo docker pull ubuntu:14.04     # \u4e0b\u8f7d\u6307\u5b9a\u7248\u672c ubuntu \u5b98\u65b9\u955c\u50cf  $ sudo docker push 192.168.0.100:5000/ubuntu\n# \u63a8\u9001\u955c\u50cf\u5e93\u5230\u79c1\u6709\u6e90[\u53ef\u6ce8\u518c docker \u5b98\u65b9\u8d26\u6237\uff0c\u63a8\u9001\u5230\u5b98\u65b9\u81ea\u6709\u8d26\u6237]\n$ sudo docker push 192.168.0.100:5000/ubuntu:14.04 \n# \u63a8\u9001\u6307\u5b9a\u955c\u50cf\u5230\u79c1\u6709\u6e90   docker images   \u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u955c\u50cf  $ sudo docker images --help\n\nUsage: docker images [OPTIONS] [NAME]\n\nList images\n\n  -a, --all=false      Show all images (by default filter out the intermediate image layers)\n  # -a \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u7684\u6240\u6709\u955c\u50cf\uff0c\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\uff0c\u9ed8\u8ba4 docker images \u663e\u793a\u6700\u7ec8\u955c\u50cf\uff0c\u4e0d\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n  -f, --filter=[]      Provide filter values (i.e. 'dangling=true')\n  --no-trunc=false     Don't truncate output\n  -q, --quiet=false    Only show numeric IDs  \u793a\u4f8b\uff1a  $ sudo docker images            # \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u955c\u50cf\uff0c\u4e0d\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n$ sudo docker images -a         # \u663e\u793a\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u955c\u50cf\uff0c\u5305\u62ec\u8fc7\u6e21\u5c42\u955c\u50cf\n$ sudo docker images ubuntu     # \u663e\u793a\u5f53\u524d\u7cfb\u7edf docker ubuntu \u5e93\u4e2d\u7684\u6240\u6709\u955c\u50cf\nREPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                     12.04               ebe4be4dd427        4 weeks ago         210.6 MB\nubuntu                     14.04               e54ca5efa2e9        4 weeks ago         276.5 MB\nubuntu                     14.04-ssh           6334d3ac099a        7 weeks ago         383.2 MB   docker rmi   \u5220\u9664\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u955c\u50cf  $ sudo docker rmi --help\n\nUsage: docker rmi IMAGE [IMAGE...]\n\nRemove one or more images\n\n  -f, --force=false    Force removal of the image       # \u5f3a\u5236\u79fb\u9664\u955c\u50cf\u4e0d\u7ba1\u662f\u5426\u6709\u5bb9\u5668\u4f7f\u7528\u8be5\u955c\u50cf\n  --no-prune=false     Do not delete untagged parents   # \u4e0d\u8981\u5220\u9664\u672a\u6807\u8bb0\u7684\u7236\u955c\u50cf   docker run   $ sudo docker run --help\n\nUsage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\n  -a, --attach=[]            Attach to stdin, stdout or stderr.\n  -c, --cpu-shares=0         CPU shares (relative weight)                       # \u8bbe\u7f6e cpu \u4f7f\u7528\u6743\u91cd\n  --cap-add=[]               Add Linux capabilities\n  --cap-drop=[]              Drop Linux capabilities\n  --cidfile=                Write the container ID to the file                 # \u628a\u5bb9\u5668 id \u5199\u5165\u5230\u6307\u5b9a\u6587\u4ef6\n  --cpuset=                 CPUs in which to allow execution (0-3, 0,1)        # cpu \u7ed1\u5b9a\n  -d, --detach=false         Detached mode: Run container in the background, print new container id # \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\n  --device=[]                Add a host device to the container (e.g. --device=/dev/sdc:/dev/xvdc)\n  --dns=[]                   Set custom dns servers                             # \u8bbe\u7f6e dns\n  --dns-search=[]            Set custom dns search domains                      # \u8bbe\u7f6e dns \u57df\u641c\u7d22\n  -e, --env=[]               Set environment variables                          # \u5b9a\u4e49\u73af\u5883\u53d8\u91cf\n  --entrypoint=             Overwrite the default entrypoint of the image      # \uff1f\n  --env-file=[]              Read in a line delimited file of ENV variables     # \u4ece\u6307\u5b9a\u6587\u4ef6\u8bfb\u53d6\u53d8\u91cf\u503c\n  --expose=[]                Expose a port from the container without publishing it to your host    # \u6307\u5b9a\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7aef\u53e3\n  -h, --hostname=           Container host name                                # \u8bbe\u7f6e\u5bb9\u5668\u4e3b\u673a\u540d\n  -i, --interactive=false    Keep stdin open even if not attached               # \u4fdd\u6301\u6807\u51c6\u8f93\u51fa\u5f00\u542f\u5373\u4f7f\u6ca1\u6709 attached\n  --link=[]                  Add link to another container (name:alias)         # \u6dfb\u52a0\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u5bb9\u5668\n  --lxc-conf=[]              (lxc exec-driver only) Add custom lxc options --lxc-conf= lxc.cgroup.cpuset.cpus = 0,1 \n  -m, --memory=             Memory limit (format:  number optional unit , where unit = b, k, m or g) # \u5185\u5b58\u9650\u5236\n  --name=                   Assign a name to the container                     # \u8bbe\u7f6e\u5bb9\u5668\u540d\n  --net= bridge              Set the Network mode for the container             # \u8bbe\u7f6e\u5bb9\u5668\u7f51\u7edc\u6a21\u5f0f\n                               'bridge': creates a new network stack for the container on the docker bridge\n                               'none': no networking for this container\n                               'container: name|id ': reuses another container network stack\n                               'host': use the host network stack inside the container.  Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure.\n  -P, --publish-all=false    Publish all exposed ports to the host interfaces   # \u81ea\u52a8\u6620\u5c04\u5bb9\u5668\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u7aef\u53e3\n  -p, --publish=[]           Publish a container's port to the host             # \u6307\u5b9a\u7aef\u53e3\u6620\u5c04\n                               format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort\n                               (use 'docker port' to see the actual mapping)\n  --privileged=false         Give extended privileges to this container         # \u63d0\u4f9b\u66f4\u591a\u7684\u6743\u9650\u7ed9\u5bb9\u5668\n  --restart=                Restart policy to apply when a container exits (no, on-failure[:max-retry], always)\n  --rm=false                 Automatically remove the container when it exits (incompatible with -d) # \u5982\u679c\u5bb9\u5668\u9000\u51fa\u81ea\u52a8\u79fb\u9664\u548c -d \u9009\u9879\u51b2\u7a81\n  --security-opt=[]          Security Options\n  --sig-proxy=true           Proxify received signals to the process (even in non-tty mode). SIGCHLD is not proxied.\n  -t, --tty=false            Allocate a pseudo-tty                              # \u5206\u914d\u4f2a\u7ec8\u7aef\n  -u, --user=               Username or UID                                    # \u6307\u5b9a\u8fd0\u884c\u5bb9\u5668\u7684\u7528\u6237 uid \u6216\u8005\u7528\u6237\u540d\n  -v, --volume=[]            Bind mount a volume (e.g., from the host: -v /host:/container, from docker: -v /container)     \n                             # \u6302\u8f7d\u5377\n  --volumes-from=[]          Mount volumes from the specified container(s)      # \u4ece\u6307\u5b9a\u5bb9\u5668\u6302\u8f7d\u5377\n  -w, --workdir=            Working directory inside the container             # \u6307\u5b9a\u5bb9\u5668\u5de5\u4f5c\u76ee\u5f55  \u793a\u4f8b\uff1a  $ sudo docker images ubuntu\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu              14.04               e54ca5efa2e9        4 weeks ago         276.5 MB\n... ...\n$ sudo docker run -t -i -c 100 -m 512MB -h test1 -d --name= docker_test1  ubuntu /bin/bash \n# \u521b\u5efa\u4e00\u4e2a cpu \u4f18\u5148\u7ea7\u4e3a 100\uff0c\u5185\u5b58\u9650\u5236 512MB\uff0c\u4e3b\u673a\u540d\u4e3a test1\uff0c\u540d\u4e3a docker_test1 \u540e\u53f0\u8fd0\u884c bash \u7684\u5bb9\u5668\na424ca613c9f2247cd3ede95adfbaf8d28400cbcb1d5f9b69a7b56f97b2b52e5\n$ sudo docker ps \nCONTAINER ID        IMAGE           COMMAND         CREATED             STATUS              PORTS       NAMES\na424ca613c9f        ubuntu:14.04    /bin/bash       6 seconds ago       Up 5 seconds                    docker_test1\n$ sudo docker attach docker_test1\nroot@test1:/# pwd\n/\nroot@test1:/# exit\nexit   docker start|stop|kill... ...   docker start|stop|kill|restart|pause|unpause|rm|commit|inspect|logs  docker start CONTAINER [CONTAINER...]\n# \u8fd0\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u505c\u6b62\u7684\u5bb9\u5668\ndocker stop CONTAINER [CONTAINER...]\n# \u505c\u6389\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd0\u884c\u7684\u5bb9\u5668 -t \u9009\u9879\u53ef\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\ndocker kill [OPTIONS] CONTAINER [CONTAINER...]\n# \u9ed8\u8ba4 kill \u53d1\u9001 SIGKILL \u4fe1\u53f7 -s \u53ef\u4ee5\u6307\u5b9a\u53d1\u9001 kill \u4fe1\u53f7\u7c7b\u578b\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n# \u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd0\u884c\u7684\u5bb9\u5668 -t \u9009\u9879\u53ef\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\ndocker pause CONTAINER\n# \u6682\u505c\u4e00\u4e2a\u5bb9\u5668\uff0c\u65b9\u4fbf commit\ndocker unpause CONTAINER\n# \u7ee7\u7eed\u6682\u505c\u7684\u5bb9\u5668\ndocker rm [OPTIONS] CONTAINER [CONTAINER...]\n# \u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\n-f, --force=false Force removal of running container\n-l, --link=false Remove the specified link and not the underlying container\n-v, --volumes=false Remove the volumes associated with the container\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n# \u63d0\u4ea4\u6307\u5b9a\u5bb9\u5668\u4e3a\u955c\u50cf\n-a, --author=  Author (e.g.,  John Hannibal Smith hannibal@a-team.com )\n-m, --message=  Commit message\n-p, --pause=true Pause container during commit\n# \u9ed8\u8ba4 commit \u662f\u6682\u505c\u72b6\u6001\ndocker inspect CONTAINER|IMAGE [CONTAINER|IMAGE...]\n# \u67e5\u770b\u5bb9\u5668\u6216\u8005\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f\ndocker logs CONTAINER\n# \u8f93\u51fa\u6307\u5b9a\u5bb9\u5668\u65e5\u5fd7\u4fe1\u606f\n-f, --follow=false Follow log output\n# \u7c7b\u4f3c tail -f\n-t, --timestamps=false Show timestamps\n--tail= all  Output the specified number of lines at the end of logs (defaults to all logs)     Docker 1.3 \u65b0\u589e\u7279\u6027\u548c\u547d\u4ee4     Digital Signature Verification    Docker 1.3 \u7248\u672c\u5c06\u4f7f\u7528\u6570\u5b57\u7b7e\u540d\u81ea\u52a8\u9a8c\u8bc1\u6240\u6709\u5b98\u65b9\u5e93\u7684\u6765\u6e90\u548c\u5b8c\u6574\u6027\uff0c\u5982\u679c\u4e00\u4e2a\u5b98\u65b9\u955c\u50cf\u88ab\u7be1\u6539\u6216\u8005\u88ab\u7834\u574f\uff0c\u76ee\u524d Docker \u53ea\u4f1a\u5bf9\u8fd9\u79cd\u60c5\u51b5\u53d1\u51fa\u8b66\u544a\u800c\u5e76\u4e0d\u963b\u6b62\u5bb9\u5668\u7684\u8fd0\u884c\u3002   Inject new processes with docker exec   docker exec --help\n\nUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\nRun a command in an existing container\n\n  -d, --detach=false         Detached mode: run command in the background\n  -i, --interactive=false    Keep STDIN open even if not attached\n  -t, --tty=false            Allocate a pseudo-TTY  \u4e3a\u4e86\u7b80\u5316\u8c03\u8bd5\uff0c\u53ef\u4ee5\u4f7f\u7528 docker exec \u547d\u4ee4\u901a\u8fc7 Docker API \u548c CLI \u5728\u8fd0\u884c\u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u7a0b\u5e8f\u3002  $ docker exec -it ubuntu_bash bash  \u4e0a\u4f8b\u5c06\u5728\u5bb9\u5668 ubuntu_bash \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Bash \u4f1a\u8bdd\u3002   Tune container lifecycles with docker create   \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 docker run   \u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5e76\u8fd0\u884c\u5176\u4e2d\u7684\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u7528\u6237\u8981\u6c42\u521b\u5efa\u5bb9\u5668\u7684\u65f6\u5019\u4e0d\u542f\u52a8\u5bb9\u5668\uff0c\u6240\u4ee5 docker create \u5e94\u8fd0\u800c\u751f\u4e86\u3002  $ docker create -t -i fedora bash\n6d8af538ec541dd581ebc2a24153a28329acb5268abe5ef868c1f1a261221752  \u4e0a\u4f8b\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u5199\u7684\u5bb9\u5668\u5c42 (\u5e76\u4e14\u6253\u5370\u51fa\u5bb9\u5668 ID)\uff0c\u4f46\u662f\u5e76\u4e0d\u8fd0\u884c\u5b83\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u8be5\u5bb9\u5668\uff1a  $ docker start -a -i 6d8af538ec5\nbash-4.2#   Security Options   \u901a\u8fc7 --security-opt \u9009\u9879\uff0c\u8fd0\u884c\u5bb9\u5668\u65f6\u7528\u6237\u53ef\u81ea\u5b9a\u4e49 SELinux \u548c AppArmor \u5377\u6807\u548c\u914d\u7f6e\u3002  $ docker run --security-opt label:type:svirt_apache -i -t centos \\ bash  \u4e0a\u4f8b\u53ea\u5141\u8bb8\u5bb9\u5668\u76d1\u542c\u5728 Apache \u7aef\u53e3\uff0c\u8fd9\u4e2a\u9009\u9879\u7684\u597d\u5904\u662f\u7528\u6237\u4e0d\u9700\u8981\u8fd0\u884c docker \u7684\u65f6\u5019\u6307\u5b9a --privileged \u9009\u9879\uff0c\u964d\u4f4e\u5b89\u5168\u98ce\u9669\u3002   Docker 1.5 \u65b0\u7279\u6027   \u53c2\u8003\u6587\u6863\uff1ahttp://dockerone.com/article/202", 
            "title": "Docker \u547d\u4ee4\u5e2e\u52a9"
        }, 
        {
            "location": "/docker/#docker_3", 
            "text": "# Find IP address of container with ID  container_id  \u901a\u8fc7\u5bb9\u5668 id \u83b7\u53d6 ip\n$ sudo docker inspect  container_id  | grep IPAddress | cut -d \u2019 \u2019 -f 4  \u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u4e9b ip \u662f\u57fa\u4e8e\u672c\u5730\u7cfb\u7edf\u7684\u5e76\u4e14\u5bb9\u5668\u7684\u7aef\u53e3\u975e\u672c\u5730\u4e3b\u673a\u662f\u8bbf\u95ee\u4e0d\u5230\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u7aef\u53e3\u53ea\u80fd\u672c\u5730\u8bbf\u95ee\u5916\uff0c\u5bf9\u4e8e\u5bb9\u5668\u7684\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\u8fd9\u4e9b ip \u5728\u5bb9\u5668\u6bcf\u6b21\u542f\u52a8\u7684\u65f6\u5019\u90fd\u4f1a\u6539\u53d8\u3002  Docker \u89e3\u51b3\u4e86\u5bb9\u5668\u7684\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u7ed9\u5bb9\u5668\u5185\u90e8\u670d\u52a1\u7684\u8bbf\u95ee\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u53ef\u9760\u7684\u65b9\u6cd5\u3002Docker \u901a\u8fc7\u7aef\u53e3\u7ed1\u5b9a\u4e3b\u673a\u7cfb\u7edf\u7684\u63a5\u53e3\uff0c\u5141\u8bb8\u975e\u672c\u5730\u5ba2\u6237\u7aef\u8bbf\u95ee\u5bb9\u5668\u5185\u90e8\u8fd0\u884c\u7684\u670d\u52a1\u3002\u4e3a\u4e86\u7b80\u4fbf\u7684\u4f7f\u5f97\u5bb9\u5668\u95f4\u901a\u4fe1\uff0cDocker \u63d0\u4f9b\u4e86\u8fd9\u79cd\u8fde\u63a5\u673a\u5236\u3002   \u81ea\u52a8\u6620\u5c04\u7aef\u53e3   -P \u4f7f\u7528\u65f6\u9700\u8981\u6307\u5b9a --expose \u9009\u9879\uff0c\u6307\u5b9a\u9700\u8981\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u7aef\u53e3  $ sudo docker run -t -P --expose 22 --name server  ubuntu:14.04  \u4f7f\u7528 docker run -P \u81ea\u52a8\u7ed1\u5b9a\u6240\u6709\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u5bb9\u5668\u7aef\u53e3\uff0c\u6620\u5c04\u7684\u7aef\u53e3\u5c06\u4f1a\u4ece\u6ca1\u6709\u4f7f\u7528\u7684\u7aef\u53e3\u6c60\u4e2d (49000..49900) \u81ea\u52a8\u9009\u62e9\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 docker ps \u3001docker inspect   \u6216\u8005 docker port     \u786e\u5b9a\u5177\u4f53\u7684\u7ed1\u5b9a\u4fe1\u606f\u3002   \u7ed1\u5b9a\u7aef\u53e3\u5230\u6307\u5b9a\u63a5\u53e3   \u57fa\u672c\u8bed\u6cd5  $ sudo docker run -p [([ host_interface :[host_port]])|( host_port ):] container_port [/udp]  image   cmd   \u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7ed1\u5b9a ip \u5219\u76d1\u542c\u6240\u6709\u7f51\u7edc\u63a5\u53e3\u3002   \u7ed1\u5b9a TCP \u7aef\u53e3   # Bind TCP port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1:80:8080  image   cmd \n# Bind TCP port 8080 of the container to a dynamically allocated TCP port on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1::8080  image   cmd \n# Bind TCP port 8080 of the container to TCP port 80 on all available interfaces of the host machine.\n$ sudo docker run -p 80:8080  image   cmd \n# Bind TCP port 8080 of the container to a dynamically allocated TCP port on all available interfaces\n$ sudo docker run -p 8080  image   cmd    \u7ed1\u5b9a UDP \u7aef\u53e3   # Bind UDP port 5353 of the container to UDP port 53 on 127.0.0.1 of the host machine.\n$ sudo docker run -p 127.0.0.1:53:5353/udp  image   cmd", 
            "title": "Docker \u7aef\u53e3\u6620\u5c04"
        }, 
        {
            "location": "/docker/#docker_4", 
            "text": "Dokcer \u901a\u8fc7\u4f7f\u7528 Linux \u6865\u63a5\u63d0\u4f9b\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff0cdocker0 \u6865\u63a5\u63a5\u53e3\u7684\u76ee\u7684\u5c31\u662f\u65b9\u4fbf Docker \u7ba1\u7406\u3002\u5f53 Docker daemon \u542f\u52a8\u65f6\u9700\u8981\u505a\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\ncreates the docker0 bridge if not present\n# \u5982\u679c docker0 \u4e0d\u5b58\u5728\u5219\u521b\u5efa\nsearches for an IP address range which doesn\u2019t overlap with an existing route\n# \u641c\u7d22\u4e00\u4e2a\u4e0e\u5f53\u524d\u8def\u7531\u4e0d\u51b2\u7a81\u7684 ip \u6bb5\npicks an IP in the selected range\n# \u5728\u786e\u5b9a\u7684\u8303\u56f4\u4e2d\u9009\u62e9 ip\nassigns this IP to the docker0 bridge\n# \u7ed1\u5b9a ip \u5230 docker0   Docker \u56db\u79cd\u7f51\u7edc\u6a21\u5f0f   \u56db\u79cd\u7f51\u7edc\u6a21\u5f0f\u6458\u81ea:http://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice\n\ndocker run \u521b\u5efa Docker \u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u7528 --net \u9009\u9879\u6307\u5b9a\u5bb9\u5668\u7684\u7f51\u7edc\u6a21\u5f0f\uff0cDocker \u6709\u4ee5\u4e0b 4 \u79cd\u7f51\u7edc\u6a21\u5f0f\uff1a\n\nhost \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=host \u6307\u5b9a\u3002\ncontainer \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=container:NAME_or_ID \u6307\u5b9a\u3002\nnone \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=none \u6307\u5b9a\u3002\nbridge \u6a21\u5f0f\uff0c\u4f7f\u7528 --net=bridge \u6307\u5b9a\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u3002   host \u6a21\u5f0f   \u5982\u679c\u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u4f7f\u7528 host \u6a21\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bb9\u5668\u5c06\u4e0d\u4f1a\u83b7\u5f97\u4e00\u4e2a\u72ec\u7acb\u7684 Network Namespace\uff0c\u800c\u662f\u548c\u5bbf\u4e3b\u673a\u5171\u7528\u4e00\u4e2a Network Namespace\u3002\u5bb9\u5668\u5c06\u4e0d\u4f1a\u865a\u62df\u51fa\u81ea\u5df1\u7684\u7f51\u5361\uff0c\u914d\u7f6e\u81ea\u5df1\u7684 IP \u7b49\uff0c\u800c\u662f\u4f7f\u7528\u5bbf\u4e3b\u673a\u7684 IP \u548c\u7aef\u53e3\u3002  \u4f8b\u5982\uff0c\u6211\u4eec\u5728 10.10.101.105/24 \u7684\u673a\u5668\u4e0a\u7528 host \u6a21\u5f0f\u542f\u52a8\u4e00\u4e2a\u542b\u6709 web \u5e94\u7528\u7684 Docker \u5bb9\u5668\uff0c\u76d1\u542c tcp 80 \u7aef\u53e3\u3002\u5f53\u6211\u4eec\u5728\u5bb9\u5668\u4e2d\u6267\u884c\u4efb\u4f55\u7c7b\u4f3c ifconfig \u547d\u4ee4\u67e5\u770b\u7f51\u7edc\u73af\u5883\u65f6\uff0c\u770b\u5230\u7684\u90fd\u662f\u5bbf\u4e3b\u673a\u4e0a\u7684\u4fe1\u606f\u3002\u800c\u5916\u754c\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\uff0c\u5219\u76f4\u63a5\u4f7f\u7528 10.10.101.105:80 \u5373\u53ef\uff0c\u4e0d\u7528\u4efb\u4f55 NAT \u8f6c\u6362\uff0c\u5c31\u5982\u76f4\u63a5\u8dd1\u5728\u5bbf\u4e3b\u673a\u4e2d\u4e00\u6837\u3002\u4f46\u662f\uff0c\u5bb9\u5668\u7684\u5176\u4ed6\u65b9\u9762\uff0c\u5982\u6587\u4ef6\u7cfb\u7edf\u3001\u8fdb\u7a0b\u5217\u8868\u7b49\u8fd8\u662f\u548c\u5bbf\u4e3b\u673a\u9694\u79bb\u7684\u3002   container \u6a21\u5f0f   \u8fd9\u4e2a\u6a21\u5f0f\u6307\u5b9a\u65b0\u521b\u5efa\u7684\u5bb9\u5668\u548c\u5df2\u7ecf\u5b58\u5728\u7684\u4e00\u4e2a\u5bb9\u5668\u5171\u4eab\u4e00\u4e2a Network Namespace\uff0c\u800c\u4e0d\u662f\u548c\u5bbf\u4e3b\u673a\u5171\u4eab\u3002\u65b0\u521b\u5efa\u7684\u5bb9\u5668\u4e0d\u4f1a\u521b\u5efa\u81ea\u5df1\u7684\u7f51\u5361\uff0c\u914d\u7f6e\u81ea\u5df1\u7684 IP\uff0c\u800c\u662f\u548c\u4e00\u4e2a\u6307\u5b9a\u7684\u5bb9\u5668\u5171\u4eab IP\u3001\u7aef\u53e3\u8303\u56f4\u7b49\u3002\u540c\u6837\uff0c\u4e24\u4e2a\u5bb9\u5668\u9664\u4e86\u7f51\u7edc\u65b9\u9762\uff0c\u5176\u4ed6\u7684\u5982\u6587\u4ef6\u7cfb\u7edf\u3001\u8fdb\u7a0b\u5217\u8868\u7b49\u8fd8\u662f\u9694\u79bb\u7684\u3002\u4e24\u4e2a\u5bb9\u5668\u7684\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 lo \u7f51\u5361\u8bbe\u5907\u901a\u4fe1\u3002   none\u6a21\u5f0f   \u8fd9\u4e2a\u6a21\u5f0f\u548c\u524d\u4e24\u4e2a\u4e0d\u540c\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cDocker \u5bb9\u5668\u62e5\u6709\u81ea\u5df1\u7684 Network Namespace\uff0c\u4f46\u662f\uff0c\u5e76\u4e0d\u4e3a Docker\u5bb9\u5668\u8fdb\u884c\u4efb\u4f55\u7f51\u7edc\u914d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a Docker \u5bb9\u5668\u6ca1\u6709\u7f51\u5361\u3001IP\u3001\u8def\u7531\u7b49\u4fe1\u606f\u3002\u9700\u8981\u6211\u4eec\u81ea\u5df1\u4e3a Docker \u5bb9\u5668\u6dfb\u52a0\u7f51\u5361\u3001\u914d\u7f6e IP \u7b49\u3002   bridge\u6a21\u5f0f   bridge \u6a21\u5f0f\u662f Docker \u9ed8\u8ba4\u7684\u7f51\u7edc\u8bbe\u7f6e\uff0c\u6b64\u6a21\u5f0f\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5bb9\u5668\u5206\u914d Network Namespace\u3001\u8bbe\u7f6e IP \u7b49\uff0c\u5e76\u5c06\u4e00\u4e2a\u4e3b\u673a\u4e0a\u7684 Docker \u5bb9\u5668\u8fde\u63a5\u5230\u4e00\u4e2a\u865a\u62df\u7f51\u6865\u4e0a\u3002\u5f53 Docker server \u542f\u52a8\u65f6\uff0c\u4f1a\u5728\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a docker0 \u7684\u865a\u62df\u7f51\u6865\uff0c\u6b64\u4e3b\u673a\u4e0a\u542f\u52a8\u7684 Docker \u5bb9\u5668\u4f1a\u8fde\u63a5\u5230\u8fd9\u4e2a\u865a\u62df\u7f51\u6865\u4e0a\u3002\u865a\u62df\u7f51\u6865\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u7269\u7406\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u8fd9\u6837\u4e3b\u673a\u4e0a\u7684\u6240\u6709\u5bb9\u5668\u5c31\u901a\u8fc7\u4ea4\u6362\u673a\u8fde\u5728\u4e86\u4e00\u4e2a\u4e8c\u5c42\u7f51\u7edc\u4e2d\u3002\u63a5\u4e0b\u6765\u5c31\u8981\u4e3a\u5bb9\u5668\u5206\u914d IP \u4e86\uff0cDocker \u4f1a\u4ece RFC1918 \u6240\u5b9a\u4e49\u7684\u79c1\u6709 IP \u7f51\u6bb5\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u548c\u5bbf\u4e3b\u673a\u4e0d\u540c\u7684IP\u5730\u5740\u548c\u5b50\u7f51\u5206\u914d\u7ed9 docker0\uff0c\u8fde\u63a5\u5230 docker0 \u7684\u5bb9\u5668\u5c31\u4ece\u8fd9\u4e2a\u5b50\u7f51\u4e2d\u9009\u62e9\u4e00\u4e2a\u672a\u5360\u7528\u7684 IP \u4f7f\u7528\u3002\u5982\u4e00\u822c Docker \u4f1a\u4f7f\u7528 172.17.0.0/16 \u8fd9\u4e2a\u7f51\u6bb5\uff0c\u5e76\u5c06 172.17.42.1/16 \u5206\u914d\u7ed9 docker0 \u7f51\u6865\uff08\u5728\u4e3b\u673a\u4e0a\u4f7f\u7528 ifconfig \u547d\u4ee4\u662f\u53ef\u4ee5\u770b\u5230 docker0 \u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u7f51\u6865\u7684\u7ba1\u7406\u63a5\u53e3\uff0c\u5728\u5bbf\u4e3b\u673a\u4e0a\u4f5c\u4e3a\u4e00\u5757\u865a\u62df\u7f51\u5361\u4f7f\u7528\uff09   \u5217\u51fa\u5f53\u524d\u4e3b\u673a\u7f51\u6865   $ sudo brctl show  # brctl \u5de5\u5177\u4f9d\u8d56 bridge-utils \u8f6f\u4ef6\u5305\nbridge name bridge id STP enabled interfaces\ndocker0 8000.000000000000 no   \u67e5\u770b\u5f53\u524d docker0 ip   $ sudo ifconfig docker0\ndocker0 Link encap:Ethernet HWaddr xx:xx:xx:xx:xx:xx\ninet addr:172.17.42.1 Bcast:0.0.0.0 Mask:255.255.0.0  \u5728\u5bb9\u5668\u8fd0\u884c\u65f6\uff0c\u6bcf\u4e2a\u5bb9\u5668\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u7279\u5b9a\u7684\u865a\u62df\u673a\u53e3\u5e76\u6865\u63a5\u5230 docker0\u3002\u6bcf\u4e2a\u5bb9\u5668\u90fd\u4f1a\u914d\u7f6e\u540c docker0 ip \u76f8\u540c\u7f51\u6bb5\u7684\u4e13\u7528 ip \u5730\u5740\uff0cdocker0 \u7684 IP \u5730\u5740\u88ab\u7528\u4e8e\u6240\u6709\u5bb9\u5668\u7684\u9ed8\u8ba4\u7f51\u5173\u3002   \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668   $ sudo docker run -t -i -d ubuntu /bin/bash\n52f811c5d3d69edddefc75aff5a4525fc8ba8bcfa1818132f9dc7d4f7c7e78b4\n$ sudo brctl show\nbridge name bridge id STP enabled interfaces\ndocker0 8000.fef213db5a66 no vethQCDY1N  \u4ee5\u4e0a, docker0 \u626e\u6f14\u7740 52f811c5d3d6 container \u8fd9\u4e2a\u5bb9\u5668\u7684\u865a\u62df\u63a5\u53e3 vethQCDY1N interface \u6865\u63a5\u7684\u89d2\u8272\u3002  \u4f7f\u7528\u7279\u5b9a\u8303\u56f4\u7684 IP    Docker \u4f1a\u5c1d\u8bd5\u5bfb\u627e\u6ca1\u6709\u88ab\u4e3b\u673a\u4f7f\u7528\u7684 ip \u6bb5\uff0c\u5c3d\u7ba1\u5b83\u9002\u7528\u4e8e\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f46\u662f\u5b83\u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u6709\u65f6\u5019\u6211\u4eec\u8fd8\u662f\u9700\u8981\u5bf9 ip \u8fdb\u4e00\u6b65\u89c4\u5212\u3002Docker \u5141\u8bb8\u4f60\u7ba1\u7406 docker0 \u6865\u63a5\u6216\u8005\u901a\u8fc7 -b \u9009\u9879\u81ea\u5b9a\u4e49\u6865\u63a5\u7f51\u5361\uff0c\u9700\u8981\u5b89\u88c5 bridge-utils \u8f6f\u4ef6\u5305\u3002  \u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a  ensure Docker is stopped\n# \u786e\u4fdd docker \u7684\u8fdb\u7a0b\u662f\u505c\u6b62\u7684\ncreate your own bridge (bridge0 for example)\n# \u521b\u5efa\u81ea\u5b9a\u4e49\u7f51\u6865\nassign a specific IP to this bridge\n# \u7ed9\u7f51\u6865\u5206\u914d\u7279\u5b9a\u7684 ip\nstart Docker with the -b=bridge0 parameter\n# \u4ee5 -b \u7684\u65b9\u5f0f\u6307\u5b9a\u7f51\u6865  # Stopping Docker and removing docker0\n\n$ sudo service docker stop\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n\n# Create our own bridge\n\n$ sudo brctl addbr bridge0\n$ sudo ip addr add 192.168.5.1/24 dev bridge0\n$ sudo ip link set dev bridge0 up\n\n# Confirming that our bridge is up and running\n\n$ ip addr show bridge0\n4: bridge0:  BROADCAST,MULTICAST  mtu 1500 qdisc noop state UP group default\n    link/ether 66:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.5.1/24 scope global bridge0\n       valid_lft forever preferred_lft forever\n\n# Tell Docker about it and restart (on Ubuntu)\n\n$ echo 'DOCKER_OPTS= -b=bridge0 '   /etc/default/docker\n$ sudo service docker start  \u53c2\u8003\u6587\u6863\uff1ahttps://docs.docker.com/articles/networking/   \u4e0d\u540c\u4e3b\u673a\u95f4\u5bb9\u5668\u901a\u4fe1   \u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u501f\u52a9\u4e8e pipework \u8fd9\u4e2a\u5de5\u5177\uff1a  $ git clone https://github.com/jpetazzo/pipework.git\n$ sudo cp -rp pipework/pipework /usr/local/bin/  \u5b89\u88c5\u76f8\u5e94\u4f9d\u8d56\u8f6f\u4ef6  $ sudo apt-get install iputils-arping bridge-utils -y  \u6865\u63a5\u7f51\u7edc  \u6865\u63a5\u7f51\u7edc\u53ef\u4ee5\u53c2\u8003 https://github.com/opskumu/Day/blob/master/tips/tips.md \u5173\u4e8e\u6865\u63a5\u7684\u914d\u7f6e\u8bf4\u660e\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002  # brctl show\nbridge name     bridge id               STP enabled     interfaces\nbr0             8000.000c291412cd       no              eth0\ndocker0         8000.56847afe9799       no              vetheb48029  \u53ef\u4ee5\u5220\u9664 docker0\uff0c\u76f4\u63a5\u628a docker \u7684\u6865\u63a5\u6307\u5b9a\u4e3a br0\u3002\u4e5f\u53ef\u4ee5\u4fdd\u7559\u4f7f\u7528\u9ed8\u8ba4\u7684\u914d\u7f6e\uff0c\u8fd9\u6837\u5355\u4e3b\u673a\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u901a\u8fc7 docker0\uff0c\u800c\u8de8\u4e3b\u673a\u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u901a\u8fc7 pipework \u65b0\u5efa docker \u5bb9\u5668\u7684\u7f51\u5361\u6865\u63a5\u5230 br0\uff0c\u8fd9\u6837\u8de8\u4e3b\u673a\u5bb9\u5668\u4e4b\u95f4\u5c31\u53ef\u4ee5\u901a\u4fe1\u4e86\u3002    ubuntu    $ sudo service docker stop\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n$ echo 'DOCKER_OPTS= -b=br0 '   /etc/default/docker\n$ sudo service docker start    CentOS 7/RHEL 7    $ sudo systemctl stop docker\n$ sudo ip link set dev docker0 down\n$ sudo brctl delbr docker0\n$ cat /etc/sysconfig/docker | grep 'OPTIONS='\nOPTIONS=--selinux-enabled -b=br0 -H fd://\n$ sudo systemctl start docker   pipework   \u4e0d\u540c\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u53ef\u4ee5\u501f\u52a9\u4e8e pipework \u8fd9\u4e2a\u5de5\u5177\u7ed9 docker \u5bb9\u5668\u65b0\u5efa\u865a\u62df\u7f51\u5361\u5e76\u7ed1\u5b9a IP \u6865\u63a5\u5230 br0  $ git clone https://github.com/jpetazzo/pipework.git\n$ sudo cp -rp pipework/pipework /usr/local/bin/\n$ pipework \nSyntax:\npipework  hostinterface  [-i containerinterface]  guest   ipaddr / subnet [@default_gateway] [macaddr][@vlan]\npipework  hostinterface  [-i containerinterface]  guest  dhcp [macaddr][@vlan]\npipework --wait [-i containerinterface]  \u5982\u679c\u5220\u9664\u4e86\u9ed8\u8ba4\u7684 docker0 \u6865\u63a5\uff0c\u628a docker \u9ed8\u8ba4\u6865\u63a5\u6307\u5b9a\u5230\u4e86 br0\uff0c\u5219\u6700\u597d\u5728\u521b\u5efa\u5bb9\u5668\u7684\u65f6\u5019\u52a0\u4e0a --net=none\uff0c\u9632\u6b62\u81ea\u52a8\u5206\u914d\u7684 IP \u5728\u5c40\u57df\u7f51\u4e2d\u6709\u51b2\u7a81\u3002  $ sudo docker run --rm -ti --net=none ubuntu:14.04 /bin/bash\nroot@a46657528059:/#\n$                  # Ctrl-P + Ctrl-Q \u56de\u5230\u5bbf\u4e3b\u673a shell\uff0c\u5bb9\u5668 detach \u72b6\u6001\n$ sudo docker  ps\nCONTAINER ID    IMAGE          COMMAND       CREATED         STATUS          PORTS      NAMES\na46657528059    ubuntu:14.04    /bin/bash    4 minutes ago   Up 4 minutes               hungry_lalande\n$ sudo pipework br0 -i eth0 a46657528059 192.168.115.10/24@192.168.115.2 \n# \u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7f51\u5361\u8bbe\u5907\u540d\uff0c\u5219\u9ed8\u8ba4\u6dfb\u52a0\u4e3a eth1\n# \u53e6\u5916 pipework \u4e0d\u80fd\u6dfb\u52a0\u9759\u6001\u8def\u7531\uff0c\u5982\u679c\u6709\u9700\u6c42\u5219\u53ef\u4ee5\u5728 run \u7684\u65f6\u5019\u52a0\u4e0a --privileged=true \u6743\u9650\u5728\u5bb9\u5668\u4e2d\u624b\u52a8\u6dfb\u52a0\uff0c\n# \u4f46\u8fd9\u79cd\u5b89\u5168\u6027\u6709\u7f3a\u9677\uff0c\u53ef\u4ee5\u901a\u8fc7 ip netns \u64cd\u4f5c\n$ sudo docker attach a46657528059\nroot@a46657528059:/# ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 86:b6:6b:e8:2e:4d  \n          inet addr:192.168.115.10  Bcast:0.0.0.0  Mask:255.255.255.0\n          inet6 addr: fe80::84b6:6bff:fee8:2e4d/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:648 (648.0 B)  TX bytes:690 (690.0 B)\n\nroot@a46657528059:/# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.115.2   0.0.0.0         UG    0      0        0 eth0\n192.168.115.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0  \u4f7f\u7528 ip netns \u6dfb\u52a0\u9759\u6001\u8def\u7531\uff0c\u907f\u514d\u521b\u5efa\u5bb9\u5668\u4f7f\u7528 --privileged=true \u9009\u9879\u9020\u6210\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5b89\u5168\u95ee\u9898\uff1a  $ docker inspect --format= {{ .State.Pid }}  a46657528059 # \u83b7\u53d6\u6307\u5b9a\u5bb9\u5668 pid\n6350\n$ sudo ln -s /proc/6350/ns/net /var/run/netns/6350\n$ sudo ip netns exec 6350 ip route add 192.168.0.0/16 dev eth0 via 192.168.115.2\n$ sudo ip netns exec 6350 ip route    # \u6dfb\u52a0\u6210\u529f\n192.168.0.0/16 via 192.168.115.2 dev eth0 \n... ...  \u5728\u5176\u5b83\u5bbf\u4e3b\u673a\u8fdb\u884c\u76f8\u5e94\u7684\u914d\u7f6e\uff0c\u65b0\u5efa\u5bb9\u5668\u5e76\u4f7f\u7528 pipework \u6dfb\u52a0\u865a\u62df\u7f51\u5361\u6865\u63a5\u5230 br0\uff0c\u6d4b\u8bd5\u901a\u4fe1\u60c5\u51b5\u5373\u53ef\u3002  \u53e6\u5916\uff0cpipework \u53ef\u4ee5\u521b\u5efa\u5bb9\u5668\u7684 vlan \u7f51\u7edc\uff0c\u8fd9\u91cc\u4e0d\u4f5c\u8fc7\u591a\u7684\u4ecb\u7ecd\u4e86\uff0c\u5b98\u65b9\u6587\u6863\u5df2\u7ecf\u5199\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u53ef\u4ee5\u67e5\u770b\u4ee5\u4e0b\u4e24\u7bc7\u6587\u7ae0\uff1a   pipwork\u5b98\u65b9\u6587\u6863\uff1ahttps://github.com/jpetazzo/pipework  Docker \u7f51\u7edc\u8be6\u89e3\u53ca pipework \u6e90\u7801\u89e3\u8bfb\u4e0e\u5b9e\u8df5\uff1ahttp://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice", 
            "title": "Docker \u7f51\u7edc\u914d\u7f6e"
        }, 
        {
            "location": "/docker/#dockerfile", 
            "text": "Docker \u53ef\u4ee5\u901a\u8fc7 Dockerfile \u7684\u5185\u5bb9\u6765\u81ea\u52a8\u6784\u5efa\u955c\u50cf\u3002Dockerfile \u662f\u4e00\u4e2a\u5305\u542b\u521b\u5efa\u955c\u50cf\u6240\u6709\u547d\u4ee4\u7684\u6587\u672c\u6587\u4ef6\uff0c\u901a\u8fc7 docker build \u547d\u4ee4\u53ef\u4ee5\u6839\u636e Dockerfile \u7684\u5185\u5bb9\u6784\u5efa\u955c\u50cf\uff0c\u5728\u4ecb\u7ecd\u5982\u4f55\u6784\u5efa\u4e4b\u524d\u5148\u4ecb\u7ecd\u4e0b Dockerfile \u7684\u57fa\u672c\u8bed\u6cd5\u7ed3\u6784\u3002  Dockerfile \u6709\u4ee5\u4e0b\u6307\u4ee4\u9009\u9879:   FROM  MAINTAINER  RUN  CMD  EXPOSE  ENV  ADD  COPY  ENTRYPOINT  VOLUME  USER  WORKDIR   ONBUILD  FROM  \u7528\u6cd5:  FROM  image   FROM \u6307\u5b9a\u6784\u5efa\u955c\u50cf\u7684\u57fa\u7840\u6e90\u955c\u50cf\uff0c\u5982\u679c\u672c\u5730\u6ca1\u6709\u6307\u5b9a\u7684\u955c\u50cf\uff0c\u5219\u4f1a\u81ea\u52a8\u4ece Docker \u7684\u516c\u5171\u5e93 pull \u955c\u50cf\u4e0b\u6765\u3002  FROM \u5fc5\u987b\u662f Dockerfile \u4e2d\u975e\u6ce8\u91ca\u884c\u7684\u7b2c\u4e00\u4e2a\u6307\u4ee4\uff0c\u5373\u4e00\u4e2a Dockerfile \u4ece FROM \u8bed\u53e5\u5f00\u59cb\u3002  FROM \u53ef\u4ee5\u5728\u4e00\u4e2a Dockerfile \u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u5982\u679c\u6709\u9700\u6c42\u5728\u4e00\u4e2a Dockerfile \u4e2d\u521b\u5efa\u591a\u4e2a\u955c\u50cf\u3002  \u5982\u679c FROM \u8bed\u53e5\u6ca1\u6709\u6307\u5b9a\u955c\u50cf\u6807\u7b7e\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 latest \u6807\u7b7e\u3002   MAINTAINER  \u7528\u6cd5:  MAINTAINER  name  \u6307\u5b9a\u521b\u5efa\u955c\u50cf\u7684\u7528\u6237  RUN  RUN \u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f   RUN (the command is run in a shell - /bin/sh -c - shell form)  RUN [\"executable\", \"param1\", \"param2\"] (exec form)   \u6bcf\u6761 RUN \u6307\u4ee4\u5c06\u5728\u5f53\u524d\u955c\u50cf\u57fa\u7840\u4e0a\u6267\u884c\u6307\u5b9a\u547d\u4ee4\uff0c\u5e76\u63d0\u4ea4\u4e3a\u65b0\u7684\u955c\u50cf\uff0c\u540e\u7eed\u7684 RUN \u90fd\u5728\u4e4b\u524d RUN \u63d0\u4ea4\u540e\u7684\u955c\u50cf\u4e3a\u57fa\u7840\uff0c\u955c\u50cf\u662f\u5206\u5c42\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u955c\u50cf\u7684\u4efb\u4f55\u4e00\u4e2a\u5386\u53f2\u63d0\u4ea4\u70b9\u6765\u521b\u5efa\uff0c\u7c7b\u4f3c\u6e90\u7801\u7684\u7248\u672c\u63a7\u5236\u3002  exec \u65b9\u5f0f\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u6570\u7ec4\uff0c\u6240\u4ee5\u5fc5\u987b\u4f7f\u7528\u53cc\u5f15\u53f7\u800c\u4e0d\u662f\u5355\u5f15\u53f7\u3002exec \u65b9\u5f0f\u4e0d\u4f1a\u8c03\u7528\u4e00\u4e2a\u547d\u4ee4 shell\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u4f1a\u7ee7\u627f\u76f8\u5e94\u7684\u53d8\u91cf\uff0c\u5982\uff1a  RUN [ \"echo\", \"$HOME\" ]  \u8fd9\u79cd\u65b9\u5f0f\u662f\u4e0d\u4f1a\u8fbe\u5230\u8f93\u51fa HOME \u53d8\u91cf\u7684\uff0c\u6b63\u786e\u7684\u65b9\u5f0f\u5e94\u8be5\u662f\u8fd9\u6837\u7684  RUN [ \"sh\", \"-c\", \"echo\", \"$HOME\" ]  RUN \u4ea7\u751f\u7684\u7f13\u5b58\u5728\u4e0b\u4e00\u6b21\u6784\u5efa\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u5931\u6548\u7684\uff0c\u4f1a\u88ab\u91cd\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 --no-cache \u9009\u9879\uff0c\u5373 docker build --no-cache\uff0c\u5982\u6b64\u4fbf\u4e0d\u4f1a\u7f13\u5b58\u3002  CMD  CMD \u6709\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f:   CMD [\"executable\",\"param1\",\"param2\"] (exec form, this is the preferred form, \u4f18\u5148\u9009\u62e9)  CMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT)  CMD command param1 param2 (shell form)   CMD \u6307\u5b9a\u5728 Dockerfile \u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4f1a\u751f\u6548\u3002  CMD \u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u542f\u52a8\u5bb9\u5668\u65f6\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u547d\u4ee4\u6267\u884c\u9009\u9879\u3002\u5982\u679c\u7528\u6237\u542f\u52a8\u5bb9\u5668\u65f6\u6307\u5b9a\u4e86\u8fd0\u884c\u7684\u547d\u4ee4\uff0c\u5219\u4f1a\u8986\u76d6\u6389 CMD \u6307\u5b9a\u7684\u547d\u4ee4\u3002  CMD \u4f1a\u5728\u542f\u52a8\u5bb9\u5668\u7684\u65f6\u5019\u6267\u884c\uff0cbuild \u65f6\u4e0d\u6267\u884c\uff0c\u800c RUN \u53ea\u662f\u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u6267\u884c\uff0c\u540e\u7eed\u955c\u50cf\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u542f\u52a8\u5bb9\u5668\u5c31\u4e0e RUN \u65e0\u5173\u4e86\uff0c\u8fd9\u4e2a\u521d\u5b66\u8005\u5bb9\u6613\u5f04\u6df7\u8fd9\u4e2a\u6982\u5ff5\uff0c\u8fd9\u91cc\u7b80\u5355\u6ce8\u89e3\u4e00\u4e0b\u3002  EXPOSE  EXPOSE  port  [ port ...]  \u544a\u8bc9 Docker \u670d\u52a1\u7aef\u5bb9\u5668\u5bf9\u5916\u6620\u5c04\u7684\u672c\u5730\u7aef\u53e3\uff0c\u9700\u8981\u5728 docker run \u7684\u65f6\u5019\u4f7f\u7528 -p \u6216\u8005 -P \u9009\u9879\u751f\u6548\u3002  ENV  ENV  key   value        # \u53ea\u80fd\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\nENV  key = value  ...   # \u5141\u8bb8\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u53d8\u91cf  \u6307\u5b9a\u4e00\u4e2a\u73af\u8282\u53d8\u91cf\uff0c\u4f1a\u88ab\u540e\u7eed RUN \u6307\u4ee4\u4f7f\u7528\uff0c\u5e76\u5728\u5bb9\u5668\u8fd0\u884c\u65f6\u4fdd\u7559\u3002  \u4f8b\u5b50:  ENV myName=\"John Doe\" myDog=Rex\\ The\\ Dog \\\nmyCat=fluffy  \u7b49\u540c\u4e8e  ENV myName John Doe\nENV myDog Rex The Dog\nENV myCat fluffy  ADD  ADD  src ...  dest  ADD \u590d\u5236\u672c\u5730\u4e3b\u673a\u6587\u4ef6\u3001\u76ee\u5f55\u6216\u8005\u8fdc\u7a0b\u6587\u4ef6 URLS \u4ece \u5e76\u4e14\u6dfb\u52a0\u5230\u5bb9\u5668\u6307\u5b9a\u8def\u5f84\u4e2d \u3002\n\u652f\u6301\u901a\u8fc7 GO \u7684\u6b63\u5219\u6a21\u7cca\u5339\u914d\uff0c\u5177\u4f53\u89c4\u5219\u53ef\u53c2\u89c1 Go filepath.Match\uff08http://golang.org/pkg/path/filepath/#Match\uff09  ADD hom* /mydir/        # adds all files starting with \"hom\"\nADD hom?.txt /mydir/    # ? is replaced with any single character   \u8def\u5f84\u5fc5\u987b\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u5bf9\u5e94\u76ee\u5f55  \u8def\u5f84\u5fc5\u987b\u662f Dockerfile \u6240\u5728\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84  \u5982\u679c\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u53ea\u4f1a\u590d\u5236\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\uff0c\u800c\u76ee\u5f55\u672c\u8eab\u5219\u4e0d\u4f1a\u88ab\u590d\u5236   COPY  COPY  src ...  dest  COPY \u590d\u5236\u65b0\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u4ece \u5e76\u4e14\u6dfb\u52a0\u5230\u5bb9\u5668\u6307\u5b9a\u8def\u5f84\u4e2d \u3002\u7528\u6cd5\u540c ADD\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u662f\u4e0d\u80fd\u6307\u5b9a\u8fdc\u7a0b\u6587\u4ef6 URLS\u3002  ENTRYPOINT   ENTRYPOINT [\"executable\", \"param1\", \"param2\"] (the preferred exec form\uff0c\u4f18\u5148\u9009\u62e9)  ENTRYPOINT command param1 param2 (shell form)   \u914d\u7f6e\u5bb9\u5668\u542f\u52a8\u540e\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5e76\u4e14\u4e0d\u53ef\u88ab docker run \u63d0\u4f9b\u7684\u53c2\u6570\u8986\u76d6\uff0c\u800c CMD \u662f\u53ef\u4ee5\u88ab\u8986\u76d6\u7684\u3002\u5982\u679c\u9700\u8981\u8986\u76d6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 docker run --entrypoint \u9009\u9879\u3002  \u6bcf\u4e2a Dockerfile \u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a ENTRYPOINT\uff0c\u5f53\u6307\u5b9a\u591a\u4e2a\u65f6\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u751f\u6548\u3002  Exec form ENTRYPOINT \u4f8b\u5b50\uff1a  \u901a\u8fc7 ENTRYPOINT \u4f7f\u7528 exec form \u65b9\u5f0f\u8bbe\u7f6e\u7a33\u5b9a\u7684\u9ed8\u8ba4\u547d\u4ee4\u548c\u9009\u9879\uff0c\u800c\u4f7f\u7528 CMD \u6dfb\u52a0\u9ed8\u8ba4\u4e4b\u5916\u7ecf\u5e38\u88ab\u6539\u52a8\u7684\u9009\u9879\u3002  FROM ubuntu\nENTRYPOINT [\"top\", \"-b\"]\nCMD [\"-c\"]  \u901a\u8fc7 Dockerfile \u4f7f\u7528 ENTRYPOINT \u5c55\u793a\u524d\u53f0\u8fd0\u884c Apache \u670d\u52a1  FROM debian:stable\nRUN apt-get update   apt-get install -y --force-yes apache2\nEXPOSE 80 443\nVOLUME [\"/var/www\", \"/var/log/apache2\", \"/etc/apache2\"]\nENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]  Shell form ENTRYPOINT \u4f8b\u5b50:  \u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5728 /bin/sh -c \u4e2d\u6267\u884c\uff0c\u4f1a\u5ffd\u7565\u4efb\u4f55 CMD \u6216\u8005 docker run \u547d\u4ee4\u884c\u9009\u9879\uff0c\u4e3a\u4e86\u786e\u4fdd docker stop \u80fd\u591f\u505c\u6b62\u957f\u65f6\u95f4\u8fd0\u884c ENTRYPOINT \u7684\u5bb9\u5668\uff0c\u786e\u4fdd\u6267\u884c\u7684\u65f6\u5019\u4f7f\u7528 exec \u9009\u9879\u3002  FROM ubuntu\nENTRYPOINT exec top -b  \u5982\u679c\u5728 ENTRYPOINT \u5fd8\u8bb0\u4f7f\u7528 exec \u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 CMD \u8865\u4e0a:  FROM ubuntu\nENTRYPOINT top -b\nCMD --ignored-param1 # --ignored-param2 ... --ignored-param3 ... \u4f9d\u6b64\u7c7b\u63a8  VOLUME  VOLUME [\"/data\"]  \u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u4ece\u672c\u5730\u4e3b\u673a\u6216\u5176\u4ed6\u5bb9\u5668\u6302\u8f7d\u7684\u6302\u8f7d\u70b9\uff0c\u540e\u7eed\u5177\u4f53\u4ecb\u7ecd\u3002  USER  USER daemon  \u6307\u5b9a\u8fd0\u884c\u5bb9\u5668\u65f6\u7684\u7528\u6237\u540d\u6216 UID\uff0c\u540e\u7eed\u7684 RUN\u3001CMD\u3001ENTRYPOINT \u4e5f\u4f1a\u4f7f\u7528\u6307\u5b9a\u7528\u6237\u3002  WORKDIR  WORKDIR /path/to/workdir  \u4e3a\u540e\u7eed\u7684 RUN\u3001CMD\u3001ENTRYPOINT \u6307\u4ee4\u914d\u7f6e\u5de5\u4f5c\u76ee\u5f55\u3002\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a WORKDIR \u6307\u4ee4\uff0c\u540e\u7eed\u547d\u4ee4\u5982\u679c\u53c2\u6570\u662f\u76f8\u5bf9\u8def\u5f84\uff0c\u5219\u4f1a\u57fa\u4e8e\u4e4b\u524d\u547d\u4ee4\u6307\u5b9a\u7684\u8def\u5f84\u3002  WORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN pwd  \u6700\u7ec8\u8def\u5f84\u662f /a/b/c\u3002  WORKDIR \u6307\u4ee4\u53ef\u4ee5\u5728 ENV \u8bbe\u7f6e\u53d8\u91cf\u4e4b\u540e\u8c03\u7528\u73af\u5883\u53d8\u91cf:  ENV DIRPATH /path\nWORKDIR $DIRPATH/$DIRNAME  \u6700\u7ec8\u8def\u5f84\u5219\u4e3a /path/$DIRNAME\u3002  ONBUILD  ONBUILD [INSTRUCTION]  \u914d\u7f6e\u5f53\u6240\u521b\u5efa\u7684\u955c\u50cf\u4f5c\u4e3a\u5176\u5b83\u65b0\u521b\u5efa\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u65f6\uff0c\u6240\u6267\u884c\u7684\u64cd\u4f5c\u6307\u4ee4\u3002  \u4f8b\u5982\uff0cDockerfile \u4f7f\u7528\u5982\u4e0b\u7684\u5185\u5bb9\u521b\u5efa\u4e86\u955c\u50cf image-A\uff1a  [...]\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n[...]  \u5982\u679c\u57fa\u4e8e image-A \u521b\u5efa\u65b0\u7684\u955c\u50cf\u65f6\uff0c\u65b0\u7684 Dockerfile \u4e2d\u4f7f\u7528 FROM image-A \u6307\u5b9a\u57fa\u7840\u955c\u50cf\u65f6\uff0c\u4f1a\u81ea\u52a8\u6267\u884c ONBUILD \u6307\u4ee4\u5185\u5bb9\uff0c\u7b49\u4ef7\u4e8e\u5728\u540e\u9762\u6dfb\u52a0\u4e86\u4e24\u6761\u6307\u4ee4\u3002  ADD . /app/src\nRUN /usr/local/bin/python-build --dir /app/src`  \u4f7f\u7528 ONBUILD \u6307\u4ee4\u7684\u955c\u50cf\uff0c\u63a8\u8350\u5728\u6807\u7b7e\u4e2d\u6ce8\u660e\uff0c\u4f8b\u5982 ruby:1.9-onbuild\u3002  Dockerfile Examples    # Nginx\n#\n# VERSION               0.0.1\n\nFROM      ubuntu\nMAINTAINER Victor Vieux  victor@docker.com \n\nRUN apt-get update   apt-get install -y inotify-tools nginx apache2 openssh-server\n\n# Firefox over VNC\n#\n# VERSION               0.3\n\nFROM ubuntu\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\nRUN apt-get update   apt-get install -y x11vnc xvfb firefox\nRUN mkdir ~/.vnc\n# Setup a password\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n# Autostart firefox (might not be the best way, but it does the trick)\nRUN bash -c 'echo  firefox    /.bashrc'\n\nEXPOSE 5900\nCMD    [ x11vnc ,  -forever ,  -usepw ,  -create ]\n\n# Multiple images example\n#\n# VERSION               0.1\n\nFROM ubuntu\nRUN echo foo   bar\n# Will output something like ===  907ad6c2736f\n\nFROM ubuntu\nRUN echo moo   oink\n# Will output something like ===  695d7793cbe4\n\n# You\u1fbfll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with\n# /oink.  docker build\n\n$ docker build --help\n\nUsage: docker build [OPTIONS] PATH | URL | -\n\nBuild a new image from the source code at PATH\n\n  --force-rm=false     Always remove intermediate containers, even after unsuccessful builds # \u79fb\u9664\u8fc7\u6e21\u5bb9\u5668\uff0c\u5373\u4f7f\u6784\u5efa\u5931\u8d25\n  --no-cache=false     Do not use cache when building the image                              # \u4e0d\u5b9e\u7528 cache        \n  -q, --quiet=false    Suppress the verbose output generated by the containers               \n  --rm=true            Remove intermediate containers after a successful build               # \u6784\u5efa\u6210\u529f\u540e\u79fb\u9664\u8fc7\u6e21\u5c42\u5bb9\u5668\n  -t, --tag=          Repository name (and optionally a tag) to be applied to the resulting image in case of success\n\n  \u53c2\u8003\u6587\u6863:https://docs.docker.com/reference/builder/  Dockerfile \u6307\u4ee4\nFROM: \u53ea\u8981\u53ef\u80fd\u5c31\u4f7f\u7528\u5b98\u65b9\u955c\u50cf\u5e93\u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\nRUN: \u4e3a\u4fdd\u6301\u53ef\u8bfb\u6027\u3001\u65b9\u4fbf\u7406\u89e3\u3001\u53ef\u7ef4\u62a4\u6027\uff0c\u628a\u957f\u6216\u8005\u590d\u6742\u7684 RUN \u8bed\u53e5\u4f7f\u7528 \\ \u5206\u9694\u7b26\u5206\u6210\u591a\u884c\n\u4e0d\u5efa\u8bae RUN apt-get update \u72ec\u7acb\u6210\u884c\uff0c\u5426\u5219\u5982\u679c\u540e\u7eed\u5305\u6709\u66f4\u65b0\uff0c\u90a3\u4e48\u4e5f\u4e0d\u4f1a\u518d\u6267\u884c\u66f4\u65b0\n\u907f\u514d\u4f7f\u7528 RUN apt-get upgrade \u6216\u8005 dist-upgrade\uff0c\u5f88\u591a\u5fc5\u8981\u7684\u5305\u5728\u4e00\u4e2a\u975e privileged \u6743\u9650\u7684\u5bb9\u5668\u91cc\u662f\u65e0\u6cd5\u5347\u7ea7\u7684\u3002\u5982\u679c\u77e5\u9053\u67d0\u4e2a\u5305\u66f4\u65b0\uff0c\u4f7f\u7528 apt-get install -y xxx\n\u6807\u51c6\u5199\u6cd5\nRUN apt-get update   apt-get install -y package-bar package-foo\n\n\u4f8b\u5b50\uff1a\nRUN apt-get update   apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    btrfs-tools \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    git \\\n    iptables \\\n    libapparmor-dev \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    lxc=1.0* \\\n    mercurial \\\n    parallel \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.0*\n\n    CMD: \u63a8\u8350\u4f7f\u7528 CMD [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d\u2026] \u8fd9\u79cd\u683c\u5f0f\uff0cCMD [\u201cparam\u201d, \u201cparam\u201d] \u5219\u914d\u5408 ENTRYPOINT \u4f7f\u7528\n    EXPOSE: Dockerfile \u6307\u5b9a\u8981\u516c\u5f00\u7684\u7aef\u53e3\uff0c\u4f7f\u7528 docker run \u65f6\u6307\u5b9a\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u7684\u7aef\u53e3\u5373\u53ef\n    ENV: \u4e3a\u4e86\u4f7f\u65b0\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u8fd0\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 ENV \u66f4\u65b0 PATH \u53d8\u91cf\u3002\u5982 ENV PATH /usr/local/nginx/bin:$PATH \u786e\u4fdd CMD [ nginx ] \u5373\u53ef\u8fd0\u884c\n\n    ENV \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u53d8\u91cf\uff1a\n\n    ENV PG_MAJOR 9.3\n    ENV PG_VERSION 9.3.4\n| tar -xJC /usr/src/postgress   \u2026 |\n    ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n\n    ADD or COPY: ADD \u6bd4 COPY \u591a\u4e00\u4e9b\u7279\u6027\u300ctar \u6587\u4ef6\u81ea\u52a8\u89e3\u5305\u548c\u652f\u6301\u8fdc\u7a0b URL\u300d\uff0c\u4e0d\u63a8\u8350\u6dfb\u52a0\u8fdc\u7a0b URL\n\n    \u5982\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f:\n    ADD http://example.com/big.tar.xz /usr/src/things/\n    RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things\n    RUN make -C /usr/src/things all\n\n    \u63a8\u8350\u4f7f\u7528 curl \u6216\u8005 wget \u66ff\u6362\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f:\n    UN mkdir -p /usr/src/things \\\n      curl -SL http://example.com/big.tar.gz \\\n    | tar -xJC /usr/src/things \\\n      make -C /usr/src/things all\n\n    \u5982\u679c\u4e0d\u9700\u8981\u6dfb\u52a0 tar \u6587\u4ef6\uff0c\u63a8\u8350\u4f7f\u7528 COPY\u3002", 
            "title": "Dockerfile"
        }, 
        {
            "location": "/docker/#_1", 
            "text": "https://dashboard.daocloud.io", 
            "title": "\u955c\u50cf\u52a0\u901f"
        }, 
        {
            "location": "/mysql-docker/", 
            "text": "/mysql/mysql-server\u955c\u50cf\n\n\n\u542f\u52a8\u540e\uff1adocker run --name mysql -e MYSQL_ROOT_PASSWORD=123456   -d -p 3306:3306  mysql/mysql-server:latest\n\n\n\u672c\u5730telnet\u662f\u4e0d\u901a\u7684\u3002\n\n\n\u8fd9\u4e2a\u65f6\u5019\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n\ndocker exec -it mysql mysql -uroot -p\n\n\nUSE mysql;CREATE USER 'root'@'%' IDENTIFIED BY '\u5bc6\u7801';GRANT ALL PRIVILEGES ON . TO 'root'@'%';FLUSH PRIVILEGES;\n\n\n\u4ee5\u4e0a\u4e24\u6b65\u64cd\u4f5c\u5373\u53ef\u3002\n\n\nmysql\u521b\u5efadocker\u955c\u50cf\n\n\nDockerfile\n\n\nFROM mysql:latest\n\nMAINTAINER  braveheart \nzhangjunheling@163.com\n\nLABEL Descripttion=\nThis image is build for MAC to use mysql\n Vendor=\nGitHub\n Version=\nlatest\n\nRUN apt-get update\nRUN apt-get -y install vim\nRUN usermod -u 1000 mysql\nRUN mkdir -p /var/run/mysqld\nRUN chmod -R 777 /var/run/mysqld\n\n\n\n\n\u6267\u884c\u547d\u4ee4\uff1a\n\n\ndocker build -t zhangjun05/mysql .\n\n\n\n\n\u542f\u52a8docker\u547d\u4ee4\n\n\ndocker run -p 3309:3306 -v /Users/junzhang/data/mysqldata/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d --name mysql zhangjun05/mysql", 
            "title": "docker-mysql"
        }, 
        {
            "location": "/mysql-docker/#mysqlmysql-server", 
            "text": "\u542f\u52a8\u540e\uff1adocker run --name mysql -e MYSQL_ROOT_PASSWORD=123456   -d -p 3306:3306  mysql/mysql-server:latest  \u672c\u5730telnet\u662f\u4e0d\u901a\u7684\u3002  \u8fd9\u4e2a\u65f6\u5019\u5982\u4e0b\u64cd\u4f5c\uff1a  docker exec -it mysql mysql -uroot -p  USE mysql;CREATE USER 'root'@'%' IDENTIFIED BY '\u5bc6\u7801';GRANT ALL PRIVILEGES ON . TO 'root'@'%';FLUSH PRIVILEGES;  \u4ee5\u4e0a\u4e24\u6b65\u64cd\u4f5c\u5373\u53ef\u3002", 
            "title": "/mysql/mysql-server\u955c\u50cf"
        }, 
        {
            "location": "/mysql-docker/#mysqldocker", 
            "text": "Dockerfile  FROM mysql:latest\n\nMAINTAINER  braveheart  zhangjunheling@163.com \nLABEL Descripttion= This image is build for MAC to use mysql  Vendor= GitHub  Version= latest \nRUN apt-get update\nRUN apt-get -y install vim\nRUN usermod -u 1000 mysql\nRUN mkdir -p /var/run/mysqld\nRUN chmod -R 777 /var/run/mysqld  \u6267\u884c\u547d\u4ee4\uff1a  docker build -t zhangjun05/mysql .  \u542f\u52a8docker\u547d\u4ee4  docker run -p 3309:3306 -v /Users/junzhang/data/mysqldata/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d --name mysql zhangjun05/mysql", 
            "title": "mysql\u521b\u5efadocker\u955c\u50cf"
        }, 
        {
            "location": "/nginx/", 
            "text": "docker \u90e8\u7f72nginx\n\n\n\u5728Docker\u4e0b\u90e8\u7f72Nginx\uff0c\u5305\u62ec\uff1a\n\n\n\n\n\u90e8\u7f72\u4e00\u4e2a\u6700\u7b80\u5355\u7684Nginx\uff0c\u53ef\u4ee5\u901a\u8fc780\u7aef\u53e3\u8bbf\u95ee\u9ed8\u8ba4\u7684\u7f51\u7ad9\n\n\n\u8bbe\u7f6e\u8bb0\u5f55\u8bbf\u95ee\u548c\u9519\u8bef\u65e5\u5fd7\u7684\u8def\u5f84\n\n\n\u8bbe\u7f6e\u9759\u6001\u7f51\u7ad9\u7684\u8def\u5f84\n\n\n\u901a\u8fc7proxy_pass\u5c06HTTP\u8bf7\u6c42\u53cd\u5411\u4ee3\u7406\u5230nodejs Web App\n\n\n\u8bbe\u7f6eHTTPS\n\n\n\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u5b89\u88c5Docker\u73af\u5883\uff0c\u53ef\u53c2\u8003\u5728\nDocker\u4e2d\u8fd0\u884cNode.js\u7684Web\u5e94\u7528\n\u3002\n\n\n\n\n\u6700\u7b80\u5355\u7684\u547d\u4ee4\uff0c\u8ba9Nginx\u8dd1\u8d77\u6765\n\n\n$ sudo docker run -it -p 80:80 dockerfile/nginx\n\n\n\n\n\u5982\u679c\u662f\u7b2c\u4e00\u6b21\uff0c\u4e0b\u8f7dnginx\u955c\u50cf\u9700\u8981\u70b9\u65f6\u95f4\u3002\n\n\n\u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u6839\u636e\u5730\u5740\u8bbf\u95ee\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7f51\u9875\uff0c\u8bf4\u660eNginx\u6210\u529f\u8dd1\u8d77\u6765\u4e86\u3002\n\n\n\u8bbe\u7f6e\u8bb0\u5f55\u8bbf\u95ee\u548c\u9519\u8bef\u65e5\u5fd7\n\n\nNginx\u67092\u4e2a\u65e5\u5fd7\uff1a\n\n\n\n\naccess.log\uff0c\u8bb0\u5f55\u6bcf\u4e2aHTTP\u8bf7\u6c42\u4fe1\u606f\n\n\nerror.log\uff0c\u8bb0\u5f55Nginx\u8fd0\u884c\u4e2d\u7684\u9519\u8bef\uff0c\u7528\u4e8e\u6392\u9519\n\n\n\n\n$ sudo docker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx dockerfile/nginx\n\n\n\n\n\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efalogs\u76ee\u5f55\uff0c\u5b58\u653eaccess.log\u548cerror.log\u3002\n\n\n\u8bbe\u7f6e\u9759\u6001\u7f51\u7ad9\u8def\u5f84\n\n\n\u9700\u8981\u521b\u5efa\u76ee\u5f55\uff1a\n\n\n1\u3001config\uff0c\u76ee\u5f55\u4e0b\u653e\u4e00\u4e2a\u6587\u4ef6\uff0c\u540d\u4e3aserver\uff0cNginx\u9759\u6001\u7f51\u7ad9\u914d\u7f6e\u6587\u4ef6\n\n\n2\u3001www\uff0c\u76ee\u5f55\u4e0b\u653ehtml\u6587\u4ef6\uff0c\u6bd4\u5982index.htm\n\n\nserver\u6587\u4ef6\uff1a\n\n\nserver {\n        listen 80;\n\n        root /www;\n        index index.html index.htm;\n\n        server_name localhost;\n}\n\n\n\n\n\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\nsudo docker run -it -p 80:80 -v `pwd`/www:/www -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx\n\n\n\n\n\u6216\u8005\u5982\u4e0b\u547d\u4ee4\uff1a\n\n\ndocker run -d -p 80:80 -v /Users/junzhang/data/nginx/logs/:/var/log/nginx/ -v /Users/junzhang/data/nginx/html/:/www --name nginx1 nginx\n\n\n\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\n\n\n-vpwd/www:/www\uff0c\u5c06\u5f53\u524d\u8def\u5f84\u4e0b\u7684www\u76ee\u5f55\u8bbe\u7f6e\u4e3a/www\uff0c\u548cserver\u914d\u7f6e\u7684\u8def\u5f84\u5bf9\u5e94\n-vpwd/config:/etc/nginx/sites-enabled\uff0cserver\u6587\u4ef6\u7684\u672c\u5730\u8def\u5f84\uff0c\u6620\u5c04\u5230docker\u5bb9\u5668\u7684nginx\u914d\u7f6e\u8def\u5f84\n\n\n\n\n\u8bbe\u7f6e\u53cd\u5411\u4ee3\u7406\u5230Nodejs Web App\n\n\n\u9700\u8981\u5148\u80fd\u5c06Nodejs\u7684\u5bb9\u5668\u8dd1\u8d77\u6765\uff0c\u7136\u540e\u518d\u8003\u8651\u600e\u6837\u901a\u8fc7Nginx\u7684\u53cd\u5411\u4ee3\u7406\u3002\n\n\n\u53ef\u53c2\u89c1\n\u5728Docker\u4e2d\u8fd0\u884cNode.js\u7684Web\u5e94\u7528\n\n\n\u5047\u8bbe\u6211\u6709\u4e2aexpress.js\u9879\u76ee\uff0c\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u7684webapp\u76ee\u5f55\u4e2d\uff0c\u4f7f\u7528docker\u547d\u4ee4\u7c7b\u4f3c\u8fd9\u6837\uff1a\n\n\nsudo docker run -d -p 3000:3000 --name ProtoWebApp -v `pwd`/webapp:/webapp -w /webapp  node npm start\n\n\n\n\n\u7136\u540e\uff0c\u5c06\u524d\u9762\u4f8b\u5b50\u4e2dconfig\u76ee\u5f55\u4e0b\u7684server\u6587\u4ef6\u505a\u70b9\u6539\u52a8\uff1a\n\n\nserver {\n        listen 80;\n\n        #root /www;\n        #index index.html index.htm;\n\n        server_name localhost;\n\n        location / {\n                proxy_pass  http://localhost:3000;\n        }\n}\n\n\n\n\n\u4e4b\u540e\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5c06nginx\u8dd1\u8d77\u6765\uff1a\n\n\nsudo docker run -it -p 80:80 --link ProtoWebApp:localhost -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx\n\n\n\n\n\u8bbe\u7f6eHTTPS\n\n\u53ea\u9700\u5728\u8fd0\u884cnginx\u5bb9\u5668\u7684\u65f6\u5019\u8bbe\u7f6eSSL\u7684\u8def\u5f84\uff1a-v \n:/etc/nginx/certs\u3002\n\n\n\u5f53\u7136\uff0cnginx\u9996\u5148\u8981\u8bbe\u7f6e\uff0c\u53c2\u89c1\n\u914d\u7f6eHTTPS\u670d\u52a1\u5668", 
            "title": "docker-nginx"
        }, 
        {
            "location": "/nginx/#docker-nginx", 
            "text": "\u5728Docker\u4e0b\u90e8\u7f72Nginx\uff0c\u5305\u62ec\uff1a   \u90e8\u7f72\u4e00\u4e2a\u6700\u7b80\u5355\u7684Nginx\uff0c\u53ef\u4ee5\u901a\u8fc780\u7aef\u53e3\u8bbf\u95ee\u9ed8\u8ba4\u7684\u7f51\u7ad9  \u8bbe\u7f6e\u8bb0\u5f55\u8bbf\u95ee\u548c\u9519\u8bef\u65e5\u5fd7\u7684\u8def\u5f84  \u8bbe\u7f6e\u9759\u6001\u7f51\u7ad9\u7684\u8def\u5f84  \u901a\u8fc7proxy_pass\u5c06HTTP\u8bf7\u6c42\u53cd\u5411\u4ee3\u7406\u5230nodejs Web App  \u8bbe\u7f6eHTTPS  \u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u5b89\u88c5Docker\u73af\u5883\uff0c\u53ef\u53c2\u8003\u5728 Docker\u4e2d\u8fd0\u884cNode.js\u7684Web\u5e94\u7528 \u3002   \u6700\u7b80\u5355\u7684\u547d\u4ee4\uff0c\u8ba9Nginx\u8dd1\u8d77\u6765  $ sudo docker run -it -p 80:80 dockerfile/nginx  \u5982\u679c\u662f\u7b2c\u4e00\u6b21\uff0c\u4e0b\u8f7dnginx\u955c\u50cf\u9700\u8981\u70b9\u65f6\u95f4\u3002  \u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u6839\u636e\u5730\u5740\u8bbf\u95ee\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7f51\u9875\uff0c\u8bf4\u660eNginx\u6210\u529f\u8dd1\u8d77\u6765\u4e86\u3002  \u8bbe\u7f6e\u8bb0\u5f55\u8bbf\u95ee\u548c\u9519\u8bef\u65e5\u5fd7  Nginx\u67092\u4e2a\u65e5\u5fd7\uff1a   access.log\uff0c\u8bb0\u5f55\u6bcf\u4e2aHTTP\u8bf7\u6c42\u4fe1\u606f  error.log\uff0c\u8bb0\u5f55Nginx\u8fd0\u884c\u4e2d\u7684\u9519\u8bef\uff0c\u7528\u4e8e\u6392\u9519   $ sudo docker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx dockerfile/nginx  \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efalogs\u76ee\u5f55\uff0c\u5b58\u653eaccess.log\u548cerror.log\u3002  \u8bbe\u7f6e\u9759\u6001\u7f51\u7ad9\u8def\u5f84  \u9700\u8981\u521b\u5efa\u76ee\u5f55\uff1a  1\u3001config\uff0c\u76ee\u5f55\u4e0b\u653e\u4e00\u4e2a\u6587\u4ef6\uff0c\u540d\u4e3aserver\uff0cNginx\u9759\u6001\u7f51\u7ad9\u914d\u7f6e\u6587\u4ef6  2\u3001www\uff0c\u76ee\u5f55\u4e0b\u653ehtml\u6587\u4ef6\uff0c\u6bd4\u5982index.htm  server\u6587\u4ef6\uff1a  server {\n        listen 80;\n\n        root /www;\n        index index.html index.htm;\n\n        server_name localhost;\n}  \u547d\u4ee4\u5982\u4e0b\uff1a  sudo docker run -it -p 80:80 -v `pwd`/www:/www -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx  \u6216\u8005\u5982\u4e0b\u547d\u4ee4\uff1a  docker run -d -p 80:80 -v /Users/junzhang/data/nginx/logs/:/var/log/nginx/ -v /Users/junzhang/data/nginx/html/:/www --name nginx1 nginx  \u89e3\u91ca\u4e00\u4e0b\uff1a  -vpwd/www:/www\uff0c\u5c06\u5f53\u524d\u8def\u5f84\u4e0b\u7684www\u76ee\u5f55\u8bbe\u7f6e\u4e3a/www\uff0c\u548cserver\u914d\u7f6e\u7684\u8def\u5f84\u5bf9\u5e94\n-vpwd/config:/etc/nginx/sites-enabled\uff0cserver\u6587\u4ef6\u7684\u672c\u5730\u8def\u5f84\uff0c\u6620\u5c04\u5230docker\u5bb9\u5668\u7684nginx\u914d\u7f6e\u8def\u5f84  \u8bbe\u7f6e\u53cd\u5411\u4ee3\u7406\u5230Nodejs Web App  \u9700\u8981\u5148\u80fd\u5c06Nodejs\u7684\u5bb9\u5668\u8dd1\u8d77\u6765\uff0c\u7136\u540e\u518d\u8003\u8651\u600e\u6837\u901a\u8fc7Nginx\u7684\u53cd\u5411\u4ee3\u7406\u3002  \u53ef\u53c2\u89c1 \u5728Docker\u4e2d\u8fd0\u884cNode.js\u7684Web\u5e94\u7528  \u5047\u8bbe\u6211\u6709\u4e2aexpress.js\u9879\u76ee\uff0c\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u7684webapp\u76ee\u5f55\u4e2d\uff0c\u4f7f\u7528docker\u547d\u4ee4\u7c7b\u4f3c\u8fd9\u6837\uff1a  sudo docker run -d -p 3000:3000 --name ProtoWebApp -v `pwd`/webapp:/webapp -w /webapp  node npm start  \u7136\u540e\uff0c\u5c06\u524d\u9762\u4f8b\u5b50\u4e2dconfig\u76ee\u5f55\u4e0b\u7684server\u6587\u4ef6\u505a\u70b9\u6539\u52a8\uff1a  server {\n        listen 80;\n\n        #root /www;\n        #index index.html index.htm;\n\n        server_name localhost;\n\n        location / {\n                proxy_pass  http://localhost:3000;\n        }\n}  \u4e4b\u540e\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5c06nginx\u8dd1\u8d77\u6765\uff1a  sudo docker run -it -p 80:80 --link ProtoWebApp:localhost -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx  \u8bbe\u7f6eHTTPS \n\u53ea\u9700\u5728\u8fd0\u884cnginx\u5bb9\u5668\u7684\u65f6\u5019\u8bbe\u7f6eSSL\u7684\u8def\u5f84\uff1a-v  :/etc/nginx/certs\u3002  \u5f53\u7136\uff0cnginx\u9996\u5148\u8981\u8bbe\u7f6e\uff0c\u53c2\u89c1 \u914d\u7f6eHTTPS\u670d\u52a1\u5668", 
            "title": "docker \u90e8\u7f72nginx"
        }, 
        {
            "location": "/docker0/", 
            "text": "\u4fee\u6539docker0\u7f51\u6865\n\n\nDocker\u9ed8\u8ba4\u4f7f\u7528\u7684\u7f51\u6865 docker0 \u7684\u7f51\u6bb5\u662f 172.17.0.1\u3002\u5982\u679c\u60f3\u4fee\u6539\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\uff1a\n\n\n\u7b2c\u4e00\u6b65 \u5220\u9664\u539f\u6709\u914d\u7f6e\n\n\nsudo service docker stop\nsudo ip link set dev docker0 down\nsudo brctl delbr docker0\nsudo iptables -t nat -F POSTROUTING\n\n\n\n\n\u7b2c\u4e8c\u6b65 \u521b\u5efa\u65b0\u7684\u7f51\u6865\n\n\nsudo brctl addbr docker0\nsudo ip addr add 192.168.200.1/24 dev docker0\nsudo ip link set dev docker0 up\n\n\n\n\n\u7b2c\u4e09\u6b65 \u914d\u7f6eDocker\u7684\u6587\u4ef6\n\n\n\u6ce8\u610f\uff1a \u8fd9\u91cc\u662f \u589e\u52a0\u4e0b\u9762\u7684\u914d\u7f6e\n\n\nvi /etc/docker/daemon.json\n{\n    ...\n    \nbip\n: \n192.168.200.1/24\n,\n    ...\n}\n\n\n\n\ndocker\u7684\u914d\u7f6e\u73b0\u5728\u90fd\u662f\u7528daemon.json\u4e86\uff0c\u4e0d\u9700\u8981\u53bb\u8bbe\u7f6eDOCKER_OPTS, \u6240\u4ee5\u7f51\u7edc\u4e0a\u5f88\u591a\u7684\u8d44\u6599\u65e9\u5df2\u8fc7\u65f6\u3002\n\n\n\u7b2c\u56db\u6b65 \u91cd\u542f\u4e3b\u673a\n\n\nsudo reboot", 
            "title": "\u4fee\u6539docker0"
        }, 
        {
            "location": "/docker0/#docker0", 
            "text": "Docker\u9ed8\u8ba4\u4f7f\u7528\u7684\u7f51\u6865 docker0 \u7684\u7f51\u6bb5\u662f 172.17.0.1\u3002\u5982\u679c\u60f3\u4fee\u6539\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\uff1a  \u7b2c\u4e00\u6b65 \u5220\u9664\u539f\u6709\u914d\u7f6e  sudo service docker stop\nsudo ip link set dev docker0 down\nsudo brctl delbr docker0\nsudo iptables -t nat -F POSTROUTING  \u7b2c\u4e8c\u6b65 \u521b\u5efa\u65b0\u7684\u7f51\u6865  sudo brctl addbr docker0\nsudo ip addr add 192.168.200.1/24 dev docker0\nsudo ip link set dev docker0 up  \u7b2c\u4e09\u6b65 \u914d\u7f6eDocker\u7684\u6587\u4ef6  \u6ce8\u610f\uff1a \u8fd9\u91cc\u662f \u589e\u52a0\u4e0b\u9762\u7684\u914d\u7f6e  vi /etc/docker/daemon.json\n{\n    ...\n     bip :  192.168.200.1/24 ,\n    ...\n}  docker\u7684\u914d\u7f6e\u73b0\u5728\u90fd\u662f\u7528daemon.json\u4e86\uff0c\u4e0d\u9700\u8981\u53bb\u8bbe\u7f6eDOCKER_OPTS, \u6240\u4ee5\u7f51\u7edc\u4e0a\u5f88\u591a\u7684\u8d44\u6599\u65e9\u5df2\u8fc7\u65f6\u3002  \u7b2c\u56db\u6b65 \u91cd\u542f\u4e3b\u673a  sudo reboot", 
            "title": "\u4fee\u6539docker0\u7f51\u6865"
        }, 
        {
            "location": "/thread/", 
            "text": "exchanger\n\n\nExchanger\u53ef\u4ee5\u5728\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u4ea4\u6362\u6570\u636e\uff0c\u53ea\u80fd\u662f2\u4e2a\u7ebf\u7a0b\uff0c\u4ed6\u4e0d\u652f\u6301\u66f4\u591a\u7684\u7ebf\u7a0b\u4e4b\u95f4\u4e92\u6362\u6570\u636e\u3002\n\n\n\u5f53\u7ebf\u7a0bA\u8c03\u7528Exchange\u5bf9\u8c61\u7684exchange()\u65b9\u6cd5\u540e\uff0c\u4ed6\u4f1a\u9677\u5165\u963b\u585e\u72b6\u6001\uff0c\u76f4\u5230\u7ebf\u7a0bB\u4e5f\u8c03\u7528\u4e86exchange()\u65b9\u6cd5\uff0c\u7136\u540e\u4ee5\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u4ea4\u6362\u6570\u636e\uff0c\u4e4b\u540e\u7ebf\u7a0bA\u548cB\u7ee7\u7eed\u8fd0\u884c\n\n\npackage com.java.exchanger;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.Exchanger;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by junzhang on 2017/4/7.\n */\npublic class ExchangerTest {\n    public static void main(String[] args) {\n        ExchangerTest exchangerTest = new ExchangerTest();\n        Exchanger\nList\nInteger\n exchanger = new Exchanger\n();\n        exchangerTest.new E_Consumer(exchanger).start();\n        exchangerTest.new E_Producer(exchanger).start();\n    }\n\n\n    class E_Producer extends Thread {\n        List\nInteger\n list = new ArrayList\nInteger\n();\n        Exchanger\nList\nInteger\n exchanger = null;\n\n        public E_Producer(Exchanger\nList\nInteger\n exchanger) {\n            this.exchanger = exchanger;\n        }\n\n        @Override\n        public void run() {\n            Random rand = new Random();\n            for(int i=0; i\n10; i++) {\n                list.clear();\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                try {\n                    list = exchanger.exchange(list);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n\n        }\n    }\n\n    class E_Consumer extends Thread{\n        List\nInteger\n list = new ArrayList\n();\n        Exchanger\nList\nInteger\n exchanger = null;\n        public E_Consumer(Exchanger\nList\nInteger\n exchanger) {\n            super();\n            this.exchanger = exchanger;\n        }\n        @Override\n        public void run() {\n            for(int i=0; i\n10; i++) {\n                try {\n                    list = exchanger.exchange(list);\n                    TimeUnit.SECONDS.sleep(2);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n                System.out.print(list.get(0)+\n, \n);\n                System.out.print(list.get(1)+\n, \n);\n                System.out.print(list.get(2)+\n, \n);\n                System.out.print(list.get(3)+\n, \n);\n                System.out.println(list.get(4)+\n, \n);\n            }\n        }\n    }\n\n}\n\n\n\n\n\nDelayQueue\n\n\n\u8fd9\u662f\u4e00\u4e2a\u65e0\u754c\u7684BlockingQueue,\u7528\u4e8e\u653e\u7f6e\u5b9e\u73b0\u4e86Delayed\u63a5\u53e3\u7684\u5bf9\u8c61\u3002\n\n\nPriorityBlockingQueue\n\n\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5b83\u5177\u6709\u53ef\u963b\u585e\u7684\u8bfb\u53d6\u64cd\u4f5c\u3002\n\n\n\u514d\u9501\u5bb9\u5668\n\n\n\u5bb9\u5668\u662f\u6240\u6709\u53d8\u6210\u4e2d\u7684\u57fa\u7840\u5de5\u5177\uff0c\u8fd9\u5176\u4e2d\u81ea\u7136\u4e5f\u5305\u62ec\u5e76\u53d1\u7f16\u7a0b\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u50cfvector\u548cHashtable\u8fd9\u7c7b\u65e9\u671f\u5bb9\u5668\u5177\u6709\u8bb8\u591asynchronized\u65b9\u6cd5\uff0c\u5f53\u4ed6\u4eec\u7528\u4e8e\u975e\u591a\u7ebf\u7a0b\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u4fbf\u4f1a\u5bfc\u81f4\u4e0d\u53ef\u63a5\u53d7\u7684\u5f00\u9500\u3002java se5\u6dfb\u52a0\u4e86\u4e00\u4e9b\u65b0\u7684\u5bb9\u5668\uff0c\u901a\u8fc7\u4f7f\u7528\u66f4\u7075\u5de7\u7684\u6280\u672f\u6765\u6d88\u9664\u52a0\u9501\uff0c\u4ece\u800c\u63d0\u9ad8\u7ebf\u7a0b\u5b89\u5168\u7684\u6027\u80fd\u3002\n\n\n\u8fd9\u4e9b\u514d\u9501\u5bb9\u5668\u80cc\u540e\u7684\u901a\u7528\u7b56\u7565\u662f\uff1a\u5bf9\u5bb9\u5668\u7684\u4fee\u6539\u53ef\u4ee5\u4e0e\u8bfb\u53d6\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\uff0c\u53ea\u8981\u8bfb\u53d6\u8005\u53ea\u80fd\u770b\u5230\u5b8c\u6210\u4fee\u6539\u7684\u7ed3\u679c\u5373\u53ef\u3002\u4fee\u6539\u662f\u5728\u5bb9\u5668\u6570\u636e\u7ed3\u6784\u7684\u67d0\u4e2a\u90e8\u5206\u7684\u4e00\u4e2a\u5355\u72ec\u7684\u526f\u672c(\u6709\u65f6\u662f\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u526f\u672c)\u4e0a\u6267\u884c\u7684\uff0c\u5e76\u4e14\u8fd9\u4e2a\u526f\u672c\u5728\u4fee\u6539\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u53ef\u89c6\u7684\u3002\u53ea\u6709\u5f53\u4fee\u6539\u5b8c\u6210\u65f6\uff0c\u88ab\u4fee\u6539\u7684\u7ed3\u6784\u624d\u4f1a\u81ea\u52a8\u5730\u4e0e\u4e3b\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4ea4\u6362\uff0c\u4e4b\u540e\u8bfb\u53d6\u8005\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u4fee\u6539\u4e86\u3002\n\n\n\u5728\nCopyOnWriteArrayList\n\u4e2d\uff0c\u5199\u5165\u5c06\u5bfc\u81f4\u521b\u5efa\u6574\u4e2a\u5e95\u5c42\u6570\u7ec4\u7684\u526f\u672c\uff0c\u800c\u6e90\u6570\u7ec4\u5c06\u4fdd\u7559\u5728\u539f\u5730\u3002\u4f7f\u5f97\u590d\u5236\u7684\u6570\u7ec4\u5728\u88ab\u4fee\u6539\u65f6\uff0c\u8bfb\u53d6\u64cd\u4f5c\u53ef\u4ee5\u5b89\u5168\u7684\u6267\u884c\u3002\u5f53\u4fee\u6539\u5b8c\u6210\u65f6\uff0c\u4e00\u4e2a\u539f\u5b50\u6027\u7684\u64cd\u4f5c\u5c06\u628a\u65b0\u7684\u6570\u7ec4\u6362\u5165\uff0c\u4f7f\u5f97\u65b0\u7684\u8bfb\u53d6\u64cd\u4f5c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u65b0\u7684\u4fee\u6539\u3002\nCopyOnWriteArrayList\n\u7684\u597d\u5904\u4e4b\u4e00\u662f\u5f53\u591a\u4e2a\u8fed\u4ee3\u5668\u540c\u65f6\u904d\u5386\u548c\u4fee\u6539\u8fd9\u4e2a\u5217\u8868\u65f6\uff0c\u4e0d\u4f1a\u629b\u51fa \nConcurrentModificationException\n,\u56e0\u6b64\u4f60\u4e0d\u5fc5\u7f16\u5199\u7279\u6b8a\u7684\u4ee3\u7801\u53bb\u9632\u8303\u8fd9\u79cd\u5f02\u5e38\uff0c\u5c31\u50cf\u4f60\u4ee5\u524d\u5fc5\u987b\u505a\u7684\u90a3\u6837\u3002\n\n\nCopyOnWriteArraySet\n\u5c06\u4f7f\u7528\nCopyOnWriteArrayList\n\u6765\u5b9e\u73b0\u5176\u514d\u9501\u884c\u4e3a\u3002\n\n\nConcurrentHashMap\n\u548c\nConcurrentLinkedQueue\n\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6280\u672f\uff0c\u5141\u8bb8\u5e76\u53d1\u7684\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u4f46\u662f\u5bb9\u5668\u4e2d\u53ea\u6709\u90e8\u5206\u5185\u5bb9\u800c\u4e0d\u662f\u6574\u4e2a\u5bb9\u5668\u53ef\u4ee5\u88ab\u590d\u5236\u548c\u4fee\u6539\u3002\u7136\u800c\uff0c\u4efb\u4f55\u4fee\u6539\u5728\u5b8c\u6210\u4e4b\u524d\uff0c\u8bfb\u53d6\u8005\u4ecd\u65e7\u4e0d\u80fd\u770b\u5230\u4ed6\u4eec\u3002\nConcurrentHashMap\n\u4e0d\u4f1a\u629b\u51fa\nConcurrentModificationException\n\u5f02\u5e38\u3002\n\n\nJava\u4e2d\uff0cList\u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u5982\u679c\u88ab\u4fee\u6539\u4e86\u4f1a\u629b\u51fajava.util.ConcurrentModificationException\u9519\u8bef\u3002\n\n\nimport java.util.ArrayList;  \nimport java.util.List;  \n\npublic class Resource3 {  \n\n    public static void main(String[] args) throws InterruptedException {  \n        List\nString\n a = new ArrayList\nString\n();  \n        a.add(\na\n);  \n        a.add(\nb\n);  \n        a.add(\nc\n);  \n        final ArrayList\nString\n list = new ArrayList\nString\n(  \n                a);  \n        Thread t = new Thread(new Runnable() {  \n            int count = -1;  \n\n            @Override  \n            public void run() {  \n                while (true) {  \n                    list.add(count++ + \n);  \n                }  \n            }  \n        });  \n        t.setDaemon(true);  \n        t.start();  \n        Thread.currentThread().sleep(3);  \n        for (String s : list) {  \n            System.out.println(s);  \n        }  \n    }  \n} \n\n\n\n\nException in thread \nmain\n java.util.ConcurrentModificationException\n    at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)\n    at java.util.ArrayList$Itr.next(ArrayList.java:851)\n    at com.java.copyonwritelist.Resource.main(Resource.java:30)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u8fd0\u884c\u7684\u65f6\u5019\u5c31\u4f1a\u629b\u51fajava.util.ConcurrentModificationException\u9519\u8bef\u3002\u8fd9\u662f\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u5728\u904d\u5386list\u7684\u65f6\u5019\uff0c\u5b50\u7ebf\u7a0b\u5728\u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20\u3002\n\u90a3\u4e48\u6709\u6ca1\u6709\u529e\u6cd5\u5728\u904d\u5386\u4e00\u4e2alist\u7684\u65f6\u5019\uff0c\u8fd8\u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20\u5462\uff1f\u529e\u6cd5\u662f\u6709\u7684\u3002\u5c31\u662fJava concurrent\u5305\u4e2d\u7684CopyOnWriteArrayList\u3002\n\n\n\u5148\u89e3\u91ca\u4e0bCopyOnWriteArrayList\u7c7b\u3002\n\n\nCopyOnWriteArrayList\u7c7b\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\uff0c\u5728\u5bf9\u5176\u5b9e\u4f8b\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\uff08add/remove\u7b49\uff09\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u5e76\u4fee\u6539\uff0c\u4fee\u6539\u5b8c\u6bd5\u4e4b\u540e\uff0c\u518d\u5c06\u539f\u6765\u7684\u5f15\u7528\u6307\u5411\u65b0\u7684\u6570\u7ec4\u3002\u8fd9\u6837\uff0c\u4fee\u6539\u8fc7\u7a0b\u6ca1\u6709\u4fee\u6539\u539f\u6765\u7684\u6570\u7ec4\u3002\u4e5f\u5c31\u6ca1\u6709\u4e86ConcurrentModificationException\u9519\u8bef\u3002\n\n\nimport java.util.ArrayList;  \nimport java.util.List;  \nimport java.util.concurrent.CopyOnWriteArrayList;  \n\npublic class Resource3 {  \n\n    public static void main(String[] args) throws InterruptedException {  \n        List\nString\n a = new ArrayList\nString\n();  \n        a.add(\na\n);  \n        a.add(\nb\n);  \n        a.add(\nc\n);  \n        final CopyOnWriteArrayList\nString\n list = new CopyOnWriteArrayList\nString\n(a);  \n        Thread t = new Thread(new Runnable() {  \n            int count = -1;  \n\n            @Override  \n            public void run() {  \n                while (true) {  \n                    list.add(count++ + \n);  \n                }  \n            }  \n        });  \n        t.setDaemon(true);  \n        t.start();  \n        Thread.currentThread().sleep(3);  \n        for (String s : list) {  \n            System.out.println(list.hashCode());  \n            System.out.println(s);  \n        }  \n    }  \n} \n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u5728for\u5faa\u73af\u4e2d\u904d\u5386list\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4f1a\u8f93\u51falist\u7684hashcode\u6765\u770b\u770blist\u662f\u4e0d\u662f\u540c\u4e00\u4e2alist\u4e86\n\n\n\u90e8\u5206\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a\n\n\n669661746  \na  \n2119153548  \nb  \n471684173  \nc  \n550648901  \n-1  \n-76447331  \n0  \n1638154873  \n1  \n921225916  \n2  \n1618672031  \n3  \n1404182932  \n4  \n950140076  \n5  \n-610377050  \n6  \n-610377050  \n7  \n-610377050  \n8  \n-610377050  \n9  \n-610377050  \n10  \n-610377050  \n11  \n-610377050  \n12 \n\n\n\n\n\u4ece\u4e0a\u9762\u7684\u7ed3\u679c\u5f88\u5bb9\u6613\u5c31\u770b\u51fa\u6765\uff0chashcode\u53d8\u5316\u4e86\u591a\u6b21\uff0c\u8bf4\u660e\u4e86list\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684list\u5bf9\u8c61\u4e86\u3002\u8fd9\u8bf4\u660e\u4e86CopyOnWriteArrayList\u7c7b\u7684add\u51fd\u6570\u5728\u6267\u884c\u7684\u65f6\u5019\u786e\u5b9e\u662f\u4fee\u6539\u4e86list\u7684\u6570\u7ec4\u5bf9\u8c61\u3002\n\n\n\u770badd\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n\n/** \n     * Appends the specified element to the end of this list. \n     * \n     * @param e element to be appended to this list \n     * @return \ntt\ntrue\n/tt\n (as specified by {@link Collection#add}) \n     */  \n    public boolean add(E e) {  \n    final ReentrantLock lock = this.lock;  \n    lock.lock();  \n    try {  \n        Object[] elements = getArray();  \n        int len = elements.length;  \n        Object[] newElements = Arrays.copyOf(elements, len + 1);  \n        newElements[len] = e;  \n        setArray(newElements);  \n        return true;  \n    } finally {  \n        lock.unlock();  \n    }  \n    }  \n\n\n\n\nadd\u51fd\u6570\u4e2d\u62f7\u8d1d\u4e86\u539f\u6765\u7684\u6570\u7ec4\u5e76\u5728\u6700\u540e\u52a0\u4e0a\u4e86\u65b0\u5143\u7d20\u3002\u7136\u540e\u8c03\u7528setArray\u51fd\u6570\u5c06\u5f15\u7528\u94fe\u63a5\u5230\u65b0\u6570\u7ec4\uff1a\n\n\n/** \n    * Sets the array. \n    */  \n   final void setArray(Object[] a) {  \n       array = a;  \n   } \n\n\n\n\nReentrantReadWriteLock\n\n\nLock\u6bd4\u4f20\u7edf\u7ebf\u7a0b\u6a21\u578b\u4e2d\u7684synchronized\u65b9\u5f0f\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\uff0c\u4e0e\u751f\u6d3b\u4e2d\u7684\u9501\u7c7b\u4f3c\uff0c\u9501\u672c\u8eab\u4e5f\u5e94\u8be5\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\u7247\u6bb5\u8981\u5b9e\u73b0\u540c\u6b65\u4e92\u65a5\u7684\u6548\u679c\uff0c\u5b83\u4eec\u5fc5\u987b\u7528\u540c\u4e00\u4e2aLock\u5bf9\u8c61\u3002\n\n\n\u8bfb\u5199\u9501\uff1a\u5206\u4e3a\u8bfb\u9501\u548c\u5199\u9501\uff0c\u591a\u4e2a\u8bfb\u9501\u4e0d\u4e92\u65a5\uff0c\u8bfb\u9501\u4e0e\u5199\u9501\u4e92\u65a5\uff0c\u8fd9\u662f\u7531jvm\u81ea\u5df1\u63a7\u5236\u7684\uff0c\u4f60\u53ea\u8981\u4e0a\u597d\u76f8\u5e94\u7684\u9501\u5373\u53ef\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u53ea\u8bfb\u6570\u636e\uff0c\u53ef\u4ee5\u5f88\u591a\u4eba\u540c\u65f6\u8bfb\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u5199\uff0c\u90a3\u5c31\u4e0a\u8bfb\u9501\uff1b\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4fee\u6539\u6570\u636e\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u5728\u5199\uff0c\u4e14\u4e0d\u80fd\u540c\u65f6\u8bfb\u53d6\uff0c\u90a3\u5c31\u4e0a\u5199\u9501\u3002\u603b\u4e4b\uff0c\u8bfb\u7684\u65f6\u5019\u4e0a\u8bfb\u9501\uff0c\u5199\u7684\u65f6\u5019\u4e0a\u5199\u9501\uff01\n\n\nReentrantReadWriteLock\u4f1a\u4f7f\u7528\u4e24\u628a\u9501\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u4e00\u4e2a\u8bfb\u9501\uff0c\u4e00\u4e2a\u5199\u9501\n\n\n\u7ebf\u7a0b\u8fdb\u5165\u8bfb\u9501\u7684\u524d\u63d0\u6761\u4ef6\uff1a\n\n\n\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u5199\u9501\uff0c\n\u6ca1\u6709\u5199\u8bf7\u6c42\u6216\u8005\u6709\u5199\u8bf7\u6c42\uff0c\u4f46\u8c03\u7528\u7ebf\u7a0b\u548c\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u662f\u540c\u4e00\u4e2a\n\n\n\n\u7ebf\u7a0b\u8fdb\u5165\u5199\u9501\u7684\u524d\u63d0\u6761\u4ef6\uff1a\n\n\n\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u8bfb\u9501\n\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u5199\u9501\n\n\n\n\u5230ReentrantReadWriteLock\uff0c\u9996\u5148\u8981\u505a\u7684\u662f\u4e0eReentrantLock\u5212\u6e05\u754c\u9650\u3002\u5b83\u548c\u540e\u8005\u90fd\u662f\u5355\u72ec\u7684\u5b9e\u73b0\uff0c\u5f7c\u6b64\u4e4b\u95f4\u6ca1\u6709\u7ee7\u627f\u6216\u5b9e\u73b0\u7684\u5173\u7cfb\u3002\u7136\u540e\u5c31\u662f\u603b\u7ed3\u8fd9\u4e2a\u9501\u673a\u5236\u7684\u7279\u6027\u4e86\uff1a \n\n\n(a).\u91cd\u5165\u65b9\u9762\u5176\u5185\u90e8\u7684WriteLock\u53ef\u4ee5\u83b7\u53d6ReadLock\uff0c\u4f46\u662f\u53cd\u8fc7\u6765ReadLock\u60f3\u8981\u83b7\u5f97WriteLock\u5219\u6c38\u8fdc\u90fd\u4e0d\u8981\u60f3\u3002 \n (b).WriteLock\u53ef\u4ee5\u964d\u7ea7\u4e3aReadLock\uff0c\u987a\u5e8f\u662f\uff1a\u5148\u83b7\u5f97WriteLock\u518d\u83b7\u5f97ReadLock\uff0c\u7136\u540e\u91ca\u653eWriteLock\uff0c\u8fd9\u65f6\u5019\u7ebf\u7a0b\u5c06\u4fdd\u6301Readlock\u7684\u6301\u6709\u3002\u53cd\u8fc7\u6765ReadLock\u60f3\u8981\u5347\u7ea7\u4e3aWriteLock\u5219\u4e0d\u53ef\u80fd\uff0c\u4e3a\u4ec0\u4e48\uff1f\u53c2\u770b(a)\uff0c\u5475\u5475. \n (c).ReadLock\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u6301\u6709\u5e76\u4e14\u5728\u4f5c\u7528\u65f6\u6392\u65a5\u4efb\u4f55\u7684WriteLock\uff0c\u800cWriteLock\u5219\u662f\u5b8c\u5168\u7684\u4e92\u65a5\u3002\u8fd9\u4e00\u7279\u6027\u6700\u4e3a\u91cd\u8981\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u9ad8\u8bfb\u53d6\u9891\u7387\u800c\u76f8\u5bf9\u8f83\u4f4e\u5199\u5165\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u6b64\u7c7b\u9501\u540c\u6b65\u673a\u5236\u5219\u53ef\u4ee5\u63d0\u9ad8\u5e76\u53d1\u91cf\u3002 \n (d).\u4e0d\u7ba1\u662fReadLock\u8fd8\u662fWriteLock\u90fd\u652f\u6301Interrupt\uff0c\u8bed\u4e49\u4e0eReentrantLock\u4e00\u81f4\u3002 \n (e).WriteLock\u652f\u6301Condition\u5e76\u4e14\u4e0eReentrantLock\u8bed\u4e49\u4e00\u81f4\uff0c\u800cReadLock\u5219\u4e0d\u80fd\u4f7f\u7528Condition\uff0c\u5426\u5219\u629b\u51faUnsupportedOperationException\u5f02\u5e38\u3002\n\n\n\n\u4e0b\u9762\u770b\u4e00\u4e2a\u8bfb\u5199\u9501\u7684\u4f8b\u5b50\uff1a\n\n\npackage com.java;\n\n/**\n * Created by junzhang on 2017/4/10.\n */\npublic class ReadWriteLockTest {\n    public static void main(String[] args) {\n        final Queue3 q3 = new Queue3();\n        for(int i=0;i\n3;i++)\n        {\n            new Thread(){\n                public void run(){\n                    while(true){\n                        q3.get();\n                    }\n                }\n\n            }.start();\n        }\n        for(int i=0;i\n3;i++)\n        {\n            new Thread(){\n                public void run(){\n                    while(true){\n                        q3.put(new Random().nextInt(10000));\n                    }\n                }\n\n            }.start();\n        }\n    }\n}\nclass Queue3{\n    private Object data = null;//\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u5199\u8be5\u6570\u636e\uff0c\u4f46\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u8be5\u6570\u636e\u3002\n    private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n    public void get(){\n        rwl.readLock().lock();//\u4e0a\u8bfb\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ea\u80fd\u8bfb\u4e0d\u80fd\u5199\n        System.out.println(Thread.currentThread().getName() + \n be ready to read data!\n);\n        try {\n            Thread.sleep((long)(Math.random()*1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() + \nhave read data :\n + data);\n        rwl.readLock().unlock(); //\u91ca\u653e\u8bfb\u9501\uff0c\u6700\u597d\u653e\u5728finnaly\u91cc\u9762\n    }\n\n    public void put(Object data){\n\n        rwl.writeLock().lock();//\u4e0a\u5199\u9501\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u7ebf\u7a0b\u8bfb\u4e5f\u4e0d\u5141\u8bb8\u5199\n        System.out.println(Thread.currentThread().getName() + \n be ready to write data!\n);\n        try {\n            Thread.sleep((long)(Math.random()*1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        this.data = data;\n        System.out.println(Thread.currentThread().getName() + \n have write data: \n + data);\n\n        rwl.writeLock().unlock();//\u91ca\u653e\u5199\u9501    \n    }\n}\n\n\n\n\nThread-0 be ready to read data!\nThread-1 be ready to read data!\nThread-2 be ready to read data!\nThread-0have read data :null\nThread-2have read data :null\nThread-1have read data :null\nThread-5 be ready to write data!\nThread-5 have write data: 6934\nThread-5 be ready to write data!\nThread-5 have write data: 8987\nThread-5 be ready to write data!\nThread-5 have write data: 8496\n\n\n\n\n\u4e0b\u9762\u4f7f\u7528\u8bfb\u5199\u9501\u6a21\u62df\u4e00\u4e2a\u7f13\u5b58\u5668\uff1a\n\n\npackage com.thread;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class CacheDemo {\n    private Map\nString, Object\n map = new HashMap\nString, Object\n();//\u7f13\u5b58\u5668\n    private ReadWriteLock rwl = new ReentrantReadWriteLock();\n    public static void main(String[] args) {\n\n    }\n    public Object get(String id){\n        Object value = null;\n        rwl.readLock().lock();//\u9996\u5148\u5f00\u542f\u8bfb\u9501\uff0c\u4ece\u7f13\u5b58\u4e2d\u53bb\u53d6\n        try{\n            value = map.get(id); \n            if(value == null){  //\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u91ca\u653e\u8bfb\u9501\uff0c\u4e0a\u5199\u9501\n                rwl.readLock().unlock();\n                rwl.writeLock().lock();\n                try{\n                    if(value == null){\n                        value = \naaa\n;  //\u6b64\u65f6\u53ef\u4ee5\u53bb\u6570\u636e\u5e93\u4e2d\u67e5\u627e\uff0c\u8fd9\u91cc\u7b80\u5355\u7684\u6a21\u62df\u4e00\u4e0b\n                    }\n                }finally{\n                    rwl.writeLock().unlock(); //\u91ca\u653e\u5199\u9501\n                }\n                rwl.readLock().lock(); //\u7136\u540e\u518d\u4e0a\u8bfb\u9501\n            }\n        }finally{\n            rwl.readLock().unlock(); //\u6700\u540e\u91ca\u653e\u8bfb\u9501\n        }\n        return value;\n    }\n\n}\n\n\n\n\nStampedLock\n\n\n\u8be5\u7c7b\u662f\u4e00\u4e2a\u8bfb\u5199\u9501\u7684\u6539\u8fdb\uff0c\u5b83\u7684\u601d\u60f3\u662f\u8bfb\u5199\u9501\u4e2d\u8bfb\u4e0d\u4ec5\u4e0d\u963b\u585e\u8bfb\uff0c\u540c\u65f6\u4e5f\u4e0d\u5e94\u8be5\u963b\u585e\u5199\u3002\n\n\n\u8bfb\u4e0d\u963b\u585e\u5199\u7684\u5b9e\u73b0\u601d\u8def\uff1a\n\n\n    \u5728\u8bfb\u7684\u65f6\u5019\u5982\u679c\u53d1\u751f\u4e86\u5199\uff0c\u5219\u5e94\u5f53\u91cd\u8bfb\u800c\u4e0d\u662f\u5728\u8bfb\u7684\u65f6\u5019\u76f4\u63a5\u963b\u585e\u5199\uff01\n    \u56e0\u4e3a\u5728\u8bfb\u7ebf\u7a0b\u975e\u5e38\u591a\u800c\u5199\u7ebf\u7a0b\u6bd4\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u5199\u7ebf\u7a0b\u53ef\u80fd\u53d1\u751f\u9965\u997f\u73b0\u8c61\uff0c\u4e5f\u5c31\u662f\u56e0\u4e3a\u5927\u91cf\u7684\u8bfb\u7ebf\u7a0b\u5b58\u5728\u5e76\u4e14\u8bfb\u7ebf\u7a0b\u90fd\u963b\u585e\u5199\u7ebf\u7a0b\uff0c\n\n\n\n\u56e0\u6b64\u5199\u7ebf\u7a0b\u53ef\u80fd\u51e0\u4e4e\u5f88\u5c11\u88ab\u8c03\u5ea6\u6210\u529f\uff01\u5f53\u8bfb\u6267\u884c\u7684\u65f6\u5019\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e86\u5199\uff0c\u5219\u8bfb\u7ebf\u7a0b\u53d1\u73b0\u6570\u636e\u4e0d\u4e00\u81f4\u5219\u6267\u884c\u91cd\u8bfb\u5373\u53ef\u3002\u6240\u4ee5\u8bfb\u5199\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\n\u4f7f\u7528StampedLock\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cd\u65e0\u969c\u788d\u64cd\u4f5c\uff0c\u5373\u8bfb\u5199\u4e4b\u95f4\u4e0d\u4f1a\u963b\u585e\u5bf9\u65b9\uff0c\u4f46\u662f\u5199\u548c\u5199\u4e4b\u95f4\u8fd8\u662f\u963b\u585e\u7684\uff01\n\n\n\u7a0b\u5e8f\u4e3e\u4f8b\uff1a\n\n\npublic  class  Point {\n           //\u4e00\u4e2a\u70b9\u7684x\uff0cy\u5750\u6807\n           private   double   x,y;\n           /**Stamped\u7c7b\u4f3c\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u4f5c\u7528\uff0c\u6bcf\u6b21\u5199\u7684\u65f6\u5019\u5bf9\u5176+1\u6765\u6539\u53d8\u88ab\u64cd\u4f5c\u5bf9\u8c61\u7684Stamped\u503c\n            * \u8fd9\u6837\u5176\u5b83\u7ebf\u7a0b\u8bfb\u7684\u65f6\u5019\u53d1\u73b0\u76ee\u6807\u5bf9\u8c61\u7684Stamped\u6539\u53d8\uff0c\u5219\u6267\u884c\u91cd\u8bfb*/\n           private final   StampedLock  stampedLock   =  new    StampedLock();\n\n           // an exclusively locked method\n           void move(doubledeltaX,doubledeltaY) {\n                   /**stampedLock\u8c03\u7528writeLock\u548cunlockWrite\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4stampedLock\u7684stamp\u503c\u7684\u53d8\u5316\n                  * \u5373\u6bcf\u6b21+1\uff0c\u76f4\u5230\u52a0\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u4ece0\u91cd\u65b0\u5f00\u59cb */\n                  longstamp =stampedLock.writeLock(); //\u5199\u9501\n                  try {\n                         x +=deltaX;\n                         y +=deltaY;\n                  } finally {\n                         stampedLock.unlockWrite(stamp);//\u91ca\u653e\u5199\u9501\n                  }\n           }\n\n         double distanceFromOrigin() {    // A read-only method\n                 /**tryOptimisticRead\u662f\u4e00\u4e2a\u4e50\u89c2\u7684\u8bfb\uff0c\u4f7f\u7528\u8fd9\u79cd\u9501\u7684\u8bfb\u4e0d\u963b\u585e\u5199\n                 * \u6bcf\u6b21\u8bfb\u7684\u65f6\u5019\u5f97\u5230\u4e00\u4e2a\u5f53\u524d\u7684stamp\u503c\uff08\u7c7b\u4f3c\u65f6\u95f4\u6233\u7684\u4f5c\u7528\uff09*/\n                longstamp =stampedLock.tryOptimisticRead();\n\n                //\u8fd9\u91cc\u5c31\u662f\u8bfb\u64cd\u4f5c\uff0c\u8bfb\u53d6x\u548cy\uff0c\u56e0\u4e3a\u8bfb\u53d6x\u65f6\uff0cy\u53ef\u80fd\u88ab\u5199\u4e86\u65b0\u7684\u503c\uff0c\u6240\u4ee5\u4e0b\u9762\u9700\u8981\u5224\u65ad\n                double    currentX =x,   currentY =y;\n\n                /**\u5982\u679c\u8bfb\u53d6\u7684\u65f6\u5019\u53d1\u751f\u4e86\u5199\uff0c\u5219stampedLock\u7684stamp\u5c5e\u6027\u503c\u4f1a\u53d8\u5316\uff0c\u6b64\u65f6\u9700\u8981\u91cd\u8bfb\uff0c\n                * \u518d\u91cd\u8bfb\u7684\u65f6\u5019\u9700\u8981\u52a0\u8bfb\u9501\uff08\u5e76\u4e14\u91cd\u8bfb\u65f6\u4f7f\u7528\u7684\u5e94\u5f53\u662f\u60b2\u89c2\u7684\u8bfb\u9501\uff0c\u5373\u963b\u585e\u5199\u7684\u8bfb\u9501\uff09\n                 * \u5f53\u7136\u91cd\u8bfb\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u4f7f\u7528tryOptimisticRead\uff0c\u6b64\u65f6\u9700\u8981\u7ed3\u5408\u5faa\u73af\u4e86\uff0c\u5373\u7c7b\u4f3cCAS\u65b9\u5f0f\n                 * \u8bfb\u9501\u53c8\u91cd\u65b0\u8fd4\u56de\u4e00\u4e2astampe\u503c*/\n                if (!stampedLock.validate(stamp)) {\n                        stamp =stampedLock.readLock(); //\u8bfb\u9501\n                        try {\n                              currentX =x;\n                              currentY =y;\n                        }finally{\n                              stampedLock.unlockRead(stamp);//\u91ca\u653e\u8bfb\u9501\n                       }\n                }\n               //\u8bfb\u9501\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u6267\u884c\u8ba1\u7b97\uff0c\u5373\u8bfb\u7684\u65f6\u5019\u6ca1\u6709\u53d1\u751f\u5199\n               return Math.sqrt(currentX *currentX + currentY *currentY);\n          }\n}\n\n\n\n\nStampedLock\u7684\u5b9e\u73b0\u601d\u60f3:\n\n\n\u5728StampedLock\u4e2d\u4f7f\u7528\u4e86CLH\u81ea\u65cb\u9501\uff0c\u5982\u679c\u53d1\u751f\u4e86\u8bfb\u5931\u8d25\uff0c\u4e0d\u7acb\u523b\u628a\u8bfb\u7ebf\u7a0b\u6302\u8d77\uff0c\u9501\u5f53\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b\u961f\u5217\u3002\n\n\n\u6240\u6709\u7533\u8bf7\u9501\u4f46\u662f\u6ca1\u6709\u6210\u529f\u7684\u7ebf\u7a0b\u90fd\u4f1a\u8bb0\u5f55\u5230\u8fd9\u4e2a\u961f\u5217\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7ebf\u7a0b\uff09\u4fdd\u5b58\u4e00\u4e2a\u6807\u8bb0\u4f4d\uff08locked\uff09\uff0c\u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u5df2\u7ecf\u91ca\u653e\u9501\u3002\u5f53\u4e00\u4e2a\u672a\u6807\u8bb0\u5230\u961f\u5217\u4e2d\u7684\u7ebf\u7a0b\u8bd5\u56fe\u83b7\u5f97\u9501\u65f6\uff0c\u4f1a\u53d6\u5f97\u5f53\u524d\u7b49\u5f85\u961f\u5217\u5c3e\u90e8\u7684\u8282\u70b9\u4f5c\u4e3a\u5176\u524d\u5e8f\u8282\u70b9\uff0c\u5e76\u4f7f\u7528\u7c7b\u4f3c\u5982\u4e0b\u4ee3\u7801\uff08\u4e00\u4e2a\u7a7a\u7684\u6b7b\u5faa\u73af\uff09\u5224\u65ad\u524d\u5e8f\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u6210\u529f\u7684\u91ca\u653e\u4e86\u9501\uff1a\n\n\nwhile(pred.locked){  }   \n\n\n\u89e3\u91ca\uff1apred\u8868\u793a\u5f53\u524d\u8bd5\u56fe\u83b7\u53d6\u9501\u7684\u7ebf\u7a0b\u7684\u524d\u5e8f\u8282\u70b9\uff0c\u5982\u679c\u524d\u5e8f\u8282\u70b9\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u5c31\u6267\u884c\u8be5\u7a7a\u5faa\u73af\u5e76\u4e0d\u65ad\u5224\u65ad\u524d\u5e8f\u8282\u70b9\u7684\u9501\u91ca\u653e\uff0c\u5373\u7c7b\u4f3c\u4e00\u4e2a\u81ea\u65cb\u9501\u7684\u6548\u679c\uff0c\u907f\u514d\u88ab\u7cfb\u7edf\u6302\u8d77\u3002\u5f53\u5faa\u73af\u4e00\u5b9a\u6b21\u6570\u540e\uff0c\u524d\u5e8f\u8282\u70b9\u8fd8\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u5c31\u88ab\u6302\u8d77\u800c\u4e0d\u518d\u81ea\u65cb\uff0c\u56e0\u4e3a\u7a7a\u7684\u6b7b\u5faa\u73af\u6267\u884c\u592a\u591a\u6b21\u6bd4\u6302\u8d77\u66f4\u6d88\u8017\u8d44\u6e90\u3002\n\n\nJDK8\u5bf9\u5e76\u53d1\u7684\u65b0\u652f\u6301", 
            "title": "\u591a\u7ebf\u7a0b"
        }, 
        {
            "location": "/thread/#exchanger", 
            "text": "Exchanger\u53ef\u4ee5\u5728\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u4ea4\u6362\u6570\u636e\uff0c\u53ea\u80fd\u662f2\u4e2a\u7ebf\u7a0b\uff0c\u4ed6\u4e0d\u652f\u6301\u66f4\u591a\u7684\u7ebf\u7a0b\u4e4b\u95f4\u4e92\u6362\u6570\u636e\u3002  \u5f53\u7ebf\u7a0bA\u8c03\u7528Exchange\u5bf9\u8c61\u7684exchange()\u65b9\u6cd5\u540e\uff0c\u4ed6\u4f1a\u9677\u5165\u963b\u585e\u72b6\u6001\uff0c\u76f4\u5230\u7ebf\u7a0bB\u4e5f\u8c03\u7528\u4e86exchange()\u65b9\u6cd5\uff0c\u7136\u540e\u4ee5\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u4ea4\u6362\u6570\u636e\uff0c\u4e4b\u540e\u7ebf\u7a0bA\u548cB\u7ee7\u7eed\u8fd0\u884c  package com.java.exchanger;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.Exchanger;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by junzhang on 2017/4/7.\n */\npublic class ExchangerTest {\n    public static void main(String[] args) {\n        ExchangerTest exchangerTest = new ExchangerTest();\n        Exchanger List Integer  exchanger = new Exchanger ();\n        exchangerTest.new E_Consumer(exchanger).start();\n        exchangerTest.new E_Producer(exchanger).start();\n    }\n\n\n    class E_Producer extends Thread {\n        List Integer  list = new ArrayList Integer ();\n        Exchanger List Integer  exchanger = null;\n\n        public E_Producer(Exchanger List Integer  exchanger) {\n            this.exchanger = exchanger;\n        }\n\n        @Override\n        public void run() {\n            Random rand = new Random();\n            for(int i=0; i 10; i++) {\n                list.clear();\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                list.add(rand.nextInt(10000));\n                try {\n                    list = exchanger.exchange(list);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n\n        }\n    }\n\n    class E_Consumer extends Thread{\n        List Integer  list = new ArrayList ();\n        Exchanger List Integer  exchanger = null;\n        public E_Consumer(Exchanger List Integer  exchanger) {\n            super();\n            this.exchanger = exchanger;\n        }\n        @Override\n        public void run() {\n            for(int i=0; i 10; i++) {\n                try {\n                    list = exchanger.exchange(list);\n                    TimeUnit.SECONDS.sleep(2);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n                System.out.print(list.get(0)+ ,  );\n                System.out.print(list.get(1)+ ,  );\n                System.out.print(list.get(2)+ ,  );\n                System.out.print(list.get(3)+ ,  );\n                System.out.println(list.get(4)+ ,  );\n            }\n        }\n    }\n\n}", 
            "title": "exchanger"
        }, 
        {
            "location": "/thread/#delayqueue", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u65e0\u754c\u7684BlockingQueue,\u7528\u4e8e\u653e\u7f6e\u5b9e\u73b0\u4e86Delayed\u63a5\u53e3\u7684\u5bf9\u8c61\u3002", 
            "title": "DelayQueue"
        }, 
        {
            "location": "/thread/#priorityblockingqueue", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5b83\u5177\u6709\u53ef\u963b\u585e\u7684\u8bfb\u53d6\u64cd\u4f5c\u3002", 
            "title": "PriorityBlockingQueue"
        }, 
        {
            "location": "/thread/#_1", 
            "text": "\u5bb9\u5668\u662f\u6240\u6709\u53d8\u6210\u4e2d\u7684\u57fa\u7840\u5de5\u5177\uff0c\u8fd9\u5176\u4e2d\u81ea\u7136\u4e5f\u5305\u62ec\u5e76\u53d1\u7f16\u7a0b\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u50cfvector\u548cHashtable\u8fd9\u7c7b\u65e9\u671f\u5bb9\u5668\u5177\u6709\u8bb8\u591asynchronized\u65b9\u6cd5\uff0c\u5f53\u4ed6\u4eec\u7528\u4e8e\u975e\u591a\u7ebf\u7a0b\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u4fbf\u4f1a\u5bfc\u81f4\u4e0d\u53ef\u63a5\u53d7\u7684\u5f00\u9500\u3002java se5\u6dfb\u52a0\u4e86\u4e00\u4e9b\u65b0\u7684\u5bb9\u5668\uff0c\u901a\u8fc7\u4f7f\u7528\u66f4\u7075\u5de7\u7684\u6280\u672f\u6765\u6d88\u9664\u52a0\u9501\uff0c\u4ece\u800c\u63d0\u9ad8\u7ebf\u7a0b\u5b89\u5168\u7684\u6027\u80fd\u3002  \u8fd9\u4e9b\u514d\u9501\u5bb9\u5668\u80cc\u540e\u7684\u901a\u7528\u7b56\u7565\u662f\uff1a\u5bf9\u5bb9\u5668\u7684\u4fee\u6539\u53ef\u4ee5\u4e0e\u8bfb\u53d6\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\uff0c\u53ea\u8981\u8bfb\u53d6\u8005\u53ea\u80fd\u770b\u5230\u5b8c\u6210\u4fee\u6539\u7684\u7ed3\u679c\u5373\u53ef\u3002\u4fee\u6539\u662f\u5728\u5bb9\u5668\u6570\u636e\u7ed3\u6784\u7684\u67d0\u4e2a\u90e8\u5206\u7684\u4e00\u4e2a\u5355\u72ec\u7684\u526f\u672c(\u6709\u65f6\u662f\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u526f\u672c)\u4e0a\u6267\u884c\u7684\uff0c\u5e76\u4e14\u8fd9\u4e2a\u526f\u672c\u5728\u4fee\u6539\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u53ef\u89c6\u7684\u3002\u53ea\u6709\u5f53\u4fee\u6539\u5b8c\u6210\u65f6\uff0c\u88ab\u4fee\u6539\u7684\u7ed3\u6784\u624d\u4f1a\u81ea\u52a8\u5730\u4e0e\u4e3b\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4ea4\u6362\uff0c\u4e4b\u540e\u8bfb\u53d6\u8005\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u4fee\u6539\u4e86\u3002  \u5728 CopyOnWriteArrayList \u4e2d\uff0c\u5199\u5165\u5c06\u5bfc\u81f4\u521b\u5efa\u6574\u4e2a\u5e95\u5c42\u6570\u7ec4\u7684\u526f\u672c\uff0c\u800c\u6e90\u6570\u7ec4\u5c06\u4fdd\u7559\u5728\u539f\u5730\u3002\u4f7f\u5f97\u590d\u5236\u7684\u6570\u7ec4\u5728\u88ab\u4fee\u6539\u65f6\uff0c\u8bfb\u53d6\u64cd\u4f5c\u53ef\u4ee5\u5b89\u5168\u7684\u6267\u884c\u3002\u5f53\u4fee\u6539\u5b8c\u6210\u65f6\uff0c\u4e00\u4e2a\u539f\u5b50\u6027\u7684\u64cd\u4f5c\u5c06\u628a\u65b0\u7684\u6570\u7ec4\u6362\u5165\uff0c\u4f7f\u5f97\u65b0\u7684\u8bfb\u53d6\u64cd\u4f5c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u65b0\u7684\u4fee\u6539\u3002 CopyOnWriteArrayList \u7684\u597d\u5904\u4e4b\u4e00\u662f\u5f53\u591a\u4e2a\u8fed\u4ee3\u5668\u540c\u65f6\u904d\u5386\u548c\u4fee\u6539\u8fd9\u4e2a\u5217\u8868\u65f6\uff0c\u4e0d\u4f1a\u629b\u51fa  ConcurrentModificationException ,\u56e0\u6b64\u4f60\u4e0d\u5fc5\u7f16\u5199\u7279\u6b8a\u7684\u4ee3\u7801\u53bb\u9632\u8303\u8fd9\u79cd\u5f02\u5e38\uff0c\u5c31\u50cf\u4f60\u4ee5\u524d\u5fc5\u987b\u505a\u7684\u90a3\u6837\u3002  CopyOnWriteArraySet \u5c06\u4f7f\u7528 CopyOnWriteArrayList \u6765\u5b9e\u73b0\u5176\u514d\u9501\u884c\u4e3a\u3002  ConcurrentHashMap \u548c ConcurrentLinkedQueue \u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6280\u672f\uff0c\u5141\u8bb8\u5e76\u53d1\u7684\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u4f46\u662f\u5bb9\u5668\u4e2d\u53ea\u6709\u90e8\u5206\u5185\u5bb9\u800c\u4e0d\u662f\u6574\u4e2a\u5bb9\u5668\u53ef\u4ee5\u88ab\u590d\u5236\u548c\u4fee\u6539\u3002\u7136\u800c\uff0c\u4efb\u4f55\u4fee\u6539\u5728\u5b8c\u6210\u4e4b\u524d\uff0c\u8bfb\u53d6\u8005\u4ecd\u65e7\u4e0d\u80fd\u770b\u5230\u4ed6\u4eec\u3002 ConcurrentHashMap \u4e0d\u4f1a\u629b\u51fa ConcurrentModificationException \u5f02\u5e38\u3002  Java\u4e2d\uff0cList\u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u5982\u679c\u88ab\u4fee\u6539\u4e86\u4f1a\u629b\u51fajava.util.ConcurrentModificationException\u9519\u8bef\u3002  import java.util.ArrayList;  \nimport java.util.List;  \n\npublic class Resource3 {  \n\n    public static void main(String[] args) throws InterruptedException {  \n        List String  a = new ArrayList String ();  \n        a.add( a );  \n        a.add( b );  \n        a.add( c );  \n        final ArrayList String  list = new ArrayList String (  \n                a);  \n        Thread t = new Thread(new Runnable() {  \n            int count = -1;  \n\n            @Override  \n            public void run() {  \n                while (true) {  \n                    list.add(count++ +  );  \n                }  \n            }  \n        });  \n        t.setDaemon(true);  \n        t.start();  \n        Thread.currentThread().sleep(3);  \n        for (String s : list) {  \n            System.out.println(s);  \n        }  \n    }  \n}   Exception in thread  main  java.util.ConcurrentModificationException\n    at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)\n    at java.util.ArrayList$Itr.next(ArrayList.java:851)\n    at com.java.copyonwritelist.Resource.main(Resource.java:30)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)  \u8fd9\u6bb5\u4ee3\u7801\u8fd0\u884c\u7684\u65f6\u5019\u5c31\u4f1a\u629b\u51fajava.util.ConcurrentModificationException\u9519\u8bef\u3002\u8fd9\u662f\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u5728\u904d\u5386list\u7684\u65f6\u5019\uff0c\u5b50\u7ebf\u7a0b\u5728\u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20\u3002\n\u90a3\u4e48\u6709\u6ca1\u6709\u529e\u6cd5\u5728\u904d\u5386\u4e00\u4e2alist\u7684\u65f6\u5019\uff0c\u8fd8\u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20\u5462\uff1f\u529e\u6cd5\u662f\u6709\u7684\u3002\u5c31\u662fJava concurrent\u5305\u4e2d\u7684CopyOnWriteArrayList\u3002  \u5148\u89e3\u91ca\u4e0bCopyOnWriteArrayList\u7c7b\u3002  CopyOnWriteArrayList\u7c7b\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\uff0c\u5728\u5bf9\u5176\u5b9e\u4f8b\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\uff08add/remove\u7b49\uff09\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u5e76\u4fee\u6539\uff0c\u4fee\u6539\u5b8c\u6bd5\u4e4b\u540e\uff0c\u518d\u5c06\u539f\u6765\u7684\u5f15\u7528\u6307\u5411\u65b0\u7684\u6570\u7ec4\u3002\u8fd9\u6837\uff0c\u4fee\u6539\u8fc7\u7a0b\u6ca1\u6709\u4fee\u6539\u539f\u6765\u7684\u6570\u7ec4\u3002\u4e5f\u5c31\u6ca1\u6709\u4e86ConcurrentModificationException\u9519\u8bef\u3002  import java.util.ArrayList;  \nimport java.util.List;  \nimport java.util.concurrent.CopyOnWriteArrayList;  \n\npublic class Resource3 {  \n\n    public static void main(String[] args) throws InterruptedException {  \n        List String  a = new ArrayList String ();  \n        a.add( a );  \n        a.add( b );  \n        a.add( c );  \n        final CopyOnWriteArrayList String  list = new CopyOnWriteArrayList String (a);  \n        Thread t = new Thread(new Runnable() {  \n            int count = -1;  \n\n            @Override  \n            public void run() {  \n                while (true) {  \n                    list.add(count++ +  );  \n                }  \n            }  \n        });  \n        t.setDaemon(true);  \n        t.start();  \n        Thread.currentThread().sleep(3);  \n        for (String s : list) {  \n            System.out.println(list.hashCode());  \n            System.out.println(s);  \n        }  \n    }  \n}   \u8fd9\u6bb5\u4ee3\u7801\u5728for\u5faa\u73af\u4e2d\u904d\u5386list\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4f1a\u8f93\u51falist\u7684hashcode\u6765\u770b\u770blist\u662f\u4e0d\u662f\u540c\u4e00\u4e2alist\u4e86  \u90e8\u5206\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a  669661746  \na  \n2119153548  \nb  \n471684173  \nc  \n550648901  \n-1  \n-76447331  \n0  \n1638154873  \n1  \n921225916  \n2  \n1618672031  \n3  \n1404182932  \n4  \n950140076  \n5  \n-610377050  \n6  \n-610377050  \n7  \n-610377050  \n8  \n-610377050  \n9  \n-610377050  \n10  \n-610377050  \n11  \n-610377050  \n12   \u4ece\u4e0a\u9762\u7684\u7ed3\u679c\u5f88\u5bb9\u6613\u5c31\u770b\u51fa\u6765\uff0chashcode\u53d8\u5316\u4e86\u591a\u6b21\uff0c\u8bf4\u660e\u4e86list\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684list\u5bf9\u8c61\u4e86\u3002\u8fd9\u8bf4\u660e\u4e86CopyOnWriteArrayList\u7c7b\u7684add\u51fd\u6570\u5728\u6267\u884c\u7684\u65f6\u5019\u786e\u5b9e\u662f\u4fee\u6539\u4e86list\u7684\u6570\u7ec4\u5bf9\u8c61\u3002  \u770badd\u51fd\u6570\u7684\u4ee3\u7801\uff1a  /** \n     * Appends the specified element to the end of this list. \n     * \n     * @param e element to be appended to this list \n     * @return  tt true /tt  (as specified by {@link Collection#add}) \n     */  \n    public boolean add(E e) {  \n    final ReentrantLock lock = this.lock;  \n    lock.lock();  \n    try {  \n        Object[] elements = getArray();  \n        int len = elements.length;  \n        Object[] newElements = Arrays.copyOf(elements, len + 1);  \n        newElements[len] = e;  \n        setArray(newElements);  \n        return true;  \n    } finally {  \n        lock.unlock();  \n    }  \n    }    add\u51fd\u6570\u4e2d\u62f7\u8d1d\u4e86\u539f\u6765\u7684\u6570\u7ec4\u5e76\u5728\u6700\u540e\u52a0\u4e0a\u4e86\u65b0\u5143\u7d20\u3002\u7136\u540e\u8c03\u7528setArray\u51fd\u6570\u5c06\u5f15\u7528\u94fe\u63a5\u5230\u65b0\u6570\u7ec4\uff1a  /** \n    * Sets the array. \n    */  \n   final void setArray(Object[] a) {  \n       array = a;  \n   }", 
            "title": "\u514d\u9501\u5bb9\u5668"
        }, 
        {
            "location": "/thread/#reentrantreadwritelock", 
            "text": "Lock\u6bd4\u4f20\u7edf\u7ebf\u7a0b\u6a21\u578b\u4e2d\u7684synchronized\u65b9\u5f0f\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\uff0c\u4e0e\u751f\u6d3b\u4e2d\u7684\u9501\u7c7b\u4f3c\uff0c\u9501\u672c\u8eab\u4e5f\u5e94\u8be5\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\u7247\u6bb5\u8981\u5b9e\u73b0\u540c\u6b65\u4e92\u65a5\u7684\u6548\u679c\uff0c\u5b83\u4eec\u5fc5\u987b\u7528\u540c\u4e00\u4e2aLock\u5bf9\u8c61\u3002  \u8bfb\u5199\u9501\uff1a\u5206\u4e3a\u8bfb\u9501\u548c\u5199\u9501\uff0c\u591a\u4e2a\u8bfb\u9501\u4e0d\u4e92\u65a5\uff0c\u8bfb\u9501\u4e0e\u5199\u9501\u4e92\u65a5\uff0c\u8fd9\u662f\u7531jvm\u81ea\u5df1\u63a7\u5236\u7684\uff0c\u4f60\u53ea\u8981\u4e0a\u597d\u76f8\u5e94\u7684\u9501\u5373\u53ef\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u53ea\u8bfb\u6570\u636e\uff0c\u53ef\u4ee5\u5f88\u591a\u4eba\u540c\u65f6\u8bfb\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u5199\uff0c\u90a3\u5c31\u4e0a\u8bfb\u9501\uff1b\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4fee\u6539\u6570\u636e\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u5728\u5199\uff0c\u4e14\u4e0d\u80fd\u540c\u65f6\u8bfb\u53d6\uff0c\u90a3\u5c31\u4e0a\u5199\u9501\u3002\u603b\u4e4b\uff0c\u8bfb\u7684\u65f6\u5019\u4e0a\u8bfb\u9501\uff0c\u5199\u7684\u65f6\u5019\u4e0a\u5199\u9501\uff01  ReentrantReadWriteLock\u4f1a\u4f7f\u7528\u4e24\u628a\u9501\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u4e00\u4e2a\u8bfb\u9501\uff0c\u4e00\u4e2a\u5199\u9501  \u7ebf\u7a0b\u8fdb\u5165\u8bfb\u9501\u7684\u524d\u63d0\u6761\u4ef6\uff1a  \u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u5199\u9501\uff0c\n\u6ca1\u6709\u5199\u8bf7\u6c42\u6216\u8005\u6709\u5199\u8bf7\u6c42\uff0c\u4f46\u8c03\u7528\u7ebf\u7a0b\u548c\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u662f\u540c\u4e00\u4e2a  \u7ebf\u7a0b\u8fdb\u5165\u5199\u9501\u7684\u524d\u63d0\u6761\u4ef6\uff1a  \u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u8bfb\u9501\n\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u7684\u5199\u9501  \u5230ReentrantReadWriteLock\uff0c\u9996\u5148\u8981\u505a\u7684\u662f\u4e0eReentrantLock\u5212\u6e05\u754c\u9650\u3002\u5b83\u548c\u540e\u8005\u90fd\u662f\u5355\u72ec\u7684\u5b9e\u73b0\uff0c\u5f7c\u6b64\u4e4b\u95f4\u6ca1\u6709\u7ee7\u627f\u6216\u5b9e\u73b0\u7684\u5173\u7cfb\u3002\u7136\u540e\u5c31\u662f\u603b\u7ed3\u8fd9\u4e2a\u9501\u673a\u5236\u7684\u7279\u6027\u4e86\uff1a   (a).\u91cd\u5165\u65b9\u9762\u5176\u5185\u90e8\u7684WriteLock\u53ef\u4ee5\u83b7\u53d6ReadLock\uff0c\u4f46\u662f\u53cd\u8fc7\u6765ReadLock\u60f3\u8981\u83b7\u5f97WriteLock\u5219\u6c38\u8fdc\u90fd\u4e0d\u8981\u60f3\u3002 \n (b).WriteLock\u53ef\u4ee5\u964d\u7ea7\u4e3aReadLock\uff0c\u987a\u5e8f\u662f\uff1a\u5148\u83b7\u5f97WriteLock\u518d\u83b7\u5f97ReadLock\uff0c\u7136\u540e\u91ca\u653eWriteLock\uff0c\u8fd9\u65f6\u5019\u7ebf\u7a0b\u5c06\u4fdd\u6301Readlock\u7684\u6301\u6709\u3002\u53cd\u8fc7\u6765ReadLock\u60f3\u8981\u5347\u7ea7\u4e3aWriteLock\u5219\u4e0d\u53ef\u80fd\uff0c\u4e3a\u4ec0\u4e48\uff1f\u53c2\u770b(a)\uff0c\u5475\u5475. \n (c).ReadLock\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u6301\u6709\u5e76\u4e14\u5728\u4f5c\u7528\u65f6\u6392\u65a5\u4efb\u4f55\u7684WriteLock\uff0c\u800cWriteLock\u5219\u662f\u5b8c\u5168\u7684\u4e92\u65a5\u3002\u8fd9\u4e00\u7279\u6027\u6700\u4e3a\u91cd\u8981\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u9ad8\u8bfb\u53d6\u9891\u7387\u800c\u76f8\u5bf9\u8f83\u4f4e\u5199\u5165\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u6b64\u7c7b\u9501\u540c\u6b65\u673a\u5236\u5219\u53ef\u4ee5\u63d0\u9ad8\u5e76\u53d1\u91cf\u3002 \n (d).\u4e0d\u7ba1\u662fReadLock\u8fd8\u662fWriteLock\u90fd\u652f\u6301Interrupt\uff0c\u8bed\u4e49\u4e0eReentrantLock\u4e00\u81f4\u3002 \n (e).WriteLock\u652f\u6301Condition\u5e76\u4e14\u4e0eReentrantLock\u8bed\u4e49\u4e00\u81f4\uff0c\u800cReadLock\u5219\u4e0d\u80fd\u4f7f\u7528Condition\uff0c\u5426\u5219\u629b\u51faUnsupportedOperationException\u5f02\u5e38\u3002  \u4e0b\u9762\u770b\u4e00\u4e2a\u8bfb\u5199\u9501\u7684\u4f8b\u5b50\uff1a  package com.java;\n\n/**\n * Created by junzhang on 2017/4/10.\n */\npublic class ReadWriteLockTest {\n    public static void main(String[] args) {\n        final Queue3 q3 = new Queue3();\n        for(int i=0;i 3;i++)\n        {\n            new Thread(){\n                public void run(){\n                    while(true){\n                        q3.get();\n                    }\n                }\n\n            }.start();\n        }\n        for(int i=0;i 3;i++)\n        {\n            new Thread(){\n                public void run(){\n                    while(true){\n                        q3.put(new Random().nextInt(10000));\n                    }\n                }\n\n            }.start();\n        }\n    }\n}\nclass Queue3{\n    private Object data = null;//\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u5199\u8be5\u6570\u636e\uff0c\u4f46\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u8be5\u6570\u636e\u3002\n    private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n    public void get(){\n        rwl.readLock().lock();//\u4e0a\u8bfb\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ea\u80fd\u8bfb\u4e0d\u80fd\u5199\n        System.out.println(Thread.currentThread().getName() +   be ready to read data! );\n        try {\n            Thread.sleep((long)(Math.random()*1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() +  have read data :  + data);\n        rwl.readLock().unlock(); //\u91ca\u653e\u8bfb\u9501\uff0c\u6700\u597d\u653e\u5728finnaly\u91cc\u9762\n    }\n\n    public void put(Object data){\n\n        rwl.writeLock().lock();//\u4e0a\u5199\u9501\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u7ebf\u7a0b\u8bfb\u4e5f\u4e0d\u5141\u8bb8\u5199\n        System.out.println(Thread.currentThread().getName() +   be ready to write data! );\n        try {\n            Thread.sleep((long)(Math.random()*1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        this.data = data;\n        System.out.println(Thread.currentThread().getName() +   have write data:   + data);\n\n        rwl.writeLock().unlock();//\u91ca\u653e\u5199\u9501    \n    }\n}  Thread-0 be ready to read data!\nThread-1 be ready to read data!\nThread-2 be ready to read data!\nThread-0have read data :null\nThread-2have read data :null\nThread-1have read data :null\nThread-5 be ready to write data!\nThread-5 have write data: 6934\nThread-5 be ready to write data!\nThread-5 have write data: 8987\nThread-5 be ready to write data!\nThread-5 have write data: 8496  \u4e0b\u9762\u4f7f\u7528\u8bfb\u5199\u9501\u6a21\u62df\u4e00\u4e2a\u7f13\u5b58\u5668\uff1a  package com.thread;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class CacheDemo {\n    private Map String, Object  map = new HashMap String, Object ();//\u7f13\u5b58\u5668\n    private ReadWriteLock rwl = new ReentrantReadWriteLock();\n    public static void main(String[] args) {\n\n    }\n    public Object get(String id){\n        Object value = null;\n        rwl.readLock().lock();//\u9996\u5148\u5f00\u542f\u8bfb\u9501\uff0c\u4ece\u7f13\u5b58\u4e2d\u53bb\u53d6\n        try{\n            value = map.get(id); \n            if(value == null){  //\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u91ca\u653e\u8bfb\u9501\uff0c\u4e0a\u5199\u9501\n                rwl.readLock().unlock();\n                rwl.writeLock().lock();\n                try{\n                    if(value == null){\n                        value =  aaa ;  //\u6b64\u65f6\u53ef\u4ee5\u53bb\u6570\u636e\u5e93\u4e2d\u67e5\u627e\uff0c\u8fd9\u91cc\u7b80\u5355\u7684\u6a21\u62df\u4e00\u4e0b\n                    }\n                }finally{\n                    rwl.writeLock().unlock(); //\u91ca\u653e\u5199\u9501\n                }\n                rwl.readLock().lock(); //\u7136\u540e\u518d\u4e0a\u8bfb\u9501\n            }\n        }finally{\n            rwl.readLock().unlock(); //\u6700\u540e\u91ca\u653e\u8bfb\u9501\n        }\n        return value;\n    }\n\n}", 
            "title": "ReentrantReadWriteLock"
        }, 
        {
            "location": "/thread/#stampedlock", 
            "text": "\u8be5\u7c7b\u662f\u4e00\u4e2a\u8bfb\u5199\u9501\u7684\u6539\u8fdb\uff0c\u5b83\u7684\u601d\u60f3\u662f\u8bfb\u5199\u9501\u4e2d\u8bfb\u4e0d\u4ec5\u4e0d\u963b\u585e\u8bfb\uff0c\u540c\u65f6\u4e5f\u4e0d\u5e94\u8be5\u963b\u585e\u5199\u3002  \u8bfb\u4e0d\u963b\u585e\u5199\u7684\u5b9e\u73b0\u601d\u8def\uff1a      \u5728\u8bfb\u7684\u65f6\u5019\u5982\u679c\u53d1\u751f\u4e86\u5199\uff0c\u5219\u5e94\u5f53\u91cd\u8bfb\u800c\u4e0d\u662f\u5728\u8bfb\u7684\u65f6\u5019\u76f4\u63a5\u963b\u585e\u5199\uff01\n    \u56e0\u4e3a\u5728\u8bfb\u7ebf\u7a0b\u975e\u5e38\u591a\u800c\u5199\u7ebf\u7a0b\u6bd4\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u5199\u7ebf\u7a0b\u53ef\u80fd\u53d1\u751f\u9965\u997f\u73b0\u8c61\uff0c\u4e5f\u5c31\u662f\u56e0\u4e3a\u5927\u91cf\u7684\u8bfb\u7ebf\u7a0b\u5b58\u5728\u5e76\u4e14\u8bfb\u7ebf\u7a0b\u90fd\u963b\u585e\u5199\u7ebf\u7a0b\uff0c  \u56e0\u6b64\u5199\u7ebf\u7a0b\u53ef\u80fd\u51e0\u4e4e\u5f88\u5c11\u88ab\u8c03\u5ea6\u6210\u529f\uff01\u5f53\u8bfb\u6267\u884c\u7684\u65f6\u5019\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e86\u5199\uff0c\u5219\u8bfb\u7ebf\u7a0b\u53d1\u73b0\u6570\u636e\u4e0d\u4e00\u81f4\u5219\u6267\u884c\u91cd\u8bfb\u5373\u53ef\u3002\u6240\u4ee5\u8bfb\u5199\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\n\u4f7f\u7528StampedLock\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cd\u65e0\u969c\u788d\u64cd\u4f5c\uff0c\u5373\u8bfb\u5199\u4e4b\u95f4\u4e0d\u4f1a\u963b\u585e\u5bf9\u65b9\uff0c\u4f46\u662f\u5199\u548c\u5199\u4e4b\u95f4\u8fd8\u662f\u963b\u585e\u7684\uff01  \u7a0b\u5e8f\u4e3e\u4f8b\uff1a  public  class  Point {\n           //\u4e00\u4e2a\u70b9\u7684x\uff0cy\u5750\u6807\n           private   double   x,y;\n           /**Stamped\u7c7b\u4f3c\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u4f5c\u7528\uff0c\u6bcf\u6b21\u5199\u7684\u65f6\u5019\u5bf9\u5176+1\u6765\u6539\u53d8\u88ab\u64cd\u4f5c\u5bf9\u8c61\u7684Stamped\u503c\n            * \u8fd9\u6837\u5176\u5b83\u7ebf\u7a0b\u8bfb\u7684\u65f6\u5019\u53d1\u73b0\u76ee\u6807\u5bf9\u8c61\u7684Stamped\u6539\u53d8\uff0c\u5219\u6267\u884c\u91cd\u8bfb*/\n           private final   StampedLock  stampedLock   =  new    StampedLock();\n\n           // an exclusively locked method\n           void move(doubledeltaX,doubledeltaY) {\n                   /**stampedLock\u8c03\u7528writeLock\u548cunlockWrite\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4stampedLock\u7684stamp\u503c\u7684\u53d8\u5316\n                  * \u5373\u6bcf\u6b21+1\uff0c\u76f4\u5230\u52a0\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u4ece0\u91cd\u65b0\u5f00\u59cb */\n                  longstamp =stampedLock.writeLock(); //\u5199\u9501\n                  try {\n                         x +=deltaX;\n                         y +=deltaY;\n                  } finally {\n                         stampedLock.unlockWrite(stamp);//\u91ca\u653e\u5199\u9501\n                  }\n           }\n\n         double distanceFromOrigin() {    // A read-only method\n                 /**tryOptimisticRead\u662f\u4e00\u4e2a\u4e50\u89c2\u7684\u8bfb\uff0c\u4f7f\u7528\u8fd9\u79cd\u9501\u7684\u8bfb\u4e0d\u963b\u585e\u5199\n                 * \u6bcf\u6b21\u8bfb\u7684\u65f6\u5019\u5f97\u5230\u4e00\u4e2a\u5f53\u524d\u7684stamp\u503c\uff08\u7c7b\u4f3c\u65f6\u95f4\u6233\u7684\u4f5c\u7528\uff09*/\n                longstamp =stampedLock.tryOptimisticRead();\n\n                //\u8fd9\u91cc\u5c31\u662f\u8bfb\u64cd\u4f5c\uff0c\u8bfb\u53d6x\u548cy\uff0c\u56e0\u4e3a\u8bfb\u53d6x\u65f6\uff0cy\u53ef\u80fd\u88ab\u5199\u4e86\u65b0\u7684\u503c\uff0c\u6240\u4ee5\u4e0b\u9762\u9700\u8981\u5224\u65ad\n                double    currentX =x,   currentY =y;\n\n                /**\u5982\u679c\u8bfb\u53d6\u7684\u65f6\u5019\u53d1\u751f\u4e86\u5199\uff0c\u5219stampedLock\u7684stamp\u5c5e\u6027\u503c\u4f1a\u53d8\u5316\uff0c\u6b64\u65f6\u9700\u8981\u91cd\u8bfb\uff0c\n                * \u518d\u91cd\u8bfb\u7684\u65f6\u5019\u9700\u8981\u52a0\u8bfb\u9501\uff08\u5e76\u4e14\u91cd\u8bfb\u65f6\u4f7f\u7528\u7684\u5e94\u5f53\u662f\u60b2\u89c2\u7684\u8bfb\u9501\uff0c\u5373\u963b\u585e\u5199\u7684\u8bfb\u9501\uff09\n                 * \u5f53\u7136\u91cd\u8bfb\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u4f7f\u7528tryOptimisticRead\uff0c\u6b64\u65f6\u9700\u8981\u7ed3\u5408\u5faa\u73af\u4e86\uff0c\u5373\u7c7b\u4f3cCAS\u65b9\u5f0f\n                 * \u8bfb\u9501\u53c8\u91cd\u65b0\u8fd4\u56de\u4e00\u4e2astampe\u503c*/\n                if (!stampedLock.validate(stamp)) {\n                        stamp =stampedLock.readLock(); //\u8bfb\u9501\n                        try {\n                              currentX =x;\n                              currentY =y;\n                        }finally{\n                              stampedLock.unlockRead(stamp);//\u91ca\u653e\u8bfb\u9501\n                       }\n                }\n               //\u8bfb\u9501\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u6267\u884c\u8ba1\u7b97\uff0c\u5373\u8bfb\u7684\u65f6\u5019\u6ca1\u6709\u53d1\u751f\u5199\n               return Math.sqrt(currentX *currentX + currentY *currentY);\n          }\n}  StampedLock\u7684\u5b9e\u73b0\u601d\u60f3:  \u5728StampedLock\u4e2d\u4f7f\u7528\u4e86CLH\u81ea\u65cb\u9501\uff0c\u5982\u679c\u53d1\u751f\u4e86\u8bfb\u5931\u8d25\uff0c\u4e0d\u7acb\u523b\u628a\u8bfb\u7ebf\u7a0b\u6302\u8d77\uff0c\u9501\u5f53\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b\u961f\u5217\u3002  \u6240\u6709\u7533\u8bf7\u9501\u4f46\u662f\u6ca1\u6709\u6210\u529f\u7684\u7ebf\u7a0b\u90fd\u4f1a\u8bb0\u5f55\u5230\u8fd9\u4e2a\u961f\u5217\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7ebf\u7a0b\uff09\u4fdd\u5b58\u4e00\u4e2a\u6807\u8bb0\u4f4d\uff08locked\uff09\uff0c\u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u5df2\u7ecf\u91ca\u653e\u9501\u3002\u5f53\u4e00\u4e2a\u672a\u6807\u8bb0\u5230\u961f\u5217\u4e2d\u7684\u7ebf\u7a0b\u8bd5\u56fe\u83b7\u5f97\u9501\u65f6\uff0c\u4f1a\u53d6\u5f97\u5f53\u524d\u7b49\u5f85\u961f\u5217\u5c3e\u90e8\u7684\u8282\u70b9\u4f5c\u4e3a\u5176\u524d\u5e8f\u8282\u70b9\uff0c\u5e76\u4f7f\u7528\u7c7b\u4f3c\u5982\u4e0b\u4ee3\u7801\uff08\u4e00\u4e2a\u7a7a\u7684\u6b7b\u5faa\u73af\uff09\u5224\u65ad\u524d\u5e8f\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u6210\u529f\u7684\u91ca\u653e\u4e86\u9501\uff1a  while(pred.locked){  }     \u89e3\u91ca\uff1apred\u8868\u793a\u5f53\u524d\u8bd5\u56fe\u83b7\u53d6\u9501\u7684\u7ebf\u7a0b\u7684\u524d\u5e8f\u8282\u70b9\uff0c\u5982\u679c\u524d\u5e8f\u8282\u70b9\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u5c31\u6267\u884c\u8be5\u7a7a\u5faa\u73af\u5e76\u4e0d\u65ad\u5224\u65ad\u524d\u5e8f\u8282\u70b9\u7684\u9501\u91ca\u653e\uff0c\u5373\u7c7b\u4f3c\u4e00\u4e2a\u81ea\u65cb\u9501\u7684\u6548\u679c\uff0c\u907f\u514d\u88ab\u7cfb\u7edf\u6302\u8d77\u3002\u5f53\u5faa\u73af\u4e00\u5b9a\u6b21\u6570\u540e\uff0c\u524d\u5e8f\u8282\u70b9\u8fd8\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u5c31\u88ab\u6302\u8d77\u800c\u4e0d\u518d\u81ea\u65cb\uff0c\u56e0\u4e3a\u7a7a\u7684\u6b7b\u5faa\u73af\u6267\u884c\u592a\u591a\u6b21\u6bd4\u6302\u8d77\u66f4\u6d88\u8017\u8d44\u6e90\u3002  JDK8\u5bf9\u5e76\u53d1\u7684\u65b0\u652f\u6301", 
            "title": "StampedLock"
        }, 
        {
            "location": "/lambda/", 
            "text": "Optinal\u7c7b\n\n\n\u65b0\u7248\u672c\u7684Java\uff0c\u6bd4\u5982Java 8\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684Optional\u7c7b\u3002\nOptional\n\u7c7b\u7684Javadoc\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n\n\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4e3anull\u7684\u5bb9\u5668\u5bf9\u8c61\u3002\u5982\u679c\u503c\u5b58\u5728\u5219isPresent()\u65b9\u6cd5\u4f1a\u8fd4\u56detrue\uff0c\u8c03\u7528get()\u65b9\u6cd5\u4f1a\u8fd4\u56de\u8be5\u5bf9\u8c61\u3002\n\n\nof\n\n\nof\u65b9\u6cd5\u901a\u8fc7\u5de5\u5382\u65b9\u6cd5\u521b\u5efaOptional\u7c7b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u521b\u5efa\u5bf9\u8c61\u65f6\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u80fd\u4e3anull\u3002\u5982\u679c\u4f20\u5165\u53c2\u6570\u4e3anull\uff0c\u5219\u629b\u51faNullPointerException \u3002\n\n\n//\u8c03\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efaOptional\u5b9e\u4f8b\nOptional\nString\n name = Optional.of(\nSanaulla\n);\n//\u4f20\u5165\u53c2\u6570\u4e3anull\uff0c\u629b\u51faNullPointerException.\nOptional\nString\n someNull = Optional.of(null);\n\n\n\n\nofNullable\n\n\nofNullable\u4e0eof\u65b9\u6cd5\u76f8\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u4e3anull\u7684\u60c5\u51b5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n//\u4e0b\u9762\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u4efb\u4f55\u503c\u7684Optional\u5b9e\u4f8b\n//\u4f8b\u5982\uff0c\u503c\u4e3a'null'\nOptional empty = Optional.ofNullable(null);\n\n\n\n\nisPresent\n\n\n\u5982\u679c\u503c\u5b58\u5728\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n\n\n//isPresent\u65b9\u6cd5\u7528\u6765\u68c0\u67e5Optional\u5b9e\u4f8b\u4e2d\u662f\u5426\u5305\u542b\u503c\nif (name.isPresent()) {\n  //\u5728Optional\u5b9e\u4f8b\u5185\u8c03\u7528get()\u8fd4\u56de\u5df2\u5b58\u5728\u7684\u503c\n  System.out.println(name.get());//\u8f93\u51faSanaulla\n}\n\n\n\n\nget\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0cget\u65b9\u6cd5\u7528\u6765\u5f97\u5230Optional\u5b9e\u4f8b\u4e2d\u7684\u503c\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e2a\u629b\u51faNoSuchElementException\u7684\u4f8b\u5b50\uff1a\n\n\n\ntry {\n  //\u5728\u7a7a\u7684Optional\u5b9e\u4f8b\u4e0a\u8c03\u7528get()\uff0c\u629b\u51faNoSuchElementException\n  System.out.println(empty.get());\n} catch (NoSuchElementException ex) {\n  System.out.println(ex.getMessage());\n}\n\n\n\n\nifPresent\n\n\n\u8981\u7406\u89e3ifPresent\u65b9\u6cd5\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3Consumer\u7c7b\u3002\u7b80\u7b54\u5730\u8bf4\uff0c\nConsumer\n\u7c7b\u5305\u542b\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u3002\u8be5\u62bd\u8c61\u65b9\u6cd5\u5bf9\u4f20\u5165\u7684\u503c\u8fdb\u884c\u5904\u7406\uff0c\u4f46\u6ca1\u6709\u8fd4\u56de\u503c\u3002Java8\u652f\u6301\u4e0d\u7528\u63a5\u53e3\u76f4\u63a5\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u4f20\u5165\u53c2\u6570\u3002\n\n\n//ifPresent\u65b9\u6cd5\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002\n//lambda\u8868\u8fbe\u5f0f\u5bf9Optional\u7684\u503c\u8c03\u7528consumer\u8fdb\u884c\u5904\u7406\u3002\nname.ifPresent((value) -\n {\n  System.out.println(\nThe length of the value is: \n + value.length());\n});\n\n\n\n\norElse\n\n\n\u5982\u679cOptional\u5b9e\u4f8b\u6709\u503c\u5219\u5c06\u5176\u8fd4\u56de\uff0c\u5426\u5219\u8fd4\u56deorElse\u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n//\u5982\u679c\u503c\u4e0d\u4e3anull\uff0corElse\u65b9\u6cd5\u8fd4\u56deOptional\u5b9e\u4f8b\u7684\u503c\u3002\n//\u5982\u679c\u4e3anull\uff0c\u8fd4\u56de\u4f20\u5165\u7684\u6d88\u606f\u3002\n//\u8f93\u51fa\uff1aThere is no value present!\nSystem.out.println(empty.orElse(\nThere is no value present!\n));\n//\u8f93\u51fa\uff1aSanaulla\nSystem.out.println(name.orElse(\nThere is some value!\n));\n\n\n\n\norElseGet\n\n\norElseGet\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u5f97\u5230\u7684\u9ed8\u8ba4\u503c\u3002orElse\u65b9\u6cd5\u5c06\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0corElseGet\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\nSupplier\n\u63a5\u53e3\u7684\u5b9e\u73b0\u7528\u6765\u751f\u6210\u9ed8\u8ba4\u503c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n//orElseGet\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8eorElse\u4f20\u5165\u7684\u662f\u9ed8\u8ba4\u503c\uff0c\n//orElseGet\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u751f\u6210\u9ed8\u8ba4\u503c\u3002\n//\u8f93\u51fa\uff1aDefault Value\nSystem.out.println(empty.orElseGet(() -\n \nDefault Value\n));\n//\u8f93\u51fa\uff1aSanaulla\nSystem.out.println(name.orElseGet(() -\n \nDefault Value\n));\n\n\n\n\norElseThrow\n\n\n\u5728orElseGet\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f20\u5165\u4e00\u4e2a\nSupplier\u63a5\u53e3\n\u3002\u7136\u800c\uff0c\u5728orElseThrow\u4e2d\u6211\u4eec\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u6216\u65b9\u6cd5\uff0c\u5982\u679c\u503c\u4e0d\u5b58\u5728\u6765\u629b\u51fa\u5f02\u5e38\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\ntry {\n  //orElseThrow\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\u3002\u4e0e\u8fd4\u56de\u9ed8\u8ba4\u503c\u4e0d\u540c\uff0c\n  //orElseThrow\u4f1a\u629b\u51falambda\u8868\u8fbe\u5f0f\u6216\u65b9\u6cd5\u751f\u6210\u7684\u5f02\u5e38 \n\n  empty.orElseThrow(ValueAbsentException::new);\n} catch (Throwable ex) {\n  //\u8f93\u51fa: No value present in the Optional instance\n  System.out.println(ex.getMessage());\n}\n\n\n\n\nValueAbsentException\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nclass ValueAbsentException extends Throwable {\n\n  public ValueAbsentException() {\n    super();\n  }\n\n  public ValueAbsentException(String msg) {\n    super(msg);\n  }\n\n  @Override\n  public String getMessage() {\n    return \nNo value present in the Optional instance\n;\n  }\n}\n\n\n\n\nmap\n\n\n\u5982\u679c\u6709\u503c\uff0c\u5219\u5bf9\u5176\u6267\u884c\u8c03\u7528mapping\u51fd\u6570\u5f97\u5230\u8fd4\u56de\u503c\u3002\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u4e3anull\uff0c\u5219\u521b\u5efa\u5305\u542bmapping\u8fd4\u56de\u503c\u7684Optional\u4f5c\u4e3amap\u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\n\n\n//map\u65b9\u6cd5\u6267\u884c\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f\u53c2\u6570\u5bf9Optional\u5b9e\u4f8b\u7684\u503c\u8fdb\u884c\u4fee\u6539\u3002\n//\u4e3alambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u521b\u5efa\u65b0\u7684Optional\u5b9e\u4f8b\u4f5c\u4e3amap\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002\nOptional\nString\n upperName = name.map((value) -\n value.toUpperCase());\nSystem.out.println(upperName.orElse(\nNo value found\n));\n\n\n\n\nflatMap\n\n\n\u5982\u679c\u6709\u503c\uff0c\u4e3a\u5176\u6267\u884cmapping\u51fd\u6570\u8fd4\u56deOptional\u7c7b\u578b\u8fd4\u56de\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002flatMap\u4e0emap\uff08Funtion\uff09\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8eflatMap\u4e2d\u7684mapper\u8fd4\u56de\u503c\u5fc5\u987b\u662fOptional\u3002\u8c03\u7528\u7ed3\u675f\u65f6\uff0cflatMap\u4e0d\u4f1a\u5bf9\u7ed3\u679c\u7528Optional\u5c01\u88c5\u3002\n\n\n//flatMap\u4e0emap\uff08Function\uff09\u975e\u5e38\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u4f20\u5165\u65b9\u6cd5\u7684lambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\u3002\n//map\u65b9\u6cd5\u4e2d\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u5728map\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u4f1a\u5305\u88c5\u4e3aOptional\u3002 \n//\u4f46flatMap\u65b9\u6cd5\u4e2d\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u5fc5\u987b\u662fOptionl\u5b9e\u4f8b\u3002 \nupperName = name.flatMap((value) -\n Optional.of(value.toUpperCase()));\nSystem.out.println(upperName.orElse(\nNo value found\n));//\u8f93\u51faSANAULLA\n\n\n\n\nfilter\n\n\nfilter\u4e2a\u65b9\u6cd5\u901a\u8fc7\u4f20\u5165\u9650\u5b9a\u6761\u4ef6\u5bf9Optional\u5b9e\u4f8b\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u3002\u6587\u6863\u63cf\u8ff0\u5982\u4e0b\uff1a\n\u5982\u679c\u6709\u503c\u5e76\u4e14\u6ee1\u8db3\u65ad\u8a00\u6761\u4ef6\u8fd4\u56de\u5305\u542b\u8be5\u503c\u7684Optional\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\n\n\n\u8bfb\u5230\u8fd9\u91cc\uff0c\u53ef\u80fd\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4e3afilter\u65b9\u6cd5\u4f20\u5165\u4e00\u6bb5\u4ee3\u7801\u3002\u662f\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u3002\u5bf9\u4e8efilter\u51fd\u6570\u6211\u4eec\u5e94\u8be5\u4f20\u5165\u5b9e\u73b0\u4e86Predicate\u63a5\u53e3\u7684lambda\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089Predicate\u63a5\u53e3\uff0c\u53ef\u4ee5\u53c2\u8003\n\u8fd9\u7bc7\u6587\u7ae0\n\u3002\n\n\n//filter\u65b9\u6cd5\u68c0\u67e5\u7ed9\u5b9a\u7684Option\u503c\u662f\u5426\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u3002\n//\u5982\u679c\u6ee1\u8db3\u5219\u8fd4\u56de\u540c\u4e00\u4e2aOption\u5b9e\u4f8b\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\nOptional\nString\n longName = name.filter((value) -\n value.length() \n 6);\nSystem.out.println(longName.orElse(\nThe name is less than 6 characters\n));//\u8f93\u51faSanaulla\n\n//\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662fOptional\u503c\u4e0d\u6ee1\u8db3filter\u6307\u5b9a\u7684\u6761\u4ef6\u3002\nOptional\nString\n anotherName = Optional.of(\nSana\n);\nOptional\nString\n shortName = anotherName.filter((value) -\n value.length() \n 6);\n//\u8f93\u51fa\uff1aname\u957f\u5ea6\u4e0d\u8db36\u5b57\u7b26\nSystem.out.println(shortName.orElse(\nThe name is less than 6 characters\n));\n\n\n\n\n\u5b8c\u6574\u793a\u4f8b\n\n\npublic class OptionalDemo {\n\n  public static void main(String[] args) {\n    //\u521b\u5efaOptional\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u8fd4\u56de\u503c\u5f97\u5230\u3002\n    Optional\nString\n name = Optional.of(\nSanaulla\n);\n\n    //\u521b\u5efa\u6ca1\u6709\u503c\u7684Optional\u5b9e\u4f8b\uff0c\u4f8b\u5982\u503c\u4e3a'null'\n    Optional empty = Optional.ofNullable(null);\n\n    //isPresent\u65b9\u6cd5\u7528\u6765\u68c0\u67e5Optional\u5b9e\u4f8b\u662f\u5426\u6709\u503c\u3002\n    if (name.isPresent()) {\n      //\u8c03\u7528get()\u8fd4\u56deOptional\u503c\u3002\n      System.out.println(name.get());\n    }\n\n    try {\n      //\u5728Optional\u5b9e\u4f8b\u4e0a\u8c03\u7528get()\u629b\u51faNoSuchElementException\u3002\n      System.out.println(empty.get());\n    } catch (NoSuchElementException ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //ifPresent\u65b9\u6cd5\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u53c2\u6570\u3002\n    //\u5982\u679cOptional\u503c\u4e0d\u4e3a\u7a7a\uff0clambda\u8868\u8fbe\u5f0f\u4f1a\u5904\u7406\u5e76\u5728\u5176\u4e0a\u6267\u884c\u64cd\u4f5c\u3002\n    name.ifPresent((value) -\n {\n      System.out.println(\nThe length of the value is: \n + value.length());\n    });\n\n    //\u5982\u679c\u6709\u503corElse\u65b9\u6cd5\u4f1a\u8fd4\u56deOptional\u5b9e\u4f8b\uff0c\u5426\u5219\u8fd4\u56de\u4f20\u5165\u7684\u9519\u8bef\u4fe1\u606f\u3002\n    System.out.println(empty.orElse(\nThere is no value present!\n));\n    System.out.println(name.orElse(\nThere is some value!\n));\n\n    //orElseGet\u4e0eorElse\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u4f20\u5165\u7684\u9ed8\u8ba4\u503c\u3002\n    //orElseGet\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u751f\u6210\u9ed8\u8ba4\u503c\u3002\n    System.out.println(empty.orElseGet(() -\n \nDefault Value\n));\n    System.out.println(name.orElseGet(() -\n \nDefault Value\n));\n\n    try {\n      //orElseThrow\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u8fd4\u56de\u503c\u3002\n      //orElseThrow\u629b\u51fa\u7531\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f/\u65b9\u6cd5\u751f\u6210\u5f02\u5e38\u3002\n      empty.orElseThrow(ValueAbsentException::new);\n    } catch (Throwable ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //map\u65b9\u6cd5\u901a\u8fc7\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f\u4fee\u6539Optonal\u5b9e\u4f8b\u9ed8\u8ba4\u503c\u3002 \n    //lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u4f1a\u5305\u88c5\u4e3aOptional\u5b9e\u4f8b\u3002\n    Optional\nString\n upperName = name.map((value) -\n value.toUpperCase());\n    System.out.println(upperName.orElse(\nNo value found\n));\n\n    //flatMap\u4e0emap\uff08Funtion\uff09\u975e\u5e38\u76f8\u4f3c\uff0c\u533a\u522b\u5728\u4e8elambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002\n    //map\u65b9\u6cd5\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u4f46\u662f\u8fd4\u56de\u503c\u4f1a\u5305\u88c5\u6210Optional\u5b9e\u4f8b\u3002\n    //\u4f46\u662fflatMap\u65b9\u6cd5\u7684lambda\u8fd4\u56de\u503c\u603b\u662fOptional\u7c7b\u578b\u3002\n    upperName = name.flatMap((value) -\n Optional.of(value.toUpperCase()));\n    System.out.println(upperName.orElse(\nNo value found\n));\n\n    //filter\u65b9\u6cd5\u68c0\u67e5Optiona\u503c\u662f\u5426\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u3002\n    //\u5982\u679c\u6ee1\u8db3\u8fd4\u56deOptional\u5b9e\u4f8b\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\n    Optional\nString\n longName = name.filter((value) -\n value.length() \n 6);\n    System.out.println(longName.orElse(\nThe name is less than 6 characters\n));\n\n    //\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0cOptional\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u3002\n    Optional\nString\n anotherName = Optional.of(\nSana\n);\n    Optional\nString\n shortName = anotherName.filter((value) -\n value.length() \n 6);\n    System.out.println(shortName.orElse(\nThe name is less than 6 characters\n));\n\n  }\n\n}\n\n\n\n\n\u76f8\u5173\u6587\u7ae0\n\n\n\n\nJava 8 \u7684 Nashorn \u811a\u672c\u5f15\u64ce\u6559\u7a0b\n\n\nJava 8 \u7279\u6027 \u2013 \u7ec8\u6781\u624b\u518c\n\n\nava 8 Streams API\uff1a\u5bf9Stream\u5206\u7ec4\u548c\u5206\u533a\n\n\nJava 8\uff1a\u4f7f\u7528compose\u548candThen\u7ec4\u5408\u51fd\u6570\n\n\nJava8 Lambda\u8868\u8fbe\u5f0f\u548c\u6d41\u64cd\u4f5c\u5982\u4f55\u8ba9\u4f60\u7684\u4ee3\u7801\u53d8\u61625\u500d\n\n\nJava 8\u5e76\u884c\u6d41\uff1a\u5fc5\u5907\u6280\u5de7\n\n\n\u7528Java 8 Lambda\u8868\u8fbe\u5f0f\u5b9e\u73b0\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u547d\u4ee4\u6a21\u5f0f\n\n\nJava8\uff1aLambda\u8868\u8fbe\u5f0f\u589e\u5f3a\u7248Comparator\u548c\u6392\u5e8f", 
            "title": "lambda"
        }, 
        {
            "location": "/lambda/#optinal", 
            "text": "\u65b0\u7248\u672c\u7684Java\uff0c\u6bd4\u5982Java 8\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684Optional\u7c7b\u3002 Optional \u7c7b\u7684Javadoc\u63cf\u8ff0\u5982\u4e0b\uff1a  \u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4e3anull\u7684\u5bb9\u5668\u5bf9\u8c61\u3002\u5982\u679c\u503c\u5b58\u5728\u5219isPresent()\u65b9\u6cd5\u4f1a\u8fd4\u56detrue\uff0c\u8c03\u7528get()\u65b9\u6cd5\u4f1a\u8fd4\u56de\u8be5\u5bf9\u8c61\u3002  of  of\u65b9\u6cd5\u901a\u8fc7\u5de5\u5382\u65b9\u6cd5\u521b\u5efaOptional\u7c7b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u521b\u5efa\u5bf9\u8c61\u65f6\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u80fd\u4e3anull\u3002\u5982\u679c\u4f20\u5165\u53c2\u6570\u4e3anull\uff0c\u5219\u629b\u51faNullPointerException \u3002  //\u8c03\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efaOptional\u5b9e\u4f8b\nOptional String  name = Optional.of( Sanaulla );\n//\u4f20\u5165\u53c2\u6570\u4e3anull\uff0c\u629b\u51faNullPointerException.\nOptional String  someNull = Optional.of(null);  ofNullable  ofNullable\u4e0eof\u65b9\u6cd5\u76f8\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u4e3anull\u7684\u60c5\u51b5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  //\u4e0b\u9762\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u4efb\u4f55\u503c\u7684Optional\u5b9e\u4f8b\n//\u4f8b\u5982\uff0c\u503c\u4e3a'null'\nOptional empty = Optional.ofNullable(null);  isPresent  \u5982\u679c\u503c\u5b58\u5728\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002  //isPresent\u65b9\u6cd5\u7528\u6765\u68c0\u67e5Optional\u5b9e\u4f8b\u4e2d\u662f\u5426\u5305\u542b\u503c\nif (name.isPresent()) {\n  //\u5728Optional\u5b9e\u4f8b\u5185\u8c03\u7528get()\u8fd4\u56de\u5df2\u5b58\u5728\u7684\u503c\n  System.out.println(name.get());//\u8f93\u51faSanaulla\n}  get  \u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0cget\u65b9\u6cd5\u7528\u6765\u5f97\u5230Optional\u5b9e\u4f8b\u4e2d\u7684\u503c\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e2a\u629b\u51faNoSuchElementException\u7684\u4f8b\u5b50\uff1a  \ntry {\n  //\u5728\u7a7a\u7684Optional\u5b9e\u4f8b\u4e0a\u8c03\u7528get()\uff0c\u629b\u51faNoSuchElementException\n  System.out.println(empty.get());\n} catch (NoSuchElementException ex) {\n  System.out.println(ex.getMessage());\n}  ifPresent  \u8981\u7406\u89e3ifPresent\u65b9\u6cd5\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3Consumer\u7c7b\u3002\u7b80\u7b54\u5730\u8bf4\uff0c Consumer \u7c7b\u5305\u542b\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u3002\u8be5\u62bd\u8c61\u65b9\u6cd5\u5bf9\u4f20\u5165\u7684\u503c\u8fdb\u884c\u5904\u7406\uff0c\u4f46\u6ca1\u6709\u8fd4\u56de\u503c\u3002Java8\u652f\u6301\u4e0d\u7528\u63a5\u53e3\u76f4\u63a5\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u4f20\u5165\u53c2\u6570\u3002  //ifPresent\u65b9\u6cd5\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002\n//lambda\u8868\u8fbe\u5f0f\u5bf9Optional\u7684\u503c\u8c03\u7528consumer\u8fdb\u884c\u5904\u7406\u3002\nname.ifPresent((value) -  {\n  System.out.println( The length of the value is:   + value.length());\n});  orElse  \u5982\u679cOptional\u5b9e\u4f8b\u6709\u503c\u5219\u5c06\u5176\u8fd4\u56de\uff0c\u5426\u5219\u8fd4\u56deorElse\u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  //\u5982\u679c\u503c\u4e0d\u4e3anull\uff0corElse\u65b9\u6cd5\u8fd4\u56deOptional\u5b9e\u4f8b\u7684\u503c\u3002\n//\u5982\u679c\u4e3anull\uff0c\u8fd4\u56de\u4f20\u5165\u7684\u6d88\u606f\u3002\n//\u8f93\u51fa\uff1aThere is no value present!\nSystem.out.println(empty.orElse( There is no value present! ));\n//\u8f93\u51fa\uff1aSanaulla\nSystem.out.println(name.orElse( There is some value! ));  orElseGet  orElseGet\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u5f97\u5230\u7684\u9ed8\u8ba4\u503c\u3002orElse\u65b9\u6cd5\u5c06\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0corElseGet\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7 Supplier \u63a5\u53e3\u7684\u5b9e\u73b0\u7528\u6765\u751f\u6210\u9ed8\u8ba4\u503c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  //orElseGet\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8eorElse\u4f20\u5165\u7684\u662f\u9ed8\u8ba4\u503c\uff0c\n//orElseGet\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u751f\u6210\u9ed8\u8ba4\u503c\u3002\n//\u8f93\u51fa\uff1aDefault Value\nSystem.out.println(empty.orElseGet(() -   Default Value ));\n//\u8f93\u51fa\uff1aSanaulla\nSystem.out.println(name.orElseGet(() -   Default Value ));  orElseThrow  \u5728orElseGet\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f20\u5165\u4e00\u4e2a Supplier\u63a5\u53e3 \u3002\u7136\u800c\uff0c\u5728orElseThrow\u4e2d\u6211\u4eec\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u6216\u65b9\u6cd5\uff0c\u5982\u679c\u503c\u4e0d\u5b58\u5728\u6765\u629b\u51fa\u5f02\u5e38\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  try {\n  //orElseThrow\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\u3002\u4e0e\u8fd4\u56de\u9ed8\u8ba4\u503c\u4e0d\u540c\uff0c\n  //orElseThrow\u4f1a\u629b\u51falambda\u8868\u8fbe\u5f0f\u6216\u65b9\u6cd5\u751f\u6210\u7684\u5f02\u5e38 \n\n  empty.orElseThrow(ValueAbsentException::new);\n} catch (Throwable ex) {\n  //\u8f93\u51fa: No value present in the Optional instance\n  System.out.println(ex.getMessage());\n}  ValueAbsentException\u5b9a\u4e49\u5982\u4e0b\uff1a  class ValueAbsentException extends Throwable {\n\n  public ValueAbsentException() {\n    super();\n  }\n\n  public ValueAbsentException(String msg) {\n    super(msg);\n  }\n\n  @Override\n  public String getMessage() {\n    return  No value present in the Optional instance ;\n  }\n}  map  \u5982\u679c\u6709\u503c\uff0c\u5219\u5bf9\u5176\u6267\u884c\u8c03\u7528mapping\u51fd\u6570\u5f97\u5230\u8fd4\u56de\u503c\u3002\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u4e3anull\uff0c\u5219\u521b\u5efa\u5305\u542bmapping\u8fd4\u56de\u503c\u7684Optional\u4f5c\u4e3amap\u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002  //map\u65b9\u6cd5\u6267\u884c\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f\u53c2\u6570\u5bf9Optional\u5b9e\u4f8b\u7684\u503c\u8fdb\u884c\u4fee\u6539\u3002\n//\u4e3alambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u521b\u5efa\u65b0\u7684Optional\u5b9e\u4f8b\u4f5c\u4e3amap\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002\nOptional String  upperName = name.map((value) -  value.toUpperCase());\nSystem.out.println(upperName.orElse( No value found ));  flatMap  \u5982\u679c\u6709\u503c\uff0c\u4e3a\u5176\u6267\u884cmapping\u51fd\u6570\u8fd4\u56deOptional\u7c7b\u578b\u8fd4\u56de\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002flatMap\u4e0emap\uff08Funtion\uff09\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8eflatMap\u4e2d\u7684mapper\u8fd4\u56de\u503c\u5fc5\u987b\u662fOptional\u3002\u8c03\u7528\u7ed3\u675f\u65f6\uff0cflatMap\u4e0d\u4f1a\u5bf9\u7ed3\u679c\u7528Optional\u5c01\u88c5\u3002  //flatMap\u4e0emap\uff08Function\uff09\u975e\u5e38\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u4f20\u5165\u65b9\u6cd5\u7684lambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\u3002\n//map\u65b9\u6cd5\u4e2d\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u5728map\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u4f1a\u5305\u88c5\u4e3aOptional\u3002 \n//\u4f46flatMap\u65b9\u6cd5\u4e2d\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u5fc5\u987b\u662fOptionl\u5b9e\u4f8b\u3002 \nupperName = name.flatMap((value) -  Optional.of(value.toUpperCase()));\nSystem.out.println(upperName.orElse( No value found ));//\u8f93\u51faSANAULLA  filter  filter\u4e2a\u65b9\u6cd5\u901a\u8fc7\u4f20\u5165\u9650\u5b9a\u6761\u4ef6\u5bf9Optional\u5b9e\u4f8b\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u3002\u6587\u6863\u63cf\u8ff0\u5982\u4e0b\uff1a\n\u5982\u679c\u6709\u503c\u5e76\u4e14\u6ee1\u8db3\u65ad\u8a00\u6761\u4ef6\u8fd4\u56de\u5305\u542b\u8be5\u503c\u7684Optional\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002  \u8bfb\u5230\u8fd9\u91cc\uff0c\u53ef\u80fd\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4e3afilter\u65b9\u6cd5\u4f20\u5165\u4e00\u6bb5\u4ee3\u7801\u3002\u662f\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u3002\u5bf9\u4e8efilter\u51fd\u6570\u6211\u4eec\u5e94\u8be5\u4f20\u5165\u5b9e\u73b0\u4e86Predicate\u63a5\u53e3\u7684lambda\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089Predicate\u63a5\u53e3\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u3002  //filter\u65b9\u6cd5\u68c0\u67e5\u7ed9\u5b9a\u7684Option\u503c\u662f\u5426\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u3002\n//\u5982\u679c\u6ee1\u8db3\u5219\u8fd4\u56de\u540c\u4e00\u4e2aOption\u5b9e\u4f8b\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\nOptional String  longName = name.filter((value) -  value.length()   6);\nSystem.out.println(longName.orElse( The name is less than 6 characters ));//\u8f93\u51faSanaulla\n\n//\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662fOptional\u503c\u4e0d\u6ee1\u8db3filter\u6307\u5b9a\u7684\u6761\u4ef6\u3002\nOptional String  anotherName = Optional.of( Sana );\nOptional String  shortName = anotherName.filter((value) -  value.length()   6);\n//\u8f93\u51fa\uff1aname\u957f\u5ea6\u4e0d\u8db36\u5b57\u7b26\nSystem.out.println(shortName.orElse( The name is less than 6 characters ));  \u5b8c\u6574\u793a\u4f8b  public class OptionalDemo {\n\n  public static void main(String[] args) {\n    //\u521b\u5efaOptional\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u8fd4\u56de\u503c\u5f97\u5230\u3002\n    Optional String  name = Optional.of( Sanaulla );\n\n    //\u521b\u5efa\u6ca1\u6709\u503c\u7684Optional\u5b9e\u4f8b\uff0c\u4f8b\u5982\u503c\u4e3a'null'\n    Optional empty = Optional.ofNullable(null);\n\n    //isPresent\u65b9\u6cd5\u7528\u6765\u68c0\u67e5Optional\u5b9e\u4f8b\u662f\u5426\u6709\u503c\u3002\n    if (name.isPresent()) {\n      //\u8c03\u7528get()\u8fd4\u56deOptional\u503c\u3002\n      System.out.println(name.get());\n    }\n\n    try {\n      //\u5728Optional\u5b9e\u4f8b\u4e0a\u8c03\u7528get()\u629b\u51faNoSuchElementException\u3002\n      System.out.println(empty.get());\n    } catch (NoSuchElementException ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //ifPresent\u65b9\u6cd5\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u53c2\u6570\u3002\n    //\u5982\u679cOptional\u503c\u4e0d\u4e3a\u7a7a\uff0clambda\u8868\u8fbe\u5f0f\u4f1a\u5904\u7406\u5e76\u5728\u5176\u4e0a\u6267\u884c\u64cd\u4f5c\u3002\n    name.ifPresent((value) -  {\n      System.out.println( The length of the value is:   + value.length());\n    });\n\n    //\u5982\u679c\u6709\u503corElse\u65b9\u6cd5\u4f1a\u8fd4\u56deOptional\u5b9e\u4f8b\uff0c\u5426\u5219\u8fd4\u56de\u4f20\u5165\u7684\u9519\u8bef\u4fe1\u606f\u3002\n    System.out.println(empty.orElse( There is no value present! ));\n    System.out.println(name.orElse( There is some value! ));\n\n    //orElseGet\u4e0eorElse\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u4f20\u5165\u7684\u9ed8\u8ba4\u503c\u3002\n    //orElseGet\u63a5\u53d7lambda\u8868\u8fbe\u5f0f\u751f\u6210\u9ed8\u8ba4\u503c\u3002\n    System.out.println(empty.orElseGet(() -   Default Value ));\n    System.out.println(name.orElseGet(() -   Default Value ));\n\n    try {\n      //orElseThrow\u4e0eorElse\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u8fd4\u56de\u503c\u3002\n      //orElseThrow\u629b\u51fa\u7531\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f/\u65b9\u6cd5\u751f\u6210\u5f02\u5e38\u3002\n      empty.orElseThrow(ValueAbsentException::new);\n    } catch (Throwable ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //map\u65b9\u6cd5\u901a\u8fc7\u4f20\u5165\u7684lambda\u8868\u8fbe\u5f0f\u4fee\u6539Optonal\u5b9e\u4f8b\u9ed8\u8ba4\u503c\u3002 \n    //lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u4f1a\u5305\u88c5\u4e3aOptional\u5b9e\u4f8b\u3002\n    Optional String  upperName = name.map((value) -  value.toUpperCase());\n    System.out.println(upperName.orElse( No value found ));\n\n    //flatMap\u4e0emap\uff08Funtion\uff09\u975e\u5e38\u76f8\u4f3c\uff0c\u533a\u522b\u5728\u4e8elambda\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002\n    //map\u65b9\u6cd5\u7684lambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u4f46\u662f\u8fd4\u56de\u503c\u4f1a\u5305\u88c5\u6210Optional\u5b9e\u4f8b\u3002\n    //\u4f46\u662fflatMap\u65b9\u6cd5\u7684lambda\u8fd4\u56de\u503c\u603b\u662fOptional\u7c7b\u578b\u3002\n    upperName = name.flatMap((value) -  Optional.of(value.toUpperCase()));\n    System.out.println(upperName.orElse( No value found ));\n\n    //filter\u65b9\u6cd5\u68c0\u67e5Optiona\u503c\u662f\u5426\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u3002\n    //\u5982\u679c\u6ee1\u8db3\u8fd4\u56deOptional\u5b9e\u4f8b\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7a7aOptional\u3002\n    Optional String  longName = name.filter((value) -  value.length()   6);\n    System.out.println(longName.orElse( The name is less than 6 characters ));\n\n    //\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0cOptional\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u3002\n    Optional String  anotherName = Optional.of( Sana );\n    Optional String  shortName = anotherName.filter((value) -  value.length()   6);\n    System.out.println(shortName.orElse( The name is less than 6 characters ));\n\n  }\n\n}  \u76f8\u5173\u6587\u7ae0   Java 8 \u7684 Nashorn \u811a\u672c\u5f15\u64ce\u6559\u7a0b  Java 8 \u7279\u6027 \u2013 \u7ec8\u6781\u624b\u518c  ava 8 Streams API\uff1a\u5bf9Stream\u5206\u7ec4\u548c\u5206\u533a  Java 8\uff1a\u4f7f\u7528compose\u548candThen\u7ec4\u5408\u51fd\u6570  Java8 Lambda\u8868\u8fbe\u5f0f\u548c\u6d41\u64cd\u4f5c\u5982\u4f55\u8ba9\u4f60\u7684\u4ee3\u7801\u53d8\u61625\u500d  Java 8\u5e76\u884c\u6d41\uff1a\u5fc5\u5907\u6280\u5de7  \u7528Java 8 Lambda\u8868\u8fbe\u5f0f\u5b9e\u73b0\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u547d\u4ee4\u6a21\u5f0f  Java8\uff1aLambda\u8868\u8fbe\u5f0f\u589e\u5f3a\u7248Comparator\u548c\u6392\u5e8f", 
            "title": "Optinal\u7c7b"
        }, 
        {
            "location": "/JSR310/", 
            "text": "\u65e5\u671f\u65f6\u95f4API\uff08JSR310\uff09\n\n\nJava 8\u5f15\u5165\u4e86\u65b0\u7684\u65e5\u671f\u65f6\u95f4API\uff08JSR 310\uff09\u6539\u8fdb\u4e86\u65e5\u671f\u65f6\u95f4\u7684\u7ba1\u7406\u3002\u65e5\u671f\u548c\u65f6\u95f4\u7ba1\u7406\u4e00\u76f4\u662fJava\u5f00\u53d1\u4eba\u5458\u6700\u75db\u82e6\u7684\u95ee\u9898\u3002java.util.Date\u548c\u540e\u6765\u7684java.util.Calendar\u4e00\u70b9\u4e5f\u6ca1\u6709\u6539\u53d8\u8fd9\u4e2a\u60c5\u51b5\uff08\u751a\u81f3\u8ba9\u4eba\u4eec\u66f4\u52a0\u8ff7\u832b\uff09\u3002\n\n\n\u56e0\u4e3a\u4e0a\u9762\u8fd9\u4e9b\u539f\u56e0\uff0c\u4ea7\u751f\u4e86\nJoda-Time\n \uff0c\u53ef\u4ee5\u66ff\u6362Java\u7684\u65e5\u671f\u65f6\u95f4API\u3002Joda-Time\u6df1\u523b\u5f71\u54cd\u4e86 Java 8\u65b0\u7684\u65e5\u671f\u65f6\u95f4API\uff0cJava 8\u5438\u6536\u4e86Joda-Time \u7684\u7cbe\u534e\u3002\u65b0\u7684java.time\u5305\u5305\u542b\u4e86\u6240\u6709\u5173\u4e8e\u65e5\u671f\u3001\u65f6\u95f4\u3001\u65e5\u671f\u65f6\u95f4\u3001\u65f6\u533a\u3001Instant\uff08\u8ddf\u65e5\u671f\u7c7b\u4f3c\u4f46\u7cbe\u786e\u5230\u7eb3\u79d2\uff09\u3001duration\uff08\u6301\u7eed\u65f6\u95f4\uff09\u548c\u65f6\u949f\u64cd\u4f5c\u7684\u7c7b\u3002\u8bbe\u8ba1\u8fd9\u4e9bAPI\u7684\u65f6\u5019\u5f88\u8ba4\u771f\u5730\u8003\u8651\u4e86\u8fd9\u4e9b\u7c7b\u7684\u4e0d\u53d8\u6027\uff08\u4ecejava.util.Calendar\u5438\u53d6\u7684\u75db\u82e6\u6559\u8bad\uff09\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u65f6\u95f4\u5bf9\u8c61\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002\n\n\n\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u5173\u952e\u7684\u7c7b\u548c\u7528\u6cd5\u793a\u4f8b\u3002\u7b2c\u4e00\u4e2a\u7c7b\u662fClock\uff0cClock\u4f7f\u7528\u65f6\u533a\u6765\u8bbf\u95ee\u5f53\u524d\u7684instant, date\u548ctime\u3002Clock\u7c7b\u53ef\u4ee5\u66ff\u6362 System.currentTimeMillis() \u548c TimeZone.getDefault().\n\n\n// Get the system clock as UTC offset\nfinal Clock clock = Clock.systemUTC();\nSystem.out.println( clock.instant() );\nSystem.out.println( clock.millis() );\n\n\n\n\n\u63a7\u5236\u53f0\u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12T15:19:29.282Z\n1397315969360\n\n\n\n\n\u5176\u4ed6\u7c7b\u6211\u4eec\u770b\u770bLocalTime\u548cLocalDate\u3002LocalDate\u53ea\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u90e8\u5206\uff0c\u6709\u65f6\u533a\u4fe1\u606f\uff0c\u76f8\u5e94\u5730\uff0cLocalTime\u53ea\u4fdd\u5b58ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65f6\u95f4\u90e8\u5206\uff0c\u6ca1\u6709\u65f6\u533a\u4fe1\u606f\u3002LocalDate\u548cLocalTime\u90fd\u53ef\u4ee5\u4eceClock\u5bf9\u8c61\u521b\u5efa\u3002\n\n\n// Get the local date and local time\nfinal LocalDate date = LocalDate.now();\nfinal LocalDate dateFromClock = LocalDate.now( clock );\n\nSystem.out.println( date );\nSystem.out.println( dateFromClock );\n\n// Get the local date and local time\nfinal LocalTime time = LocalTime.now();\nfinal LocalTime timeFromClock = LocalTime.now( clock );\n\nSystem.out.println( time );\nSystem.out.println( timeFromClock );\n\n\n\n\n\u63a7\u5236\u53f0\u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12\n2014-04-12\n11:25:54.568\n15:25:54.568\n\n\n\n\nLocalDateTime\u7c7b\u5408\u5e76\u4e86LocalDate\u548cLocalTime\uff0c\u5b83\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u6ca1\u6709\u65f6\u533a\u4fe1\u606f\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n// Get the local date/time\nfinal LocalDateTime datetime = LocalDateTime.now();\nfinal LocalDateTime datetimeFromClock = LocalDateTime.now( clock );\n\nSystem.out.println( datetime );\nSystem.out.println( datetimeFromClock );\n\n\n\n\n\u8f93\u51fa\u5982\u4e0b\uff1a\n\n2014-04-12T11:37:52.309\n2014-04-12T15:37:52.309\n\n\n\n\n\u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u7c7b\u6301\u6709\u65e5\u671f\u65f6\u95f4\u548c\u65f6\u533a\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528ZonedDateTime\uff0c\u5b83\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u800c\u4e14\u6709\u65f6\u533a\u4fe1\u606f\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\n\n// Get the zoned date/time\nfinal ZonedDateTime zonedDatetime = ZonedDateTime.now();\nfinal ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );\nfinal ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( \nAmerica/Los_Angeles\n ) );\n\nSystem.out.println( zonedDatetime );\nSystem.out.println( zonedDatetimeFromClock );\nSystem.out.println( zonedDatetimeFromZone );\n\n\n\n\n\u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12T11:47:01.017-04:00[America/New_York]\n2014-04-12T15:47:01.017Z\n2014-04-12T08:47:01.017-07:00[America/Los_Angeles]\n\n\n\n\n\u6700\u540e\u8ba9\u6211\u4eec\u770b\u770bDuration\u7c7b\uff0cDuration\u6301\u6709\u7684\u65f6\u95f4\u7cbe\u786e\u5230\u7eb3\u79d2\u3002\u5b83\u8ba9\u6211\u4eec\u5f88\u5bb9\u6613\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e2d\u95f4\u7684\u5dee\u5f02\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff1a\n\n\n// Get duration between two dates\nfinal LocalDateTime from = LocalDateTime.of( 2014, Month.APRIL, 16, 0, 0, 0 );\nfinal LocalDateTime to = LocalDateTime.of( 2015, Month.APRIL, 16, 23, 59, 59 );\n\nfinal Duration duration = Duration.between( from, to );\nSystem.out.println( \nDuration in days: \n + duration.toDays() );\nSystem.out.println( \nDuration in hours: \n + duration.toHours() );\n\n\n\n\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8ba1\u7b97\u4e86\u4e24\u4e2a\u65e5\u671f\uff082014\u5e744\u670816\u65e5\u548c2014\u5e745\u670816\u65e5\uff09\u4e4b\u95f4\u7684\u6301\u7eed\u65f6\u95f4\uff08\u57fa\u4e8e\u5929\u6570\u548c\u5c0f\u65f6\uff09\u8f93\u51fa\u5982\u4e0b\uff1a\n\n\nDuration in days: 365\nDuration in hours: 8783\n\n\n\n\n\u5bf9\u4e8eJava 8\u7684\u65b0\u65e5\u671f\u65f6\u95f4\u7684\u603b\u4f53\u5370\u8c61\u8fd8\u662f\u6bd4\u8f83\u79ef\u6781\u7684\u3002\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\u6709\u7ecf\u5386\u5b9e\u6218\u7684Joda-Time\u7684\u57fa\u7840\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\u65e5\u671f\u65f6\u95f4\u7ec8\u4e8e\u88ab\u8ba4\u771f\u5bf9\u5f85\u800c\u4e14\u542c\u53d6\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u58f0\u97f3\u3002\u5173\u4e8e\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\n\u5b98\u65b9\u6587\u6863\n\u3002", 
            "title": "JSR310-\u65e5\u671f"
        }, 
        {
            "location": "/JSR310/#apijsr310", 
            "text": "Java 8\u5f15\u5165\u4e86\u65b0\u7684\u65e5\u671f\u65f6\u95f4API\uff08JSR 310\uff09\u6539\u8fdb\u4e86\u65e5\u671f\u65f6\u95f4\u7684\u7ba1\u7406\u3002\u65e5\u671f\u548c\u65f6\u95f4\u7ba1\u7406\u4e00\u76f4\u662fJava\u5f00\u53d1\u4eba\u5458\u6700\u75db\u82e6\u7684\u95ee\u9898\u3002java.util.Date\u548c\u540e\u6765\u7684java.util.Calendar\u4e00\u70b9\u4e5f\u6ca1\u6709\u6539\u53d8\u8fd9\u4e2a\u60c5\u51b5\uff08\u751a\u81f3\u8ba9\u4eba\u4eec\u66f4\u52a0\u8ff7\u832b\uff09\u3002  \u56e0\u4e3a\u4e0a\u9762\u8fd9\u4e9b\u539f\u56e0\uff0c\u4ea7\u751f\u4e86 Joda-Time  \uff0c\u53ef\u4ee5\u66ff\u6362Java\u7684\u65e5\u671f\u65f6\u95f4API\u3002Joda-Time\u6df1\u523b\u5f71\u54cd\u4e86 Java 8\u65b0\u7684\u65e5\u671f\u65f6\u95f4API\uff0cJava 8\u5438\u6536\u4e86Joda-Time \u7684\u7cbe\u534e\u3002\u65b0\u7684java.time\u5305\u5305\u542b\u4e86\u6240\u6709\u5173\u4e8e\u65e5\u671f\u3001\u65f6\u95f4\u3001\u65e5\u671f\u65f6\u95f4\u3001\u65f6\u533a\u3001Instant\uff08\u8ddf\u65e5\u671f\u7c7b\u4f3c\u4f46\u7cbe\u786e\u5230\u7eb3\u79d2\uff09\u3001duration\uff08\u6301\u7eed\u65f6\u95f4\uff09\u548c\u65f6\u949f\u64cd\u4f5c\u7684\u7c7b\u3002\u8bbe\u8ba1\u8fd9\u4e9bAPI\u7684\u65f6\u5019\u5f88\u8ba4\u771f\u5730\u8003\u8651\u4e86\u8fd9\u4e9b\u7c7b\u7684\u4e0d\u53d8\u6027\uff08\u4ecejava.util.Calendar\u5438\u53d6\u7684\u75db\u82e6\u6559\u8bad\uff09\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u65f6\u95f4\u5bf9\u8c61\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002  \u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u5173\u952e\u7684\u7c7b\u548c\u7528\u6cd5\u793a\u4f8b\u3002\u7b2c\u4e00\u4e2a\u7c7b\u662fClock\uff0cClock\u4f7f\u7528\u65f6\u533a\u6765\u8bbf\u95ee\u5f53\u524d\u7684instant, date\u548ctime\u3002Clock\u7c7b\u53ef\u4ee5\u66ff\u6362 System.currentTimeMillis() \u548c TimeZone.getDefault().  // Get the system clock as UTC offset\nfinal Clock clock = Clock.systemUTC();\nSystem.out.println( clock.instant() );\nSystem.out.println( clock.millis() );  \u63a7\u5236\u53f0\u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12T15:19:29.282Z\n1397315969360  \u5176\u4ed6\u7c7b\u6211\u4eec\u770b\u770bLocalTime\u548cLocalDate\u3002LocalDate\u53ea\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u90e8\u5206\uff0c\u6709\u65f6\u533a\u4fe1\u606f\uff0c\u76f8\u5e94\u5730\uff0cLocalTime\u53ea\u4fdd\u5b58ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65f6\u95f4\u90e8\u5206\uff0c\u6ca1\u6709\u65f6\u533a\u4fe1\u606f\u3002LocalDate\u548cLocalTime\u90fd\u53ef\u4ee5\u4eceClock\u5bf9\u8c61\u521b\u5efa\u3002  // Get the local date and local time\nfinal LocalDate date = LocalDate.now();\nfinal LocalDate dateFromClock = LocalDate.now( clock );\n\nSystem.out.println( date );\nSystem.out.println( dateFromClock );\n\n// Get the local date and local time\nfinal LocalTime time = LocalTime.now();\nfinal LocalTime timeFromClock = LocalTime.now( clock );\n\nSystem.out.println( time );\nSystem.out.println( timeFromClock );  \u63a7\u5236\u53f0\u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12\n2014-04-12\n11:25:54.568\n15:25:54.568  LocalDateTime\u7c7b\u5408\u5e76\u4e86LocalDate\u548cLocalTime\uff0c\u5b83\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u6ca1\u6709\u65f6\u533a\u4fe1\u606f\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002  // Get the local date/time\nfinal LocalDateTime datetime = LocalDateTime.now();\nfinal LocalDateTime datetimeFromClock = LocalDateTime.now( clock );\n\nSystem.out.println( datetime );\nSystem.out.println( datetimeFromClock );  \u8f93\u51fa\u5982\u4e0b\uff1a\n\n2014-04-12T11:37:52.309\n2014-04-12T15:37:52.309  \u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u7c7b\u6301\u6709\u65e5\u671f\u65f6\u95f4\u548c\u65f6\u533a\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528ZonedDateTime\uff0c\u5b83\u4fdd\u5b58\u6709ISO-8601\u65e5\u671f\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u800c\u4e14\u6709\u65f6\u533a\u4fe1\u606f\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\uff1a  // Get the zoned date/time\nfinal ZonedDateTime zonedDatetime = ZonedDateTime.now();\nfinal ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );\nfinal ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of(  America/Los_Angeles  ) );\n\nSystem.out.println( zonedDatetime );\nSystem.out.println( zonedDatetimeFromClock );\nSystem.out.println( zonedDatetimeFromZone );  \u8f93\u51fa\u5982\u4e0b\uff1a\n2014-04-12T11:47:01.017-04:00[America/New_York]\n2014-04-12T15:47:01.017Z\n2014-04-12T08:47:01.017-07:00[America/Los_Angeles]  \u6700\u540e\u8ba9\u6211\u4eec\u770b\u770bDuration\u7c7b\uff0cDuration\u6301\u6709\u7684\u65f6\u95f4\u7cbe\u786e\u5230\u7eb3\u79d2\u3002\u5b83\u8ba9\u6211\u4eec\u5f88\u5bb9\u6613\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e2d\u95f4\u7684\u5dee\u5f02\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff1a  // Get duration between two dates\nfinal LocalDateTime from = LocalDateTime.of( 2014, Month.APRIL, 16, 0, 0, 0 );\nfinal LocalDateTime to = LocalDateTime.of( 2015, Month.APRIL, 16, 23, 59, 59 );\n\nfinal Duration duration = Duration.between( from, to );\nSystem.out.println(  Duration in days:   + duration.toDays() );\nSystem.out.println(  Duration in hours:   + duration.toHours() );  \u4e0a\u9762\u7684\u4f8b\u5b50\u8ba1\u7b97\u4e86\u4e24\u4e2a\u65e5\u671f\uff082014\u5e744\u670816\u65e5\u548c2014\u5e745\u670816\u65e5\uff09\u4e4b\u95f4\u7684\u6301\u7eed\u65f6\u95f4\uff08\u57fa\u4e8e\u5929\u6570\u548c\u5c0f\u65f6\uff09\u8f93\u51fa\u5982\u4e0b\uff1a  Duration in days: 365\nDuration in hours: 8783  \u5bf9\u4e8eJava 8\u7684\u65b0\u65e5\u671f\u65f6\u95f4\u7684\u603b\u4f53\u5370\u8c61\u8fd8\u662f\u6bd4\u8f83\u79ef\u6781\u7684\u3002\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\u6709\u7ecf\u5386\u5b9e\u6218\u7684Joda-Time\u7684\u57fa\u7840\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\u65e5\u671f\u65f6\u95f4\u7ec8\u4e8e\u88ab\u8ba4\u771f\u5bf9\u5f85\u800c\u4e14\u542c\u53d6\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u58f0\u97f3\u3002\u5173\u4e8e\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002", 
            "title": "\u65e5\u671f\u65f6\u95f4API\uff08JSR310\uff09"
        }, 
        {
            "location": "/gc/", 
            "text": "java\u5185\u5b58\u6a21\u578b\u53cagc\u539f\u7406\n\n\n\u4e00\u4e2a\u4f18\u79c0Java\u7a0b\u5e8f\u5458\uff0c\u5fc5\u987b\u4e86\u89e3Java\u5185\u5b58\u6a21\u578b\u3001GC\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u4f18\u5316GC\u7684\u6027\u80fd\u3001\u4e0eGC\u8fdb\u884c\u6709\u9650\u7684\u4ea4\u4e92\uff0c\u6709\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6027\u80fd\u8981\u6c42\u8f83\u9ad8\uff0c\u4f8b\u5982\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u5b9e\u65f6\u7cfb\u7edf\u7b49\uff0c\u53ea\u6709\u5168\u9762\u63d0\u5347\u5185\u5b58\u7684\u7ba1\u7406\u6548\u7387\uff0c\u624d\u80fd\u63d0\u9ad8\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\n\u672c\u6587\u5c06\u4eceJVM\u5185\u5b58\u6a21\u578b\u3001GC\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53caGC\u7684\u51e0\u4e2a\u5173\u952e\u95ee\u9898\u8fdb\u884c\u63a2\u8ba8\uff0c\u4eceGC\u89d2\u5ea6\u63d0\u9ad8Java\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\n\n\n\u4e00\u3001\nJava\u5185\u5b58\u6a21\u578b\n\n\n\u6309\u7167\u5b98\u65b9\u7684\u8bf4\u6cd5\uff1aJava\u865a\u62df\u673a\u5177\u6709\u4e00\u4e2a\u5806\uff0c\u5806\u662f\u8fd0\u884c\u65f6\u6570\u636e\u533a\u57df\uff0c\u6240\u6709\u7c7b\u5b9e\u4f8b\u548c\u6570\u7ec4\u7684\u5185\u5b58\u5747\u4ece\u6b64\u5904\u5206\u914d\u3002\n\n\nJVM\u4e3b\u8981\u7ba1\u7406\u4e24\u79cd\u7c7b\u578b\u5185\u5b58\uff1a\u5806\u548c\u975e\u5806\uff0c\u5806\u5185\u5b58\uff08Heap Memory\uff09\u662f\u5728Java\u865a\u62df\u673a\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u975e\u5806\u5185\u5b58(Non-heap Memory)\u662f\u5728JVM\u5806\u4e4b\u5916\u7684\u5185\u5b58\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5806\u662fJava\u4ee3\u7801\u53ef\u53ca\u7684\u5185\u5b58\uff0c\u7559\u7ed9\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u7684\uff1b\u975e\u5806\u662fJVM\u7559\u7ed9\u81ea\u5df1\u7528\u7684\uff0c\u5305\u542b\u65b9\u6cd5\u533a\u3001JVM\u5185\u90e8\u5904\u7406\u6216\u4f18\u5316\u6240\u9700\u7684\u5185\u5b58\uff08\u5982 JIT Compiler\uff0cJust-in-time Compiler\uff0c\u5373\u65f6\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u7f13\u5b58\uff09\u3001\u6bcf\u4e2a\u7c7b\u7ed3\u6784\uff08\u5982\u8fd0\u884c\u65f6\u5e38\u6570\u6c60\u3001\u5b57\u6bb5\u548c\u65b9\u6cd5\u6570\u636e\uff09\u4ee5\u53ca\u65b9\u6cd5\u548c\u6784\u9020\u65b9\u6cd5\u7684\u4ee3\u7801\u3002\n\n\nJVM \u5185\u5b58\u5305\u542b\u5982\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a\n\n\n\n\n\u5806\u5185\u5b58\uff08Heap Memory\uff09\uff1a \u5b58\u653eJava\u5bf9\u8c61\n\n\n\u975e\u5806\u5185\u5b58\uff08Non-Heap Memory\uff09\uff1a \u5b58\u653e\u7c7b\u52a0\u8f7d\u4fe1\u606f\u548c\u5176\u5b83meta-data\n\n\n\u5176\u5b83\uff08Other\uff09\uff1a \u5b58\u653eJVM \u81ea\u8eab\u4ee3\u7801\u7b49\n\n\n\n\n\u5728JVM\u542f\u52a8\u65f6\uff0c\u5c31\u5df2\u7ecf\u4fdd\u7559\u4e86\u56fa\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9Heap\u5185\u5b58\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5e76\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u88abJVM\u4f7f\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\u8fd9\u90e8\u5206\u4fdd\u7559\u7684\u5185\u5b58\u4e0d\u4f1a\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5927\u5c0f\u7531\n-Xmx\n\u53c2\u6570\u6307\u5b9a\u3002\u800c\u53e6\u4e00\u90e8\u5206\u5185\u5b58\u5728JVM\u542f\u52a8\u65f6\u5c31\u5206\u914d\u7ed9JVM\uff0c\u4f5c\u4e3aJVM\u7684\u521d\u59cbHeap\u5185\u5b58\u4f7f\u7528\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u662f\u7531\n -Xms \n\u53c2\u6570\u6307\u5b9a\u3002\n\n\n\u4e8c\u3001\nJava\u5185\u5b58\u5206\u914d\n\n\nJava\u7684\u5185\u5b58\u7ba1\u7406\u5b9e\u9645\u4e0a\u5c31\u662f\u53d8\u91cf\u548c\u5bf9\u8c61\u7684\u7ba1\u7406\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u8c61\u7684\u5206\u914d\u548c\u91ca\u653e\u3002\n\n\n\nJVM\u5185\u5b58\u7533\u8bf7\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\nJVM \u4f1a\u8bd5\u56fe\u4e3a\u76f8\u5173Java\u5bf9\u8c61\u5728Eden\u4e2d\u521d\u59cb\u5316\u4e00\u5757\u5185\u5b58\u533a\u57df\n\n\n\u5f53Eden\u7a7a\u95f4\u8db3\u591f\u65f6\uff0c\u5185\u5b58\u7533\u8bf7\u7ed3\u675f\uff1b\u5426\u5219\u5230\u4e0b\u4e00\u6b65\n\n\nJVM \u8bd5\u56fe\u91ca\u653e\u5728Eden\u4e2d\u6240\u6709\u4e0d\u6d3b\u8dc3\u7684\u5bf9\u8c61\uff08\u8fd9\u5c5e\u4e8e1\u6216\u66f4\u9ad8\u7ea7\u7684\u5783\u573e\u56de\u6536\uff09,\u91ca\u653e\u540e\u82e5Eden\u7a7a\u95f4\u4ecd\u7136\u4e0d\u8db3\u4ee5\u653e\u5165\u65b0\u5bf9\u8c61\uff0c\u5219\u8bd5\u56fe\u5c06\u90e8\u5206Eden\u4e2d\u6d3b\u8dc3\u5bf9\u8c61\u653e\u5165Survivor\u533a\n\n\nSurvivor\u533a\u88ab\u7528\u6765\u4f5c\u4e3aEden\u53caOLD\u7684\u4e2d\u95f4\u4ea4\u6362\u533a\u57df\uff0c\u5f53OLD\u533a\u7a7a\u95f4\u8db3\u591f\u65f6\uff0cSurvivor\u533a\u7684\u5bf9\u8c61\u4f1a\u88ab\u79fb\u5230Old\u533a\uff0c\u5426\u5219\u4f1a\u88ab\u4fdd\u7559\u5728Survivor\u533a\n\n\n\u5f53OLD\u533a\u7a7a\u95f4\u4e0d\u591f\u65f6\uff0cJVM \u4f1a\u5728OLD\u533a\u8fdb\u884c\u5b8c\u5168\u7684\u5783\u573e\u6536\u96c6\uff080\u7ea7\uff09\n\n\n\u5b8c\u5168\u5783\u573e\u6536\u96c6\u540e\uff0c\u82e5Survivor\u53caOLD\u533a\u4ecd\u7136\u65e0\u6cd5\u5b58\u653e\u4eceEden\u590d\u5236\u8fc7\u6765\u7684\u90e8\u5206\u5bf9\u8c61\uff0c\u5bfc\u81f4JVM\u65e0\u6cd5\u5728Eden\u533a\u4e3a\u65b0\u5bf9\u8c61\u521b\u5efa\u5185\u5b58\u533a\u57df\uff0c\u5219\u51fa\u73b0\u201dout of memory\u201d\u9519\u8bef\n\n\n\n\n\u4e09\u3001\nGC\u57fa\u672c\u539f\u7406\n\n\nGC\uff08Garbage Collection)\uff0c\u662fJAVA/.NET\u4e2d\u7684\u5783\u573e\u6536\u96c6\u5668\u3002\n\n\nJava\u662f\u7531C++\u53d1\u5c55\u6765\u7684\uff0c\u5b83\u6448\u5f03\u4e86C++\u4e2d\u4e00\u4e9b\u7e41\u7410\u5bb9\u6613\u51fa\u9519\u7684\u4e1c\u897f\uff0c\u5f15\u5165\u4e86\u8ba1\u6570\u5668\u7684\u6982\u5ff5\uff0c\u5176\u4e2d\u6709\u4e00\u6761\u5c31\u662f\u8fd9\u4e2aGC\u673a\u5236\uff08C#\u501f\u9274\u4e86JAVA\uff09\n\n\n\u7f16\u7a0b\u4eba\u5458\u5bb9\u6613\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\uff0c\u5fd8\u8bb0\u6216\u8005\u9519\u8bef\u7684\u5185\u5b58\u56de\u6536\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u6216\u7cfb\u7edf\u7684\u4e0d\u7a33\u5b9a\u751a\u81f3\u5d29\u6e83\uff0cJava\u63d0\u4f9b\u7684GC\u529f\u80fd\u53ef\u4ee5\u81ea\u52a8\u76d1\u6d4b\u5bf9\u8c61\u662f\u5426\u8d85\u8fc7\u4f5c\u7528\u57df\u4ece\u800c\u8fbe\u5230\u81ea\u52a8\u56de\u6536\u5185\u5b58\u7684\u76ee\u7684\uff0cJava\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u91ca\u653e\u5df2\u5206\u914d\u5185\u5b58\u7684\u663e\u793a\u64cd\u4f5c\u65b9\u6cd5\u3002\u6240\u4ee5\uff0cJava\u7684\u5185\u5b58\u7ba1\u7406\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u8c61\u7684\u7ba1\u7406\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u8c61\u7684\u5206\u914d\u548c\u91ca\u653e\u3002\n\n\n\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u5206\u914d\u5bf9\u8c61\u4f7f\u7528new\u5173\u952e\u5b57\uff1b\u91ca\u653e\u5bf9\u8c61\u65f6\uff0c\u53ea\u8981\u5c06\u5bf9\u8c61\u6240\u6709\u5f15\u7528\u8d4b\u503c\u4e3anull\uff0c\u8ba9\u7a0b\u5e8f\u4e0d\u80fd\u591f\u518d\u8bbf\u95ee\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u79f0\u8be5\u5bf9\u8c61\u4e3a\"\u4e0d\u53ef\u8fbe\u7684\".GC\u5c06\u8d1f\u8d23\u56de\u6536\u6240\u6709\"\u4e0d\u53ef\u8fbe\"\u5bf9\u8c61\u7684\u5185\u5b58\u7a7a\u95f4\u3002\n\n\n\u5bf9\u4e8eGC\u6765\u8bf4\uff0c\u5f53\u7a0b\u5e8f\u5458\u521b\u5efa\u5bf9\u8c61\u65f6\uff0cGC\u5c31\u5f00\u59cb\u76d1\u63a7\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\u3001\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u60c5\u51b5\u3002\u901a\u5e38\uff0cGC\u91c7\u7528\u6709\u5411\u56fe\u7684\u65b9\u5f0f\u8bb0\u5f55\u548c\u7ba1\u7406\u5806\uff08heap\uff09\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u786e\u5b9a\u54ea\u4e9b\u5bf9\u8c61\u662f\"\u53ef\u8fbe\u7684\"\uff0c\u54ea\u4e9b\u5bf9\u8c61\u662f\"\u4e0d\u53ef\u8fbe\u7684\".\u5f53GC\u786e\u5b9a\u4e00\u4e9b\u5bf9\u8c61\u4e3a\"\u4e0d\u53ef\u8fbe\"\u65f6\uff0cGC\u5c31\u6709\u8d23\u4efb\u56de\u6536\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u4fdd\u8bc1 GC\u80fd\u591f\u5728\u4e0d\u540c\u5e73\u53f0\u5b9e\u73b0\u7684\u95ee\u9898\uff0cJava\u89c4\u8303\u5bf9GC\u7684\u5f88\u591a\u884c\u4e3a\u90fd\u6ca1\u6709\u8fdb\u884c\u4e25\u683c\u7684\u89c4\u5b9a\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u91c7\u7528\u4ec0\u4e48\u7c7b\u578b\u7684\u56de\u6536\u7b97\u6cd5\u3001\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\u56de\u6536\u7b49\u91cd\u8981\u95ee\u9898\u90fd\u6ca1\u6709\u660e\u786e\u7684\u89c4\u5b9a\u3002\u56e0\u6b64\uff0c\u4e0d\u540c\u7684JVM\u7684\u5b9e\u73b0\u8005\u5f80\u5f80\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u7b97\u6cd5\u3002\u8fd9\u4e5f\u7ed9Java\u7a0b\u5e8f\u5458\u7684\u5f00\u53d1\u5e26\u6765\u884c\u591a\u4e0d\u786e\u5b9a\u6027\u3002\u672c\u6587\u7814\u7a76\u4e86\u51e0\u4e2a\u4e0eGC\u5de5\u4f5c\u76f8\u5173\u7684\u95ee\u9898\uff0c\u52aa\u529b\u51cf\u5c11\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7ed9Java\u7a0b\u5e8f\u5e26\u6765\u7684\u8d1f\u9762\u5f71\u54cd\u3002\n\n\n\u56db\u3001\nGC\u5206\u4ee3\u5212\u5206\n\n\nJVM\u5185\u5b58\u6a21\u578b\u4e2dHeap\u533a\u5206\u4e24\u5927\u5757\uff0c\u4e00\u5757\u662f Young Generation\uff0c\u53e6\u4e00\u5757\u662fOld Generation\u3002\n\n\n\n\n\n\u5728Young Generation\u4e2d\uff0c\u6709\u4e00\u4e2a\u53ebEden Space\u7684\u7a7a\u95f4\uff0c\u4e3b\u8981\u662f\u7528\u6765\u5b58\u653e\u65b0\u751f\u7684\u5bf9\u8c61\uff0c\u8fd8\u6709\u4e24\u4e2aSurvivor Spaces\uff08from\u3001to\uff09\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u603b\u662f\u4e00\u6837\uff0c\u5b83\u4eec\u7528\u6765\u5b58\u653e\u6bcf\u6b21\u5783\u573e\u56de\u6536\u540e\u5b58\u6d3b\u4e0b\u6765\u7684\u5bf9\u8c61\u3002\n\n\n\u5728Old Generation\u4e2d\uff0c\u4e3b\u8981\u5b58\u653e\u5e94\u7528\u7a0b\u5e8f\u4e2d\u751f\u547d\u5468\u671f\u957f\u7684\u5185\u5b58\u5bf9\u8c61\u3002\n\n\n\u5728Young Generation\u5757\u4e2d\uff0c\u5783\u573e\u56de\u6536\u4e00\u822c\u7528Copying\u7684\u7b97\u6cd5\uff0c\u901f\u5ea6\u5feb\u3002\u6bcf\u6b21GC\u7684\u65f6\u5019\uff0c\u5b58\u6d3b\u4e0b\u6765\u7684\u5bf9\u8c61\u9996\u5148\u7531Eden\u62f7\u8d1d\u5230\u67d0\u4e2aSurvivorSpace\uff0c\u5f53Survivor Space\u7a7a\u95f4\u6ee1\u4e86\u540e\uff0c\u5269\u4e0b\u7684live\u5bf9\u8c61\u5c31\u88ab\u76f4\u63a5\u62f7\u8d1d\u5230OldGeneration\u4e2d\u53bb\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21GC\u540e\uff0cEden\u5185\u5b58\u5757\u4f1a\u88ab\u6e05\u7a7a\u3002\n\n\n\u5728Old Generation\u5757\u4e2d\uff0c\u5783\u573e\u56de\u6536\u4e00\u822c\u7528mark-compact\u7684\u7b97\u6cd5\uff0c\u901f\u5ea6\u6162\u4e9b\uff0c\u4f46\u51cf\u5c11\u5185\u5b58\u8981\u6c42\u3002\n\n\n\u5783\u573e\u56de\u6536\u5206\u591a\u7ea7\uff0c0\u7ea7\u4e3a\u5168\u90e8(Full)\u7684\u5783\u573e\u56de\u6536\uff0c\u4f1a\u56de\u6536OLD\u6bb5\u4e2d\u7684\u5783\u573e\uff1b1\u7ea7\u6216\u4ee5\u4e0a\u4e3a\u90e8\u5206\u5783\u573e\u56de\u6536\uff0c\u53ea\u4f1a\u56de\u6536Young\u4e2d\u7684\u5783\u573e\uff0c\u5185\u5b58\u6ea2\u51fa\u901a\u5e38\u53d1\u751f\u4e8eOLD\u6bb5\u6216Perm\u6bb5\u5783\u573e\u56de\u6536\u540e\uff0c\u4ecd\u7136\u65e0\u5185\u5b58\u7a7a\u95f4\u5bb9\u7eb3\u65b0\u7684Java\u5bf9\u8c61\u7684\u60c5\u51b5\u3002\n\n\n\n\n\u4e94\u3001\n\u589e\u91cf\u5f0fGC\n\n\n\u589e\u91cf\u5f0fGC\uff08Incremental GC\uff09\uff0c\u662fGC\u5728JVM\u4e2d\u901a\u5e38\u662f\u7531\u4e00\u4e2a\u6216\u4e00\u7ec4\u8fdb\u7a0b\u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u672c\u8eab\u4e5f\u548c\u7528\u6237\u7a0b\u5e8f\u4e00\u6837\u5360\u7528heap\u7a7a\u95f4\uff0c\u8fd0\u884c\u65f6\u4e5f\u5360\u7528CPU\u3002\n\n\n\u5f53GC\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5f53GC\u8fd0\u884c\u65f6\u95f4\u8f83\u957f\u65f6\uff0c\u7528\u6237\u80fd\u591f\u611f\u5230Java\u7a0b\u5e8f\u7684\u505c\u987f\uff0c\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679cGC\u8fd0\u884c\u65f6\u95f4\u592a\u77ed\uff0c\u5219\u53ef\u80fd\u5bf9\u8c61\u56de\u6536\u7387\u592a\u4f4e\uff0c\u8fd9\u610f\u5473\u7740\u8fd8\u6709\u5f88\u591a\u5e94\u8be5\u56de\u6536\u7684\u5bf9\u8c61\u6ca1\u6709\u88ab\u56de\u6536\uff0c\u4ecd\u7136\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1GC\u7684\u65f6\u5019\uff0c\u5c31\u5fc5\u987b\u5728\u505c\u987f\u65f6\u95f4\u548c\u56de\u6536\u7387\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002\u4e00\u4e2a\u597d\u7684GC\u5b9e\u73b0\u5141\u8bb8\u7528\u6237\u5b9a\u4e49\u81ea\u5df1\u6240\u9700\u8981\u7684\u8bbe\u7f6e\uff0c\u4f8b\u5982\u6709\u4e9b\u5185\u5b58\u6709\u9650\u7684\u8bbe\u5907\uff0c\u5bf9\u5185\u5b58\u7684\u4f7f\u7528\u91cf\u975e\u5e38\u654f\u611f\uff0c\u5e0c\u671bGC\u80fd\u591f\u51c6\u786e\u7684\u56de\u6536\u5185\u5b58\uff0c\u5b83\u5e76\u4e0d\u5728\u610f\u7a0b\u5e8f\u901f\u5ea6\u7684\u5feb\u6162\u3002\u53e6\u5916\u4e00\u4e9b\u5b9e\u65f6\u7f51\u7edc\u6e38\u620f\uff0c\u5c31\u4e0d\u80fd\u591f\u5141\u8bb8\u7a0b\u5e8f\u6709\u957f\u65f6\u95f4\u7684\u4e2d\u65ad\u3002\n\n\n\u589e\u91cf\u5f0fGC\u5c31\u662f\u901a\u8fc7\u4e00\u5b9a\u7684\u56de\u6536\u7b97\u6cd5\uff0c\u628a\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u4e2d\u65ad\uff0c\u5212\u5206\u4e3a\u5f88\u591a\u4e2a\u5c0f\u7684\u4e2d\u65ad\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u51cf\u5c11GC\u5bf9\u7528\u6237\u7a0b\u5e8f\u7684\u5f71\u54cd\u3002\u867d\u7136\uff0c\u589e\u91cf\u5f0fGC\u5728\u6574\u4f53\u6027\u80fd\u4e0a\u53ef\u80fd\u4e0d\u5982\u666e\u901aGC\u7684\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u5b83\u80fd\u591f\u51cf\u5c11\u7a0b\u5e8f\u7684\u6700\u957f\u505c\u987f\u65f6\u95f4\u3002\n\n\nSun JDK\u63d0\u4f9b\u7684HotSpot JVM\u5c31\u80fd\u652f\u6301\u589e\u91cf\u5f0fGC\u3002HotSpot JVM\u7f3a\u7701GC\u65b9\u5f0f\u4e3a\u4e0d\u4f7f\u7528\u589e\u91cfGC\uff0c\u4e3a\u4e86\u542f\u52a8\u589e\u91cfGC\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u8fd0\u884cJava\u7a0b\u5e8f\u65f6\u589e\u52a0-Xincgc\u7684\u53c2\u6570\u3002\n\n\nHotSpot JVM\u589e\u91cf\u5f0fGC\u7684\u5b9e\u73b0\u662f\u91c7\u7528Train GC\u7b97\u6cd5\uff0c\u5b83\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\uff1a\u5c06\u5806\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u6309\u7167\u521b\u5efa\u548c\u4f7f\u7528\u60c5\u51b5\u8fdb\u884c\u5206\u7ec4\uff08\u5206\u5c42\uff09\uff0c\u5c06\u4f7f\u7528\u9891\u7e41\u9ad8\u548c\u5177\u6709\u76f8\u5173\u6027\u7684\u5bf9\u8c61\u653e\u5728\u4e00\u961f\u4e2d\uff0c\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u4e0d\u65ad\u5bf9\u7ec4\u8fdb\u884c\u8c03\u6574\u3002\u5f53GC\u8fd0\u884c\u65f6\uff0c\u5b83\u603b\u662f\u5148\u56de\u6536\u6700\u8001\u7684\uff08\u6700\u8fd1\u5f88\u5c11\u8bbf\u95ee\u7684\uff09\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6574\u7ec4\u90fd\u4e3a\u53ef\u56de\u6536\u5bf9\u8c61\uff0cGC\u5c06\u6574\u7ec4\u56de\u6536\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21GC\u8fd0\u884c\u53ea\u56de\u6536\u4e00\u5b9a\u6bd4\u4f8b\u7684\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u987a\u7545\u8fd0\u884c\u3002\n\n\n\u516d\u3001\n\u8be6\u89e3\u51fd\u6570finalize\n\n\nfinalize \u662f\u4f4d\u4e8eObject\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be6\u89c1\u6211\u7684\u5f00\u6e90\u9879\u76ee\uff1a\nsrc-jdk1.7.0_02\n\n\nprotected void finalize() throws Throwable { }\n\n\n\u8be5\u65b9\u6cd5\u7684\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3aprotected\uff0c\u7531\u4e8e\u6240\u6709\u7c7b\u4e3aObject\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u7528\u6237\u7c7b\u5f88\u5bb9\u6613\u8bbf\u95ee\u5230\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\n\u7531\u4e8e\uff0cfinalize\u51fd\u6570\u6ca1\u6709\u81ea\u52a8\u5b9e\u73b0\u94fe\u5f0f\u8c03\u7528\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u7684\u5b9e\u73b0\uff0c\u56e0\u6b64finalize\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u901a\u5e38\u662f super.finalize\uff08\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4e0b\u5230\u4e0a\u5b9e\u73b0finalize\u7684\u8c03\u7528\uff0c\u5373\u5148\u91ca\u653e\u81ea\u5df1\u7684\u8d44\u6e90\uff0c\u7136\u540e\u518d\u91ca\u653e\u7236\u7c7b\u7684\u8d44\u6e90\u3002\u6839\u636eJava\u8bed\u8a00\u89c4\u8303\uff0cJVM\u4fdd\u8bc1\u8c03\u7528finalize\u51fd\u6570\u4e4b\u524d\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u4f46\u662fJVM\u4e0d\u4fdd\u8bc1\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\u3002\u53e6\u5916\uff0c\u89c4\u8303\u8fd8\u4fdd\u8bc1finalize\u51fd\u6570\u6700\u591a\u8fd0\u884c\u4e00\u6b21\u3002\n\n\n\u5f88\u591aJava\u521d\u5b66\u8005\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u7c7b\u4f3c\u4e0eC++\u4e2d\u7684\u6790\u6784\u51fd\u6570\uff0c\u5c06\u5f88\u591a\u5bf9\u8c61\u3001\u8d44\u6e90\u7684\u91ca\u653e\u90fd\u653e\u5728\u8fd9\u4e00\u51fd\u6570\u91cc\u9762\u3002\u5176\u5b9e\uff0c\u8fd9\u4e0d\u662f\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u539f\u56e0\u6709\u4e09\uff1a\n\n\n\u5176\u4e00\u3001GC\u4e3a\u4e86\u80fd\u591f\u652f\u6301finalize\u51fd\u6570\uff0c\u8981\u5bf9\u8986\u76d6\u8fd9\u4e2a\u51fd\u6570\u7684\u5bf9\u8c61\u4f5c\u5f88\u591a\u9644\u52a0\u7684\u5de5\u4f5c\u3002\n\n\n\u5176\u4e8c\u3001\u5728finalize\u8fd0\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u8be5\u5bf9\u8c61\u53ef\u80fd\u53d8\u6210\u53ef\u8fbe\u7684\uff0cGC\u8fd8\u8981\u518d\u68c0\u67e5\u4e00\u6b21\u8be5\u5bf9\u8c61\u662f\u5426\u662f\u53ef\u8fbe\u7684\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 finalize\u4f1a\u964d\u4f4eGC\u7684\u8fd0\u884c\u6027\u80fd\u3002\n\n\n\u5176\u4e09\u3001\u7531\u4e8eGC\u8c03\u7528finalize\u7684\u65f6\u95f4\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u91ca\u653e\u8d44\u6e90\u4e5f\u662f\u4e0d\u786e\u5b9a\u7684\u3002\n\n\n\u901a\u5e38\uff0cfinalize\u7528\u4e8e\u4e00\u4e9b\u4e0d\u5bb9\u6613\u63a7\u5236\u3001\u5e76\u4e14\u975e\u5e38\u91cd\u8981\u8d44\u6e90\u7684\u91ca\u653e\uff0c\u4f8b\u5982\u4e00\u4e9bI/O\u7684\u64cd\u4f5c\uff0c\u6570\u636e\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u8d44\u6e90\u7684\u91ca\u653e\u5bf9\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u975e\u5e38\u5173\u952e\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5458\u5e94\u8be5\u4ee5\u901a\u8fc7\u7a0b\u5e8f\u672c\u8eab\u7ba1\u7406\uff08\u5305\u62ec\u91ca\u653e\uff09\u8fd9\u4e9b\u8d44\u6e90\u4e3a\u4e3b\uff0c\u4ee5finalize\u51fd\u6570\u91ca\u653e\u8d44\u6e90\u65b9\u5f0f\u4e3a\u8f85\uff0c\u5f62\u6210\u4e00\u79cd\u53cc\u4fdd\u9669\u7684\u7ba1\u7406\u673a\u5236\uff0c\u800c\u4e0d\u5e94\u8be5\u4ec5\u4ec5\u4f9d\u9760finalize\u6765\u91ca\u653e\u8d44\u6e90\u3002\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff0cfinalize\u51fd\u6570\u88ab\u8c03\u7528\u4ee5\u540e\uff0c\u4ecd\u7136\u53ef\u80fd\u662f\u53ef\u8fbe\u7684\uff0c\u540c\u65f6\u4e5f\u53ef\u8bf4\u660e\u4e00\u4e2a\u5bf9\u8c61\u7684finalize\u53ea\u53ef\u80fd\u8fd0\u884c\u4e00\u6b21\u3002\n\n\nclass MyObject {  \n    Test main;      // \u8bb0\u5f55Test\u5bf9\u8c61\uff0c\u5728finalize\u4e2d\u65f6\u7528\u4e8e\u6062\u590d\u53ef\u8fbe\u6027  \n\n    public MyObject(Test t) {  \n        main = t;   // \u4fdd\u5b58Test \u5bf9\u8c61  \n    }  \n\n    protected void finalize() {  \n        main.ref = this;    // \u6062\u590d\u672c\u5bf9\u8c61\uff0c\u8ba9\u672c\u5bf9\u8c61\u53ef\u8fbe  \n        System.out.println(\nThis is finalize\n);     // \u7528\u4e8e\u6d4b\u8bd5finalize\u53ea\u8fd0\u884c\u4e00\u6b21  \n    }  \n}  \n\nclass Test {  \n    MyObject ref;  \n\n    public static void main(String[] args) {  \n        Test test = new Test();  \n        test.ref = new MyObject(test);  \n        test.ref = null;    // MyObject\u5bf9\u8c61\u4e3a\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0cfinalize\u5c06\u88ab\u8c03\u7528  \n        System.gc();  \n        if (test.ref != null)  \n            System.out.println(\nMy Object\u8fd8\u6d3b\u7740\n);  \n    }  \n}  \n\n\n\n\n\u8fd0\u884c\u7ed3\u679c\uff1a\n\n\nThis is finalize\n\n\nMy Object\u8fd8\u6d3b\u7740\n\n\n\u6b64\u4f8b\u5b50\u4e2d\u9700\u8981\u6ce8\u610f\uff0c\u867d\u7136MyObject\u5bf9\u8c61\u5728finalize\u4e2d\u53d8\u6210\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4f46\u662f\u4e0b\u6b21\u56de\u6536\u65f6\u5019\uff0cfinalize\u5374\u4e0d\u518d\u88ab\u8c03\u7528\uff0c\u56e0\u4e3afinalize\u51fd\u6570\u6700\u591a\u53ea\u8c03\u7528\u4e00\u6b21\u3002\n\n\n\u4e03\u3001\nGC\u7a0b\u5e8f\u4ea4\u4e92\n\n\n\u7a0b\u5e8f\u5982\u4f55\u4e0eGC\u8fdb\u884c\u4ea4\u4e92\u5462\uff1f Java2\u589e\u5f3a\u4e86\u5185\u5b58\u7ba1\u7406\u529f\u80fd\uff0c\u589e\u52a0\u4e86\u4e00\u4e2ajava.lang.ref\u5305\uff0c\u8be6\u89c1\u6211\u7684\u5f00\u6e90\u9879\u76ee\uff1asrc-jdk1.7.0_02\n\n\n\u5176\u4e2d\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f15\u7528\u7c7b\u3002\u8fd9\u4e09\u79cd\u5f15\u7528\u7c7b\u5206\u522b\u4e3a\uff1aSoftReference\u3001 WeakReference\u3001 PhantomReference\n\n\n\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e9b\u5f15\u7528\u7c7b\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0eGC\u8fdb\u884c\u4ea4\u4e92\uff0c\u4ee5\u4fbf\u6539\u5584GC\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u8fd9\u4e9b\u5f15\u7528\u7c7b\u7684\u5f15\u7528\u5f3a\u5ea6\u4ecb\u4e8e\u53ef\u8fbe\u5bf9\u8c61\u548c\u4e0d\u53ef\u8fbe\u5bf9\u8c61\u4e4b\u95f4\u3002\n\n\n\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\u4e5f\u975e\u5e38\u5bb9\u6613\uff0c\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2aSoft Reference\u5bf9\u8c61\uff0c\u90a3\u4e48\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u91c7\u7528\u666e\u901a\u5f15\u7528\u65b9\u5f0f\uff08\u53ef\u8fbe\u5bf9\u8c61\uff09\uff1b\u7136\u540e\u518d\u521b\u5efa\u4e00\u4e2aSoftReference\u5f15\u7528\u8be5\u5bf9\u8c61\uff1b\u6700\u540e\u5c06\u666e\u901a\u5f15\u7528\u8bbe\u7f6e\u4e3anull\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ea\u6709\u4e00\u4e2aSoft Reference\u5f15\u7528\u3002\u540c\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u5bf9\u8c61\u4e3aSoft Reference \u5bf9\u8c61\u3002\n\n\nSoft Reference\u7684\u4e3b\u8981\u7279\u70b9\u662f\u636e\u6709\u8f83\u5f3a\u7684\u5f15\u7528\u529f\u80fd\u3002\u53ea\u6709\u5f53\u5185\u5b58\u4e0d\u591f\u7684\u65f6\u5019\uff0c\u624d\u8fdb\u884c\u56de\u6536\u8fd9\u7c7b\u5185\u5b58\uff0c\u56e0\u6b64\u5728\u5185\u5b58\u8db3\u591f\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u901a\u5e38\u4e0d\u88ab\u56de\u6536\u3002\u53e6\u5916\uff0c\u8fd9\u4e9b\u5f15\u7528\u5bf9\u8c61\u8fd8\u80fd\u4fdd\u8bc1\u5728Java\u629b\u51faOutOfMemory \u5f02\u5e38\u4e4b\u524d\uff0c\u88ab\u8bbe\u7f6e\u4e3anull\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4e00\u4e9b\u5e38\u7528\u56fe\u7247\u7684\u7f13\u5b58\uff0c\u5b9e\u73b0Cache\u7684\u529f\u80fd\uff0c\u4fdd\u8bc1\u6700\u5927\u9650\u5ea6\u7684\u4f7f\u7528\u5185\u5b58\u800c\u4e0d\u5f15\u8d77OutOfMemory\u3002\u4ee5\u4e0b\u7ed9\u51fa\u8fd9\u79cd\u5f15\u7528\u7c7b\u578b\u7684\u4f7f\u7528\u4f2a\u4ee3\u7801\uff1a\n\n\n// \u7533\u8bf7\u4e00\u4e2a\u56fe\u50cf\u5bf9\u8c61  \n\u3000Image image=new Image();       // \u521b\u5efaImage\u5bf9\u8c61  \n\u3000\u2026  \n\u3000// \u4f7f\u7528 image  \n\u3000\u2026  \n\u3000// \u4f7f\u7528\u5b8c\u4e86image\uff0c\u5c06\u5b83\u8bbe\u7f6e\u4e3asoft \u5f15\u7528\u7c7b\u578b\uff0c\u5e76\u4e14\u91ca\u653e\u5f3a\u5f15\u7528\uff1b  \n\u3000SoftReference sr=new SoftReference(image);  \n\u3000image=null;  \n\u3000\u2026  \n\u3000// \u4e0b\u6b21\u4f7f\u7528\u65f6  \n\u3000if (sr!=null)   \n    image=sr.get();  \n\u3000else{  \n\u3000       image=new Image();  //\u7531\u4e8eGC\u7531\u4e8e\u4f4e\u5185\u5b58\uff0c\u5df2\u91ca\u653eimage\uff0c\u56e0\u6b64\u9700\u8981\u91cd\u65b0\u88c5\u8f7d\uff1b  \n\u3000       sr=new SoftReference(image);  \n\u3000}  \n\n\n\n\nWeak\u5f15\u7528\u5bf9\u8c61\u4e0eSoft\u5f15\u7528\u5bf9\u8c61\u7684\u6700\u5927\u4e0d\u540c\u5c31\u5728\u4e8e\uff1aGC\u5728\u8fdb\u884c\u56de\u6536\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u7b97\u6cd5\u68c0\u67e5\u662f\u5426\u56de\u6536Soft\u5f15\u7528\u5bf9\u8c61\uff0c\u800c\u5bf9\u4e8eWeak\u5f15\u7528\u5bf9\u8c61\uff0cGC\u603b\u662f\u8fdb\u884c\u56de\u6536\u3002Weak\u5f15\u7528\u5bf9\u8c61\u66f4\u5bb9\u6613\u3001\u66f4\u5feb\u88abGC\u56de\u6536\u3002\u867d\u7136\uff0cGC\u5728\u8fd0\u884c\u65f6\u4e00\u5b9a\u56de\u6536Weak\u5bf9\u8c61\uff0c\u4f46\u662f\u590d\u6742\u5173\u7cfb\u7684Weak\u5bf9\u8c61\u7fa4\u5e38\u5e38\u9700\u8981\u597d\u51e0\u6b21GC\u7684\u8fd0\u884c\u624d\u80fd\u5b8c\u6210\u3002Weak\u5f15\u7528\u5bf9\u8c61\u5e38\u5e38\u7528\u4e8eMap\u7ed3\u6784\u4e2d\uff0c\u5f15\u7528\u6570\u636e\u91cf\u8f83\u5927\u7684\u5bf9\u8c61\uff0c\u4e00\u65e6\u8be5\u5bf9\u8c61\u7684\u5f3a\u5f15\u7528\u4e3anull\u65f6\uff0cGC\u80fd\u591f\u5feb\u901f\u5730\u56de\u6536\u8be5\u5bf9\u8c61\u7a7a\u95f4\u3002\n\n\nPhantom\u5f15\u7528\u7684\u7528\u9014\u8f83\u5c11\uff0c\u4e3b\u8981\u7528\u4e8e\u8f85\u52a9finalize\u51fd\u6570\u7684\u4f7f\u7528\u3002Phantom\u5bf9\u8c61\u6307\u4e00\u4e9b\u5bf9\u8c61\uff0c\u5b83\u4eec\u6267\u884c\u5b8c\u4e86finalize\u51fd\u6570\uff0c\u5e76\u4e3a\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u4eec\u8fd8\u6ca1\u6709\u88abGC\u56de\u6536\u3002\u8fd9\u79cd\u5bf9\u8c61\u53ef\u4ee5\u8f85\u52a9finalize\u8fdb\u884c\u4e00\u4e9b\u540e\u671f\u7684\u56de\u6536\u5de5\u4f5c\uff0c\u6211\u4eec\u901a\u8fc7\u8986\u76d6Reference\u7684clear()\u65b9\u6cd5\uff0c\u589e\u5f3a\u8d44\u6e90\u56de\u6536\u673a\u5236\u7684\u7075\u6d3b\u6027\u3002", 
            "title": "jvm\u53caGC"
        }, 
        {
            "location": "/gc/#javagc", 
            "text": "\u4e00\u4e2a\u4f18\u79c0Java\u7a0b\u5e8f\u5458\uff0c\u5fc5\u987b\u4e86\u89e3Java\u5185\u5b58\u6a21\u578b\u3001GC\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u4f18\u5316GC\u7684\u6027\u80fd\u3001\u4e0eGC\u8fdb\u884c\u6709\u9650\u7684\u4ea4\u4e92\uff0c\u6709\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6027\u80fd\u8981\u6c42\u8f83\u9ad8\uff0c\u4f8b\u5982\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u5b9e\u65f6\u7cfb\u7edf\u7b49\uff0c\u53ea\u6709\u5168\u9762\u63d0\u5347\u5185\u5b58\u7684\u7ba1\u7406\u6548\u7387\uff0c\u624d\u80fd\u63d0\u9ad8\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\n\u672c\u6587\u5c06\u4eceJVM\u5185\u5b58\u6a21\u578b\u3001GC\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53caGC\u7684\u51e0\u4e2a\u5173\u952e\u95ee\u9898\u8fdb\u884c\u63a2\u8ba8\uff0c\u4eceGC\u89d2\u5ea6\u63d0\u9ad8Java\u7a0b\u5e8f\u7684\u6027\u80fd\u3002  \u4e00\u3001 Java\u5185\u5b58\u6a21\u578b  \u6309\u7167\u5b98\u65b9\u7684\u8bf4\u6cd5\uff1aJava\u865a\u62df\u673a\u5177\u6709\u4e00\u4e2a\u5806\uff0c\u5806\u662f\u8fd0\u884c\u65f6\u6570\u636e\u533a\u57df\uff0c\u6240\u6709\u7c7b\u5b9e\u4f8b\u548c\u6570\u7ec4\u7684\u5185\u5b58\u5747\u4ece\u6b64\u5904\u5206\u914d\u3002  JVM\u4e3b\u8981\u7ba1\u7406\u4e24\u79cd\u7c7b\u578b\u5185\u5b58\uff1a\u5806\u548c\u975e\u5806\uff0c\u5806\u5185\u5b58\uff08Heap Memory\uff09\u662f\u5728Java\u865a\u62df\u673a\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u975e\u5806\u5185\u5b58(Non-heap Memory)\u662f\u5728JVM\u5806\u4e4b\u5916\u7684\u5185\u5b58\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5806\u662fJava\u4ee3\u7801\u53ef\u53ca\u7684\u5185\u5b58\uff0c\u7559\u7ed9\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u7684\uff1b\u975e\u5806\u662fJVM\u7559\u7ed9\u81ea\u5df1\u7528\u7684\uff0c\u5305\u542b\u65b9\u6cd5\u533a\u3001JVM\u5185\u90e8\u5904\u7406\u6216\u4f18\u5316\u6240\u9700\u7684\u5185\u5b58\uff08\u5982 JIT Compiler\uff0cJust-in-time Compiler\uff0c\u5373\u65f6\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u7f13\u5b58\uff09\u3001\u6bcf\u4e2a\u7c7b\u7ed3\u6784\uff08\u5982\u8fd0\u884c\u65f6\u5e38\u6570\u6c60\u3001\u5b57\u6bb5\u548c\u65b9\u6cd5\u6570\u636e\uff09\u4ee5\u53ca\u65b9\u6cd5\u548c\u6784\u9020\u65b9\u6cd5\u7684\u4ee3\u7801\u3002  JVM \u5185\u5b58\u5305\u542b\u5982\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a   \u5806\u5185\u5b58\uff08Heap Memory\uff09\uff1a \u5b58\u653eJava\u5bf9\u8c61  \u975e\u5806\u5185\u5b58\uff08Non-Heap Memory\uff09\uff1a \u5b58\u653e\u7c7b\u52a0\u8f7d\u4fe1\u606f\u548c\u5176\u5b83meta-data  \u5176\u5b83\uff08Other\uff09\uff1a \u5b58\u653eJVM \u81ea\u8eab\u4ee3\u7801\u7b49   \u5728JVM\u542f\u52a8\u65f6\uff0c\u5c31\u5df2\u7ecf\u4fdd\u7559\u4e86\u56fa\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9Heap\u5185\u5b58\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5e76\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u88abJVM\u4f7f\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\u8fd9\u90e8\u5206\u4fdd\u7559\u7684\u5185\u5b58\u4e0d\u4f1a\u88ab\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5927\u5c0f\u7531 -Xmx \u53c2\u6570\u6307\u5b9a\u3002\u800c\u53e6\u4e00\u90e8\u5206\u5185\u5b58\u5728JVM\u542f\u52a8\u65f6\u5c31\u5206\u914d\u7ed9JVM\uff0c\u4f5c\u4e3aJVM\u7684\u521d\u59cbHeap\u5185\u5b58\u4f7f\u7528\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u662f\u7531  -Xms  \u53c2\u6570\u6307\u5b9a\u3002  \u4e8c\u3001 Java\u5185\u5b58\u5206\u914d  Java\u7684\u5185\u5b58\u7ba1\u7406\u5b9e\u9645\u4e0a\u5c31\u662f\u53d8\u91cf\u548c\u5bf9\u8c61\u7684\u7ba1\u7406\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u8c61\u7684\u5206\u914d\u548c\u91ca\u653e\u3002  JVM\u5185\u5b58\u7533\u8bf7\u8fc7\u7a0b\u5982\u4e0b\uff1a   JVM \u4f1a\u8bd5\u56fe\u4e3a\u76f8\u5173Java\u5bf9\u8c61\u5728Eden\u4e2d\u521d\u59cb\u5316\u4e00\u5757\u5185\u5b58\u533a\u57df  \u5f53Eden\u7a7a\u95f4\u8db3\u591f\u65f6\uff0c\u5185\u5b58\u7533\u8bf7\u7ed3\u675f\uff1b\u5426\u5219\u5230\u4e0b\u4e00\u6b65  JVM \u8bd5\u56fe\u91ca\u653e\u5728Eden\u4e2d\u6240\u6709\u4e0d\u6d3b\u8dc3\u7684\u5bf9\u8c61\uff08\u8fd9\u5c5e\u4e8e1\u6216\u66f4\u9ad8\u7ea7\u7684\u5783\u573e\u56de\u6536\uff09,\u91ca\u653e\u540e\u82e5Eden\u7a7a\u95f4\u4ecd\u7136\u4e0d\u8db3\u4ee5\u653e\u5165\u65b0\u5bf9\u8c61\uff0c\u5219\u8bd5\u56fe\u5c06\u90e8\u5206Eden\u4e2d\u6d3b\u8dc3\u5bf9\u8c61\u653e\u5165Survivor\u533a  Survivor\u533a\u88ab\u7528\u6765\u4f5c\u4e3aEden\u53caOLD\u7684\u4e2d\u95f4\u4ea4\u6362\u533a\u57df\uff0c\u5f53OLD\u533a\u7a7a\u95f4\u8db3\u591f\u65f6\uff0cSurvivor\u533a\u7684\u5bf9\u8c61\u4f1a\u88ab\u79fb\u5230Old\u533a\uff0c\u5426\u5219\u4f1a\u88ab\u4fdd\u7559\u5728Survivor\u533a  \u5f53OLD\u533a\u7a7a\u95f4\u4e0d\u591f\u65f6\uff0cJVM \u4f1a\u5728OLD\u533a\u8fdb\u884c\u5b8c\u5168\u7684\u5783\u573e\u6536\u96c6\uff080\u7ea7\uff09  \u5b8c\u5168\u5783\u573e\u6536\u96c6\u540e\uff0c\u82e5Survivor\u53caOLD\u533a\u4ecd\u7136\u65e0\u6cd5\u5b58\u653e\u4eceEden\u590d\u5236\u8fc7\u6765\u7684\u90e8\u5206\u5bf9\u8c61\uff0c\u5bfc\u81f4JVM\u65e0\u6cd5\u5728Eden\u533a\u4e3a\u65b0\u5bf9\u8c61\u521b\u5efa\u5185\u5b58\u533a\u57df\uff0c\u5219\u51fa\u73b0\u201dout of memory\u201d\u9519\u8bef   \u4e09\u3001 GC\u57fa\u672c\u539f\u7406  GC\uff08Garbage Collection)\uff0c\u662fJAVA/.NET\u4e2d\u7684\u5783\u573e\u6536\u96c6\u5668\u3002  Java\u662f\u7531C++\u53d1\u5c55\u6765\u7684\uff0c\u5b83\u6448\u5f03\u4e86C++\u4e2d\u4e00\u4e9b\u7e41\u7410\u5bb9\u6613\u51fa\u9519\u7684\u4e1c\u897f\uff0c\u5f15\u5165\u4e86\u8ba1\u6570\u5668\u7684\u6982\u5ff5\uff0c\u5176\u4e2d\u6709\u4e00\u6761\u5c31\u662f\u8fd9\u4e2aGC\u673a\u5236\uff08C#\u501f\u9274\u4e86JAVA\uff09  \u7f16\u7a0b\u4eba\u5458\u5bb9\u6613\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\uff0c\u5fd8\u8bb0\u6216\u8005\u9519\u8bef\u7684\u5185\u5b58\u56de\u6536\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u6216\u7cfb\u7edf\u7684\u4e0d\u7a33\u5b9a\u751a\u81f3\u5d29\u6e83\uff0cJava\u63d0\u4f9b\u7684GC\u529f\u80fd\u53ef\u4ee5\u81ea\u52a8\u76d1\u6d4b\u5bf9\u8c61\u662f\u5426\u8d85\u8fc7\u4f5c\u7528\u57df\u4ece\u800c\u8fbe\u5230\u81ea\u52a8\u56de\u6536\u5185\u5b58\u7684\u76ee\u7684\uff0cJava\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u91ca\u653e\u5df2\u5206\u914d\u5185\u5b58\u7684\u663e\u793a\u64cd\u4f5c\u65b9\u6cd5\u3002\u6240\u4ee5\uff0cJava\u7684\u5185\u5b58\u7ba1\u7406\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u8c61\u7684\u7ba1\u7406\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u8c61\u7684\u5206\u914d\u548c\u91ca\u653e\u3002  \u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u5206\u914d\u5bf9\u8c61\u4f7f\u7528new\u5173\u952e\u5b57\uff1b\u91ca\u653e\u5bf9\u8c61\u65f6\uff0c\u53ea\u8981\u5c06\u5bf9\u8c61\u6240\u6709\u5f15\u7528\u8d4b\u503c\u4e3anull\uff0c\u8ba9\u7a0b\u5e8f\u4e0d\u80fd\u591f\u518d\u8bbf\u95ee\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u79f0\u8be5\u5bf9\u8c61\u4e3a\"\u4e0d\u53ef\u8fbe\u7684\".GC\u5c06\u8d1f\u8d23\u56de\u6536\u6240\u6709\"\u4e0d\u53ef\u8fbe\"\u5bf9\u8c61\u7684\u5185\u5b58\u7a7a\u95f4\u3002  \u5bf9\u4e8eGC\u6765\u8bf4\uff0c\u5f53\u7a0b\u5e8f\u5458\u521b\u5efa\u5bf9\u8c61\u65f6\uff0cGC\u5c31\u5f00\u59cb\u76d1\u63a7\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\u3001\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u60c5\u51b5\u3002\u901a\u5e38\uff0cGC\u91c7\u7528\u6709\u5411\u56fe\u7684\u65b9\u5f0f\u8bb0\u5f55\u548c\u7ba1\u7406\u5806\uff08heap\uff09\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u786e\u5b9a\u54ea\u4e9b\u5bf9\u8c61\u662f\"\u53ef\u8fbe\u7684\"\uff0c\u54ea\u4e9b\u5bf9\u8c61\u662f\"\u4e0d\u53ef\u8fbe\u7684\".\u5f53GC\u786e\u5b9a\u4e00\u4e9b\u5bf9\u8c61\u4e3a\"\u4e0d\u53ef\u8fbe\"\u65f6\uff0cGC\u5c31\u6709\u8d23\u4efb\u56de\u6536\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u4fdd\u8bc1 GC\u80fd\u591f\u5728\u4e0d\u540c\u5e73\u53f0\u5b9e\u73b0\u7684\u95ee\u9898\uff0cJava\u89c4\u8303\u5bf9GC\u7684\u5f88\u591a\u884c\u4e3a\u90fd\u6ca1\u6709\u8fdb\u884c\u4e25\u683c\u7684\u89c4\u5b9a\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u91c7\u7528\u4ec0\u4e48\u7c7b\u578b\u7684\u56de\u6536\u7b97\u6cd5\u3001\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\u56de\u6536\u7b49\u91cd\u8981\u95ee\u9898\u90fd\u6ca1\u6709\u660e\u786e\u7684\u89c4\u5b9a\u3002\u56e0\u6b64\uff0c\u4e0d\u540c\u7684JVM\u7684\u5b9e\u73b0\u8005\u5f80\u5f80\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u7b97\u6cd5\u3002\u8fd9\u4e5f\u7ed9Java\u7a0b\u5e8f\u5458\u7684\u5f00\u53d1\u5e26\u6765\u884c\u591a\u4e0d\u786e\u5b9a\u6027\u3002\u672c\u6587\u7814\u7a76\u4e86\u51e0\u4e2a\u4e0eGC\u5de5\u4f5c\u76f8\u5173\u7684\u95ee\u9898\uff0c\u52aa\u529b\u51cf\u5c11\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7ed9Java\u7a0b\u5e8f\u5e26\u6765\u7684\u8d1f\u9762\u5f71\u54cd\u3002  \u56db\u3001 GC\u5206\u4ee3\u5212\u5206  JVM\u5185\u5b58\u6a21\u578b\u4e2dHeap\u533a\u5206\u4e24\u5927\u5757\uff0c\u4e00\u5757\u662f Young Generation\uff0c\u53e6\u4e00\u5757\u662fOld Generation\u3002   \u5728Young Generation\u4e2d\uff0c\u6709\u4e00\u4e2a\u53ebEden Space\u7684\u7a7a\u95f4\uff0c\u4e3b\u8981\u662f\u7528\u6765\u5b58\u653e\u65b0\u751f\u7684\u5bf9\u8c61\uff0c\u8fd8\u6709\u4e24\u4e2aSurvivor Spaces\uff08from\u3001to\uff09\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u603b\u662f\u4e00\u6837\uff0c\u5b83\u4eec\u7528\u6765\u5b58\u653e\u6bcf\u6b21\u5783\u573e\u56de\u6536\u540e\u5b58\u6d3b\u4e0b\u6765\u7684\u5bf9\u8c61\u3002  \u5728Old Generation\u4e2d\uff0c\u4e3b\u8981\u5b58\u653e\u5e94\u7528\u7a0b\u5e8f\u4e2d\u751f\u547d\u5468\u671f\u957f\u7684\u5185\u5b58\u5bf9\u8c61\u3002  \u5728Young Generation\u5757\u4e2d\uff0c\u5783\u573e\u56de\u6536\u4e00\u822c\u7528Copying\u7684\u7b97\u6cd5\uff0c\u901f\u5ea6\u5feb\u3002\u6bcf\u6b21GC\u7684\u65f6\u5019\uff0c\u5b58\u6d3b\u4e0b\u6765\u7684\u5bf9\u8c61\u9996\u5148\u7531Eden\u62f7\u8d1d\u5230\u67d0\u4e2aSurvivorSpace\uff0c\u5f53Survivor Space\u7a7a\u95f4\u6ee1\u4e86\u540e\uff0c\u5269\u4e0b\u7684live\u5bf9\u8c61\u5c31\u88ab\u76f4\u63a5\u62f7\u8d1d\u5230OldGeneration\u4e2d\u53bb\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21GC\u540e\uff0cEden\u5185\u5b58\u5757\u4f1a\u88ab\u6e05\u7a7a\u3002  \u5728Old Generation\u5757\u4e2d\uff0c\u5783\u573e\u56de\u6536\u4e00\u822c\u7528mark-compact\u7684\u7b97\u6cd5\uff0c\u901f\u5ea6\u6162\u4e9b\uff0c\u4f46\u51cf\u5c11\u5185\u5b58\u8981\u6c42\u3002  \u5783\u573e\u56de\u6536\u5206\u591a\u7ea7\uff0c0\u7ea7\u4e3a\u5168\u90e8(Full)\u7684\u5783\u573e\u56de\u6536\uff0c\u4f1a\u56de\u6536OLD\u6bb5\u4e2d\u7684\u5783\u573e\uff1b1\u7ea7\u6216\u4ee5\u4e0a\u4e3a\u90e8\u5206\u5783\u573e\u56de\u6536\uff0c\u53ea\u4f1a\u56de\u6536Young\u4e2d\u7684\u5783\u573e\uff0c\u5185\u5b58\u6ea2\u51fa\u901a\u5e38\u53d1\u751f\u4e8eOLD\u6bb5\u6216Perm\u6bb5\u5783\u573e\u56de\u6536\u540e\uff0c\u4ecd\u7136\u65e0\u5185\u5b58\u7a7a\u95f4\u5bb9\u7eb3\u65b0\u7684Java\u5bf9\u8c61\u7684\u60c5\u51b5\u3002   \u4e94\u3001 \u589e\u91cf\u5f0fGC  \u589e\u91cf\u5f0fGC\uff08Incremental GC\uff09\uff0c\u662fGC\u5728JVM\u4e2d\u901a\u5e38\u662f\u7531\u4e00\u4e2a\u6216\u4e00\u7ec4\u8fdb\u7a0b\u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u672c\u8eab\u4e5f\u548c\u7528\u6237\u7a0b\u5e8f\u4e00\u6837\u5360\u7528heap\u7a7a\u95f4\uff0c\u8fd0\u884c\u65f6\u4e5f\u5360\u7528CPU\u3002  \u5f53GC\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5f53GC\u8fd0\u884c\u65f6\u95f4\u8f83\u957f\u65f6\uff0c\u7528\u6237\u80fd\u591f\u611f\u5230Java\u7a0b\u5e8f\u7684\u505c\u987f\uff0c\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679cGC\u8fd0\u884c\u65f6\u95f4\u592a\u77ed\uff0c\u5219\u53ef\u80fd\u5bf9\u8c61\u56de\u6536\u7387\u592a\u4f4e\uff0c\u8fd9\u610f\u5473\u7740\u8fd8\u6709\u5f88\u591a\u5e94\u8be5\u56de\u6536\u7684\u5bf9\u8c61\u6ca1\u6709\u88ab\u56de\u6536\uff0c\u4ecd\u7136\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1GC\u7684\u65f6\u5019\uff0c\u5c31\u5fc5\u987b\u5728\u505c\u987f\u65f6\u95f4\u548c\u56de\u6536\u7387\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002\u4e00\u4e2a\u597d\u7684GC\u5b9e\u73b0\u5141\u8bb8\u7528\u6237\u5b9a\u4e49\u81ea\u5df1\u6240\u9700\u8981\u7684\u8bbe\u7f6e\uff0c\u4f8b\u5982\u6709\u4e9b\u5185\u5b58\u6709\u9650\u7684\u8bbe\u5907\uff0c\u5bf9\u5185\u5b58\u7684\u4f7f\u7528\u91cf\u975e\u5e38\u654f\u611f\uff0c\u5e0c\u671bGC\u80fd\u591f\u51c6\u786e\u7684\u56de\u6536\u5185\u5b58\uff0c\u5b83\u5e76\u4e0d\u5728\u610f\u7a0b\u5e8f\u901f\u5ea6\u7684\u5feb\u6162\u3002\u53e6\u5916\u4e00\u4e9b\u5b9e\u65f6\u7f51\u7edc\u6e38\u620f\uff0c\u5c31\u4e0d\u80fd\u591f\u5141\u8bb8\u7a0b\u5e8f\u6709\u957f\u65f6\u95f4\u7684\u4e2d\u65ad\u3002  \u589e\u91cf\u5f0fGC\u5c31\u662f\u901a\u8fc7\u4e00\u5b9a\u7684\u56de\u6536\u7b97\u6cd5\uff0c\u628a\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u4e2d\u65ad\uff0c\u5212\u5206\u4e3a\u5f88\u591a\u4e2a\u5c0f\u7684\u4e2d\u65ad\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u51cf\u5c11GC\u5bf9\u7528\u6237\u7a0b\u5e8f\u7684\u5f71\u54cd\u3002\u867d\u7136\uff0c\u589e\u91cf\u5f0fGC\u5728\u6574\u4f53\u6027\u80fd\u4e0a\u53ef\u80fd\u4e0d\u5982\u666e\u901aGC\u7684\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u5b83\u80fd\u591f\u51cf\u5c11\u7a0b\u5e8f\u7684\u6700\u957f\u505c\u987f\u65f6\u95f4\u3002  Sun JDK\u63d0\u4f9b\u7684HotSpot JVM\u5c31\u80fd\u652f\u6301\u589e\u91cf\u5f0fGC\u3002HotSpot JVM\u7f3a\u7701GC\u65b9\u5f0f\u4e3a\u4e0d\u4f7f\u7528\u589e\u91cfGC\uff0c\u4e3a\u4e86\u542f\u52a8\u589e\u91cfGC\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u8fd0\u884cJava\u7a0b\u5e8f\u65f6\u589e\u52a0-Xincgc\u7684\u53c2\u6570\u3002  HotSpot JVM\u589e\u91cf\u5f0fGC\u7684\u5b9e\u73b0\u662f\u91c7\u7528Train GC\u7b97\u6cd5\uff0c\u5b83\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\uff1a\u5c06\u5806\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u6309\u7167\u521b\u5efa\u548c\u4f7f\u7528\u60c5\u51b5\u8fdb\u884c\u5206\u7ec4\uff08\u5206\u5c42\uff09\uff0c\u5c06\u4f7f\u7528\u9891\u7e41\u9ad8\u548c\u5177\u6709\u76f8\u5173\u6027\u7684\u5bf9\u8c61\u653e\u5728\u4e00\u961f\u4e2d\uff0c\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u4e0d\u65ad\u5bf9\u7ec4\u8fdb\u884c\u8c03\u6574\u3002\u5f53GC\u8fd0\u884c\u65f6\uff0c\u5b83\u603b\u662f\u5148\u56de\u6536\u6700\u8001\u7684\uff08\u6700\u8fd1\u5f88\u5c11\u8bbf\u95ee\u7684\uff09\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6574\u7ec4\u90fd\u4e3a\u53ef\u56de\u6536\u5bf9\u8c61\uff0cGC\u5c06\u6574\u7ec4\u56de\u6536\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21GC\u8fd0\u884c\u53ea\u56de\u6536\u4e00\u5b9a\u6bd4\u4f8b\u7684\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u987a\u7545\u8fd0\u884c\u3002  \u516d\u3001 \u8be6\u89e3\u51fd\u6570finalize  finalize \u662f\u4f4d\u4e8eObject\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be6\u89c1\u6211\u7684\u5f00\u6e90\u9879\u76ee\uff1a src-jdk1.7.0_02  protected void finalize() throws Throwable { }  \u8be5\u65b9\u6cd5\u7684\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3aprotected\uff0c\u7531\u4e8e\u6240\u6709\u7c7b\u4e3aObject\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u7528\u6237\u7c7b\u5f88\u5bb9\u6613\u8bbf\u95ee\u5230\u8fd9\u4e2a\u65b9\u6cd5\u3002  \u7531\u4e8e\uff0cfinalize\u51fd\u6570\u6ca1\u6709\u81ea\u52a8\u5b9e\u73b0\u94fe\u5f0f\u8c03\u7528\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u7684\u5b9e\u73b0\uff0c\u56e0\u6b64finalize\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u901a\u5e38\u662f super.finalize\uff08\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4e0b\u5230\u4e0a\u5b9e\u73b0finalize\u7684\u8c03\u7528\uff0c\u5373\u5148\u91ca\u653e\u81ea\u5df1\u7684\u8d44\u6e90\uff0c\u7136\u540e\u518d\u91ca\u653e\u7236\u7c7b\u7684\u8d44\u6e90\u3002\u6839\u636eJava\u8bed\u8a00\u89c4\u8303\uff0cJVM\u4fdd\u8bc1\u8c03\u7528finalize\u51fd\u6570\u4e4b\u524d\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u4f46\u662fJVM\u4e0d\u4fdd\u8bc1\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\u3002\u53e6\u5916\uff0c\u89c4\u8303\u8fd8\u4fdd\u8bc1finalize\u51fd\u6570\u6700\u591a\u8fd0\u884c\u4e00\u6b21\u3002  \u5f88\u591aJava\u521d\u5b66\u8005\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u7c7b\u4f3c\u4e0eC++\u4e2d\u7684\u6790\u6784\u51fd\u6570\uff0c\u5c06\u5f88\u591a\u5bf9\u8c61\u3001\u8d44\u6e90\u7684\u91ca\u653e\u90fd\u653e\u5728\u8fd9\u4e00\u51fd\u6570\u91cc\u9762\u3002\u5176\u5b9e\uff0c\u8fd9\u4e0d\u662f\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u539f\u56e0\u6709\u4e09\uff1a  \u5176\u4e00\u3001GC\u4e3a\u4e86\u80fd\u591f\u652f\u6301finalize\u51fd\u6570\uff0c\u8981\u5bf9\u8986\u76d6\u8fd9\u4e2a\u51fd\u6570\u7684\u5bf9\u8c61\u4f5c\u5f88\u591a\u9644\u52a0\u7684\u5de5\u4f5c\u3002  \u5176\u4e8c\u3001\u5728finalize\u8fd0\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u8be5\u5bf9\u8c61\u53ef\u80fd\u53d8\u6210\u53ef\u8fbe\u7684\uff0cGC\u8fd8\u8981\u518d\u68c0\u67e5\u4e00\u6b21\u8be5\u5bf9\u8c61\u662f\u5426\u662f\u53ef\u8fbe\u7684\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 finalize\u4f1a\u964d\u4f4eGC\u7684\u8fd0\u884c\u6027\u80fd\u3002  \u5176\u4e09\u3001\u7531\u4e8eGC\u8c03\u7528finalize\u7684\u65f6\u95f4\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u91ca\u653e\u8d44\u6e90\u4e5f\u662f\u4e0d\u786e\u5b9a\u7684\u3002  \u901a\u5e38\uff0cfinalize\u7528\u4e8e\u4e00\u4e9b\u4e0d\u5bb9\u6613\u63a7\u5236\u3001\u5e76\u4e14\u975e\u5e38\u91cd\u8981\u8d44\u6e90\u7684\u91ca\u653e\uff0c\u4f8b\u5982\u4e00\u4e9bI/O\u7684\u64cd\u4f5c\uff0c\u6570\u636e\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u8d44\u6e90\u7684\u91ca\u653e\u5bf9\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u975e\u5e38\u5173\u952e\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5458\u5e94\u8be5\u4ee5\u901a\u8fc7\u7a0b\u5e8f\u672c\u8eab\u7ba1\u7406\uff08\u5305\u62ec\u91ca\u653e\uff09\u8fd9\u4e9b\u8d44\u6e90\u4e3a\u4e3b\uff0c\u4ee5finalize\u51fd\u6570\u91ca\u653e\u8d44\u6e90\u65b9\u5f0f\u4e3a\u8f85\uff0c\u5f62\u6210\u4e00\u79cd\u53cc\u4fdd\u9669\u7684\u7ba1\u7406\u673a\u5236\uff0c\u800c\u4e0d\u5e94\u8be5\u4ec5\u4ec5\u4f9d\u9760finalize\u6765\u91ca\u653e\u8d44\u6e90\u3002  \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff0cfinalize\u51fd\u6570\u88ab\u8c03\u7528\u4ee5\u540e\uff0c\u4ecd\u7136\u53ef\u80fd\u662f\u53ef\u8fbe\u7684\uff0c\u540c\u65f6\u4e5f\u53ef\u8bf4\u660e\u4e00\u4e2a\u5bf9\u8c61\u7684finalize\u53ea\u53ef\u80fd\u8fd0\u884c\u4e00\u6b21\u3002  class MyObject {  \n    Test main;      // \u8bb0\u5f55Test\u5bf9\u8c61\uff0c\u5728finalize\u4e2d\u65f6\u7528\u4e8e\u6062\u590d\u53ef\u8fbe\u6027  \n\n    public MyObject(Test t) {  \n        main = t;   // \u4fdd\u5b58Test \u5bf9\u8c61  \n    }  \n\n    protected void finalize() {  \n        main.ref = this;    // \u6062\u590d\u672c\u5bf9\u8c61\uff0c\u8ba9\u672c\u5bf9\u8c61\u53ef\u8fbe  \n        System.out.println( This is finalize );     // \u7528\u4e8e\u6d4b\u8bd5finalize\u53ea\u8fd0\u884c\u4e00\u6b21  \n    }  \n}  \n\nclass Test {  \n    MyObject ref;  \n\n    public static void main(String[] args) {  \n        Test test = new Test();  \n        test.ref = new MyObject(test);  \n        test.ref = null;    // MyObject\u5bf9\u8c61\u4e3a\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0cfinalize\u5c06\u88ab\u8c03\u7528  \n        System.gc();  \n        if (test.ref != null)  \n            System.out.println( My Object\u8fd8\u6d3b\u7740 );  \n    }  \n}    \u8fd0\u884c\u7ed3\u679c\uff1a  This is finalize  My Object\u8fd8\u6d3b\u7740  \u6b64\u4f8b\u5b50\u4e2d\u9700\u8981\u6ce8\u610f\uff0c\u867d\u7136MyObject\u5bf9\u8c61\u5728finalize\u4e2d\u53d8\u6210\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4f46\u662f\u4e0b\u6b21\u56de\u6536\u65f6\u5019\uff0cfinalize\u5374\u4e0d\u518d\u88ab\u8c03\u7528\uff0c\u56e0\u4e3afinalize\u51fd\u6570\u6700\u591a\u53ea\u8c03\u7528\u4e00\u6b21\u3002  \u4e03\u3001 GC\u7a0b\u5e8f\u4ea4\u4e92  \u7a0b\u5e8f\u5982\u4f55\u4e0eGC\u8fdb\u884c\u4ea4\u4e92\u5462\uff1f Java2\u589e\u5f3a\u4e86\u5185\u5b58\u7ba1\u7406\u529f\u80fd\uff0c\u589e\u52a0\u4e86\u4e00\u4e2ajava.lang.ref\u5305\uff0c\u8be6\u89c1\u6211\u7684\u5f00\u6e90\u9879\u76ee\uff1asrc-jdk1.7.0_02  \u5176\u4e2d\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f15\u7528\u7c7b\u3002\u8fd9\u4e09\u79cd\u5f15\u7528\u7c7b\u5206\u522b\u4e3a\uff1aSoftReference\u3001 WeakReference\u3001 PhantomReference  \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e9b\u5f15\u7528\u7c7b\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0eGC\u8fdb\u884c\u4ea4\u4e92\uff0c\u4ee5\u4fbf\u6539\u5584GC\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u8fd9\u4e9b\u5f15\u7528\u7c7b\u7684\u5f15\u7528\u5f3a\u5ea6\u4ecb\u4e8e\u53ef\u8fbe\u5bf9\u8c61\u548c\u4e0d\u53ef\u8fbe\u5bf9\u8c61\u4e4b\u95f4\u3002  \u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\u4e5f\u975e\u5e38\u5bb9\u6613\uff0c\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2aSoft Reference\u5bf9\u8c61\uff0c\u90a3\u4e48\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u91c7\u7528\u666e\u901a\u5f15\u7528\u65b9\u5f0f\uff08\u53ef\u8fbe\u5bf9\u8c61\uff09\uff1b\u7136\u540e\u518d\u521b\u5efa\u4e00\u4e2aSoftReference\u5f15\u7528\u8be5\u5bf9\u8c61\uff1b\u6700\u540e\u5c06\u666e\u901a\u5f15\u7528\u8bbe\u7f6e\u4e3anull\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ea\u6709\u4e00\u4e2aSoft Reference\u5f15\u7528\u3002\u540c\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u5bf9\u8c61\u4e3aSoft Reference \u5bf9\u8c61\u3002  Soft Reference\u7684\u4e3b\u8981\u7279\u70b9\u662f\u636e\u6709\u8f83\u5f3a\u7684\u5f15\u7528\u529f\u80fd\u3002\u53ea\u6709\u5f53\u5185\u5b58\u4e0d\u591f\u7684\u65f6\u5019\uff0c\u624d\u8fdb\u884c\u56de\u6536\u8fd9\u7c7b\u5185\u5b58\uff0c\u56e0\u6b64\u5728\u5185\u5b58\u8db3\u591f\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u901a\u5e38\u4e0d\u88ab\u56de\u6536\u3002\u53e6\u5916\uff0c\u8fd9\u4e9b\u5f15\u7528\u5bf9\u8c61\u8fd8\u80fd\u4fdd\u8bc1\u5728Java\u629b\u51faOutOfMemory \u5f02\u5e38\u4e4b\u524d\uff0c\u88ab\u8bbe\u7f6e\u4e3anull\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4e00\u4e9b\u5e38\u7528\u56fe\u7247\u7684\u7f13\u5b58\uff0c\u5b9e\u73b0Cache\u7684\u529f\u80fd\uff0c\u4fdd\u8bc1\u6700\u5927\u9650\u5ea6\u7684\u4f7f\u7528\u5185\u5b58\u800c\u4e0d\u5f15\u8d77OutOfMemory\u3002\u4ee5\u4e0b\u7ed9\u51fa\u8fd9\u79cd\u5f15\u7528\u7c7b\u578b\u7684\u4f7f\u7528\u4f2a\u4ee3\u7801\uff1a  // \u7533\u8bf7\u4e00\u4e2a\u56fe\u50cf\u5bf9\u8c61  \n\u3000Image image=new Image();       // \u521b\u5efaImage\u5bf9\u8c61  \n\u3000\u2026  \n\u3000// \u4f7f\u7528 image  \n\u3000\u2026  \n\u3000// \u4f7f\u7528\u5b8c\u4e86image\uff0c\u5c06\u5b83\u8bbe\u7f6e\u4e3asoft \u5f15\u7528\u7c7b\u578b\uff0c\u5e76\u4e14\u91ca\u653e\u5f3a\u5f15\u7528\uff1b  \n\u3000SoftReference sr=new SoftReference(image);  \n\u3000image=null;  \n\u3000\u2026  \n\u3000// \u4e0b\u6b21\u4f7f\u7528\u65f6  \n\u3000if (sr!=null)   \n    image=sr.get();  \n\u3000else{  \n\u3000       image=new Image();  //\u7531\u4e8eGC\u7531\u4e8e\u4f4e\u5185\u5b58\uff0c\u5df2\u91ca\u653eimage\uff0c\u56e0\u6b64\u9700\u8981\u91cd\u65b0\u88c5\u8f7d\uff1b  \n\u3000       sr=new SoftReference(image);  \n\u3000}    Weak\u5f15\u7528\u5bf9\u8c61\u4e0eSoft\u5f15\u7528\u5bf9\u8c61\u7684\u6700\u5927\u4e0d\u540c\u5c31\u5728\u4e8e\uff1aGC\u5728\u8fdb\u884c\u56de\u6536\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u7b97\u6cd5\u68c0\u67e5\u662f\u5426\u56de\u6536Soft\u5f15\u7528\u5bf9\u8c61\uff0c\u800c\u5bf9\u4e8eWeak\u5f15\u7528\u5bf9\u8c61\uff0cGC\u603b\u662f\u8fdb\u884c\u56de\u6536\u3002Weak\u5f15\u7528\u5bf9\u8c61\u66f4\u5bb9\u6613\u3001\u66f4\u5feb\u88abGC\u56de\u6536\u3002\u867d\u7136\uff0cGC\u5728\u8fd0\u884c\u65f6\u4e00\u5b9a\u56de\u6536Weak\u5bf9\u8c61\uff0c\u4f46\u662f\u590d\u6742\u5173\u7cfb\u7684Weak\u5bf9\u8c61\u7fa4\u5e38\u5e38\u9700\u8981\u597d\u51e0\u6b21GC\u7684\u8fd0\u884c\u624d\u80fd\u5b8c\u6210\u3002Weak\u5f15\u7528\u5bf9\u8c61\u5e38\u5e38\u7528\u4e8eMap\u7ed3\u6784\u4e2d\uff0c\u5f15\u7528\u6570\u636e\u91cf\u8f83\u5927\u7684\u5bf9\u8c61\uff0c\u4e00\u65e6\u8be5\u5bf9\u8c61\u7684\u5f3a\u5f15\u7528\u4e3anull\u65f6\uff0cGC\u80fd\u591f\u5feb\u901f\u5730\u56de\u6536\u8be5\u5bf9\u8c61\u7a7a\u95f4\u3002  Phantom\u5f15\u7528\u7684\u7528\u9014\u8f83\u5c11\uff0c\u4e3b\u8981\u7528\u4e8e\u8f85\u52a9finalize\u51fd\u6570\u7684\u4f7f\u7528\u3002Phantom\u5bf9\u8c61\u6307\u4e00\u4e9b\u5bf9\u8c61\uff0c\u5b83\u4eec\u6267\u884c\u5b8c\u4e86finalize\u51fd\u6570\uff0c\u5e76\u4e3a\u4e0d\u53ef\u8fbe\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u4eec\u8fd8\u6ca1\u6709\u88abGC\u56de\u6536\u3002\u8fd9\u79cd\u5bf9\u8c61\u53ef\u4ee5\u8f85\u52a9finalize\u8fdb\u884c\u4e00\u4e9b\u540e\u671f\u7684\u56de\u6536\u5de5\u4f5c\uff0c\u6211\u4eec\u901a\u8fc7\u8986\u76d6Reference\u7684clear()\u65b9\u6cd5\uff0c\u589e\u5f3a\u8d44\u6e90\u56de\u6536\u673a\u5236\u7684\u7075\u6d3b\u6027\u3002", 
            "title": "java\u5185\u5b58\u6a21\u578b\u53cagc\u539f\u7406"
        }, 
        {
            "location": "/swagger/", 
            "text": "\u8fd0\u7528swagger\u6784\u5efarestful api\u6587\u6863\n\n\n\u80cc\u666f\n\n\n\u7531\u4e8eSpring Boot\u80fd\u591f\u5feb\u901f\u5f00\u53d1\u3001\u4fbf\u6377\u90e8\u7f72\u7b49\u7279\u6027\uff0c\u76f8\u4fe1\u6709\u5f88\u5927\u4e00\u90e8\u5206Spring Boot\u7684\u7528\u6237\u4f1a\u7528\u6765\u6784\u5efaRESTful API\u3002\u800c\u6211\u4eec\u6784\u5efaRESTful API\u7684\u76ee\u7684\u901a\u5e38\u90fd\u662f\u7531\u4e8e\u591a\u7ec8\u7aef\u7684\u539f\u56e0\uff0c\u8fd9\u4e9b\u7ec8\u7aef\u4f1a\u5171\u7528\u5f88\u591a\u5e95\u5c42\u4e1a\u52a1\u903b\u8f91\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u62bd\u8c61\u51fa\u8fd9\u6837\u4e00\u5c42\u6765\u540c\u65f6\u670d\u52a1\u4e8e\u591a\u4e2a\u79fb\u52a8\u7aef\u6216\u8005Web\u524d\u7aef\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u7684RESTful API\u5c31\u6709\u53ef\u80fd\u8981\u9762\u5bf9\u591a\u4e2a\u5f00\u53d1\u4eba\u5458\u6216\u591a\u4e2a\u5f00\u53d1\u56e2\u961f\uff1aIOS\u5f00\u53d1\u3001Android\u5f00\u53d1\u6216\u662fWeb\u5f00\u53d1\u7b49\u3002\u4e3a\u4e86\u51cf\u5c11\u4e0e\u5176\u4ed6\u56e2\u961f\u5e73\u65f6\u5f00\u53d1\u671f\u95f4\u7684\u9891\u7e41\u6c9f\u901a\u6210\u672c\uff0c\u4f20\u7edf\u505a\u6cd5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4efdRESTful API\u6587\u6863\u6765\u8bb0\u5f55\u6240\u6709\u63a5\u53e3\u7ec6\u8282\uff0c\u7136\u800c\u8fd9\u6837\u7684\u505a\u6cd5\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a\n\n\u7531\u4e8e\u63a5\u53e3\u4f17\u591a\uff0c\u5e76\u4e14\u7ec6\u8282\u590d\u6742\uff08\u9700\u8981\u8003\u8651\u4e0d\u540c\u7684HTTP\u8bf7\u6c42\u7c7b\u578b\u3001HTTP\u5934\u90e8\u4fe1\u606f\u3001HTTP\u8bf7\u6c42\u5185\u5bb9\u7b49\uff09\uff0c\u9ad8\u8d28\u91cf\u5730\u521b\u5efa\u8fd9\u4efd\u6587\u6863\u672c\u8eab\u5c31\u662f\u4ef6\u975e\u5e38\u5403\u529b\u7684\u4e8b\uff0c\u4e0b\u6e38\u7684\u62b1\u6028\u58f0\u4e0d\u7edd\u4e8e\u8033\u3002\n\u968f\u7740\u65f6\u95f4\u63a8\u79fb\uff0c\u4e0d\u65ad\u4fee\u6539\u63a5\u53e3\u5b9e\u73b0\u7684\u65f6\u5019\u90fd\u5fc5\u987b\u540c\u6b65\u4fee\u6539\u63a5\u53e3\u6587\u6863\uff0c\u800c\u6587\u6863\u4e0e\u4ee3\u7801\u53c8\u5904\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u5a92\u4ecb\uff0c\u9664\u975e\u6709\u4e25\u683c\u7684\u7ba1\u7406\u673a\u5236\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u5bfc\u81f4\u4e0d\u4e00\u81f4\u73b0\u8c61\u3002\n\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u672c\u6587\u5c06\u4ecb\u7ecdRESTful API\u7684\u91cd\u78c5\u597d\u4f19\u4f34Swagger2\uff0c\u5b83\u53ef\u4ee5\u8f7b\u677e\u7684\u6574\u5408\u5230Spring Boot\u4e2d\uff0c\u5e76\u4e0eSpring MVC\u7a0b\u5e8f\u914d\u5408\u7ec4\u7ec7\u51fa\u5f3a\u5927RESTful API\u6587\u6863\u3002\u5b83\u65e2\u53ef\u4ee5\u51cf\u5c11\u6211\u4eec\u521b\u5efa\u6587\u6863\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u8bf4\u660e\u5185\u5bb9\u53c8\u6574\u5408\u5165\u5b9e\u73b0\u4ee3\u7801\u4e2d\uff0c\u8ba9\u7ef4\u62a4\u6587\u6863\u548c\u4fee\u6539\u4ee3\u7801\u6574\u5408\u4e3a\u4e00\u4f53\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u4fee\u6539\u4ee3\u7801\u903b\u8f91\u7684\u540c\u65f6\u65b9\u4fbf\u7684\u4fee\u6539\u6587\u6863\u8bf4\u660e\u3002\u53e6\u5916Swagger2\u4e5f\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u9875\u9762\u6d4b\u8bd5\u529f\u80fd\u6765\u8c03\u8bd5\u6bcf\u4e2aRESTful API\u3002\u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\u64cd\u4f5c\n\n\n\n\n\u6dfb\u52a0swagger2\u7684\u4f9d\u8d56:\u5728pom.xml\u4e2d\n\n\n\n\ndependency\n\n    \ngroupId\nio.springfox\n/groupId\n\n    \nartifactId\nspringfox-swagger2\n/artifactId\n\n    \nversion\n2.2.2\n/version\n\n\n/dependency\n\n\ndependency\n\n    \ngroupId\nio.springfox\n/groupId\n\n    \nartifactId\nspringfox-swagger-ui\n/artifactId\n\n    \nversion\n2.2.2\n/version\n\n\n/dependency\n\n\n\n\n\n\n\n\u521b\u5efaSwagger2\u914d\u7f6e\u7c7b\n\n\n\u5728Application.java\u540c\u7ea7\u521b\u5efaSwagger2\u7684\u914d\u7f6e\u7c7bSwagger2\n\n\n\n\n\n\n\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\ncom.didispace.web\n))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\nSpring Boot\u4e2d\u4f7f\u7528Swagger2\u6784\u5efaRESTful APIs\n)\n                .description(\n\u66f4\u591aSpring Boot\u76f8\u5173\u6587\u7ae0\u8bf7\u5173\u6ce8\uff1ahttp://blog.didispace.com/\n)\n                .termsOfServiceUrl(\nhttp://blog.didispace.com/\n)\n                .contact(\n\u7a0b\u5e8f\u733fDD\n)\n                .version(\n1.0\n)\n                .build();\n    }\n\n}\n\n\n\n\n\u5982\u4e0a\u4ee3\u7801\u6240\u793a\uff0c\u901a\u8fc7@Configuration\u6ce8\u89e3\uff0c\u8ba9Spring\u6765\u52a0\u8f7d\u8be5\u7c7b\u914d\u7f6e\u3002\u518d\u901a\u8fc7@EnableSwagger2\u6ce8\u89e3\u6765\u542f\u7528Swagger2\u3002\n\n\n\u518d\u901a\u8fc7createRestApi\u51fd\u6570\u521b\u5efaDocket\u7684Bean\u4e4b\u540e\uff0capiInfo()\u7528\u6765\u521b\u5efa\u8be5Api\u7684\u57fa\u672c\u4fe1\u606f\uff08\u8fd9\u4e9b\u57fa\u672c\u4fe1\u606f\u4f1a\u5c55\u73b0\u5728\u6587\u6863\u9875\u9762\u4e2d\uff09\u3002select()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2aApiSelectorBuilder\u5b9e\u4f8b\u7528\u6765\u63a7\u5236\u54ea\u4e9b\u63a5\u53e3\u66b4\u9732\u7ed9Swagger\u6765\u5c55\u73b0\uff0c\u672c\u4f8b\u91c7\u7528\u6307\u5b9a\u626b\u63cf\u7684\u5305\u8def\u5f84\u6765\u5b9a\u4e49\uff0cSwagger\u4f1a\u626b\u63cf\u8be5\u5305\u4e0b\u6240\u6709Controller\u5b9a\u4e49\u7684API\uff0c\u5e76\u4ea7\u751f\u6587\u6863\u5185\u5bb9\uff08\u9664\u4e86\u88ab@ApiIgnore\u6307\u5b9a\u7684\u8bf7\u6c42\uff09\u3002\n\n\n\n\n\u6dfb\u52a0\u6587\u6863\u5185\u5bb9\n\n\n\n\n\u6211\u4eec\u901a\u8fc7@ApiOperation\u6ce8\u89e3\u6765\u7ed9API\u589e\u52a0\u8bf4\u660e\u3001\u901a\u8fc7@ApiImplicitParams\u3001@ApiImplicitParam\u6ce8\u89e3\u6765\u7ed9\u53c2\u6570\u589e\u52a0\u8bf4\u660e\n\n\n@RestController\n@RequestMapping(value=\n/users\n)     // \u901a\u8fc7\u8fd9\u91cc\u914d\u7f6e\u4f7f\u4e0b\u9762\u7684\u6620\u5c04\u90fd\u5728/users\u4e0b\uff0c\u53ef\u53bb\u9664\npublic class UserController {\n\n    static Map\nLong, User\n users = Collections.synchronizedMap(new HashMap\nLong, User\n());\n\n    @ApiOperation(value=\n\u83b7\u53d6\u7528\u6237\u5217\u8868\n, notes=\n)\n    @RequestMapping(value={\n}, method=RequestMethod.GET)\n    public List\nUser\n getUserList() {\n        List\nUser\n r = new ArrayList\nUser\n(users.values());\n        return r;\n    }\n\n    @ApiOperation(value=\n\u521b\u5efa\u7528\u6237\n, notes=\n\u6839\u636eUser\u5bf9\u8c61\u521b\u5efa\u7528\u6237\n)\n    @ApiImplicitParam(name = \nuser\n, value = \n\u7528\u6237\u8be6\u7ec6\u5b9e\u4f53user\n, required = true, dataType = \nUser\n)\n    @RequestMapping(value=\n, method=RequestMethod.POST)\n    public String postUser(@RequestBody User user) {\n        users.put(user.getId(), user);\n        return \nsuccess\n;\n    }\n\n    @ApiOperation(value=\n\u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\n, notes=\n\u6839\u636eurl\u7684id\u6765\u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\n)\n    @ApiImplicitParam(name = \nid\n, value = \n\u7528\u6237ID\n, required = true, dataType = \nLong\n)\n    @RequestMapping(value=\n/{id}\n, method=RequestMethod.GET)\n    public User getUser(@PathVariable Long id) {\n        return users.get(id);\n    }\n\n    @ApiOperation(value=\n\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\n, notes=\n\u6839\u636eurl\u7684id\u6765\u6307\u5b9a\u66f4\u65b0\u5bf9\u8c61\uff0c\u5e76\u6839\u636e\u4f20\u8fc7\u6765\u7684user\u4fe1\u606f\u6765\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\n)\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \nid\n, value = \n\u7528\u6237ID\n, required = true, dataType = \nLong\n),\n            @ApiImplicitParam(name = \nuser\n, value = \n\u7528\u6237\u8be6\u7ec6\u5b9e\u4f53user\n, required = true, dataType = \nUser\n)\n    })\n    @RequestMapping(value=\n/{id}\n, method=RequestMethod.PUT)\n    public String putUser(@PathVariable Long id, @RequestBody User user) {\n        User u = users.get(id);\n        u.setName(user.getName());\n        u.setAge(user.getAge());\n        users.put(id, u);\n        return \nsuccess\n;\n    }\n\n    @ApiOperation(value=\n\u5220\u9664\u7528\u6237\n, notes=\n\u6839\u636eurl\u7684id\u6765\u6307\u5b9a\u5220\u9664\u5bf9\u8c61\n)\n    @ApiImplicitParam(name = \nid\n, value = \n\u7528\u6237ID\n, required = true, dataType = \nLong\n)\n    @RequestMapping(value=\n/{id}\n, method=RequestMethod.DELETE)\n    public String deleteUser(@PathVariable Long id) {\n        users.remove(id);\n        return \nsuccess\n;\n    }\n\n}\n\n\n\n\n\u5b8c\u6210\u4e0a\u8ff0\u4ee3\u7801\u6dfb\u52a0\u4e0a\uff0c\u542f\u52a8Spring Boot\u7a0b\u5e8f\uff0c\u8bbf\u95ee\uff1ahttp://localhost:8080/swagger-ui.html\n\n\n\n\n\u5e38\u7528\u6ce8\u89e3\u8bf4\u660e\n\n\n\n\n@ApiIgnore \u5ffd\u7565\u6ce8\u89e3\u6807\u6ce8\u7684\u7c7b\u6216\u8005\u65b9\u6cd5\uff0c\u4e0d\u6dfb\u52a0\u5230API\u6587\u6863\u4e2d\n\n\n@ApiOperation \u5c55\u793a\u6bcf\u4e2aAPI\u57fa\u672c\u4fe1\u606f\n\n\n* value api\u540d\u79f0\n* notes \u5907\u6ce8\u8bf4\u660e\n*\n\n\n\n@ApiImplicitParam \u7528\u4e8e\u89c4\u5b9a\u63a5\u6536\u53c2\u6570\u7c7b\u578b\u3001\u540d\u79f0\u3001\u662f\u5426\u5fc5\u987b\u7b49\u4fe1\u606f\n\n\n* name \u5bf9\u5e94\u65b9\u6cd5\u4e2d\u63a5\u6536\u53c2\u6570\u540d\u79f0\n* value \u5907\u6ce8\u8bf4\u660e\n* required \u662f\u5426\u5fc5\u987b boolean\n* paramType \u53c2\u6570\u7c7b\u578b body\u3001path\u3001query\u3001header\u3001form\u4e2d\u7684\u4e00\u79cd\n    * body \u4f7f\u7528@RequestBody\u63a5\u6536\u6570\u636e POST\u6709\u6548\n    * path \u5728url\u4e2d\u914d\u7f6e{}\u7684\u53c2\u6570\n    * query \u666e\u901a\u67e5\u8be2\u53c2\u6570 \u4f8b\u5982 ?query=q ,jquery ajax\u4e2ddata\u8bbe\u7f6e\u7684\u503c\u4e5f\u53ef\u4ee5\uff0c\u4f8b\u5982 {query:\u201dq\u201d},springMVC\u4e2d\u4e0d\u9700\u8981\u6dfb\u52a0\u6ce8\u89e3\u63a5\u6536\n    * header \u4f7f\u7528@RequestHeader\u63a5\u6536\u6570\u636e\n    * form \u7b14\u8005\u672a\u4f7f\u7528\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9API\u6587\u6863\n* dataType \u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u7c7b\u578b\u540d\u79f0\u76f8\u540c\uff0c\u8bf7\u6307\u5b9a\u5168\u8def\u5f84\uff0c\u4f8b\u5982 dataType = \u201cjava.util.Date\u201d\uff0cspringfox\u4f1a\u81ea\u52a8\u6839\u636e\u7c7b\u578b\u751f\u6210\u6a21\u578b\n\n\n\n@ApiImplicitParams \u5305\u542b\u591a\u4e2a@ApiImplicitParam\n\n\n@ApiModelProperty \u5bf9\u6a21\u578b\u4e2d\u5c5e\u6027\u6dfb\u52a0\u8bf4\u660e\uff0c\u4f8b\u5982 \u4e0a\u9762\u7684PageInfoBeen\u3001BlogArticleBeen\u8fd9\u4e24\u4e2a\u7c7b\u4e2d\u4f7f\u7528\uff0c\u53ea\u80fd\u4f7f\u7528\u5728\u7c7b\u4e2d\u3002\n\n\n* value \u53c2\u6570\u540d\u79f0\n* required \u662f\u5426\u5fc5\u987b boolean\n* hidden \u662f\u5426\u9690\u85cf boolean\n\n\n\n@ApiParam \u5bf9\u5355\u72ec\u67d0\u4e2a\u53c2\u6570\u8fdb\u884c\u8bf4\u660e\uff0c\u4f7f\u7528\u5728\u7c7b\u4e2d\u6216\u8005controller\u65b9\u6cd5\u4e2d\u90fd\u53ef\u4ee5\u3002\u6ce8\u89e3\u4e2d\u7684\u5c5e\u6027\u548c\u4e0a\u9762\u5217\u51fa\u7684\u540c\u540d\u5c5e\u6027\u4f5c\u7528\u76f8\u540c\n\n\n@RequestBody\n\u7528\u4e8e\u63a5\u6536json\u4e32  \u5982ajax\u8bf7\u6c42\u7684data\u53c2\u6570    \u53ef\u5728\u76f4\u63a5\u63a5\u6536\u8f6c\u6362\u5230Pojo\n\n\n@ModelAttribute\n\u7528\u4e8e\u76f4\u63a5\u63a5\u53d7url?\u540e\u9762\u7684\u53c2\u6570 \u5982url?id=123\nname=456    \u53ef\u5728\u76f4\u63a5\u63a5\u6536\u8f6c\u6362\u5230Pojo\n\n\n@RequestParam @RequestBody @PathVariable\u53c2\u6570\u7ed1\u5b9a\u8be6\u89e3\n\n\n\u7b80\u4ecb\n\n\nhandler method \u53c2\u6570\u7ed1\u5b9a\u5e38\u7528\u7684\u6ce8\u89e3,\u6211\u4eec\u6839\u636e\u4ed6\u4eec\u5904\u7406\u7684Request\u7684\u4e0d\u540c\u5185\u5bb9\u90e8\u5206\u5206\u4e3a\u56db\u7c7b\uff1a\uff08\u4e3b\u8981\u8bb2\u89e3\u5e38\u7528\u7c7b\u578b\uff09\n\n\nA\u3001\u5904\u7406requet uri \u90e8\u5206\uff08\u8fd9\u91cc\u6307uri template\u4e2dvariable\uff0c\u4e0d\u542bqueryString\u90e8\u5206\uff09\u7684\u6ce8\u89e3\uff1a   @PathVariable;\n\n\nB\u3001\u5904\u7406request header\u90e8\u5206\u7684\u6ce8\u89e3\uff1a   @RequestHeader, @CookieValue;\n\n\nC\u3001\u5904\u7406request body\u90e8\u5206\u7684\u6ce8\u89e3\uff1a@RequestParam,  @RequestBody;\n\n\nD\u3001\u5904\u7406attribute\u7c7b\u578b\u662f\u6ce8\u89e3\uff1a @SessionAttributes, @ModelAttribute;\n\n\n@PathVariable\n\n\n\u5f53\u4f7f\u7528@RequestMapping URI template \u6837\u5f0f\u6620\u5c04\u65f6\uff0c \u5373 someUrl/{paramId}, \u8fd9\u65f6\u7684paramId\u53ef\u901a\u8fc7 @Pathvariable\u6ce8\u89e3\u7ed1\u5b9a\u5b83\u4f20\u8fc7\u6765\u7684\u503c\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002\n\n\n\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\n@Controller\n@RequestMapping(\n/owners/{ownerId}\n)\npublic class RelativePathUriTemplateController {\n\n  @RequestMapping(\n/pets/{petId}\n)\n  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {    \n    // implementation omitted\n  }\n}\n\n\n\n\n\u4e0a\u9762\u4ee3\u7801\u628aURI template \u4e2d\u53d8\u91cf ownerId\u7684\u503c\u548cpetId\u7684\u503c\uff0c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002\u82e5\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\u548c\u9700\u8981\u7ed1\u5b9a\u7684uri template\u4e2d\u53d8\u91cf\u540d\u79f0\u4e0d\u4e00\u81f4\uff0c\u9700\u8981\u5728@PathVariable(\"name\")\u6307\u5b9auri template\u4e2d\u7684\u540d\u79f0\u3002\n\n\n@RequestHeader\u3001@CookieValue\n\n\n@RequestHeader \u6ce8\u89e3\uff0c\u53ef\u4ee5\u628aRequest\u8bf7\u6c42header\u90e8\u5206\u7684\u503c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002\n\n\n\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\n\u8fd9\u662f\u4e00\u4e2aRequest \u7684header\u90e8\u5206\uff1a\n\n\nHost                    localhost:8080\nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9\nAccept-Language         fr,en-gb;q=0.7,en;q=0.3\nAccept-Encoding         gzip,deflate\nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive              300\n\n@RequestMapping(\n/displayHeaderInfo.do\n)\npublic void displayHeaderInfo(@RequestHeader(\nAccept-Encoding\n) String encoding,\n                              @RequestHeader(\nKeep-Alive\n) long keepAlive)  {\n\n  //...\n\n}\n\n\n\n\n\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u628arequest header\u90e8\u5206\u7684 Accept-Encoding\u7684\u503c\uff0c\u7ed1\u5b9a\u5230\u53c2\u6570encoding\u4e0a\u4e86\uff0c Keep-Alive header\u7684\u503c\u7ed1\u5b9a\u5230\u53c2\u6570keepAlive\u4e0a\u3002\n\n\n@CookieValue \u53ef\u4ee5\u628aRequest header\u4e2d\u5173\u4e8ecookie\u7684\u503c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002\n\n\n\u4f8b\u5982\u6709\u5982\u4e0bCookie\u503c\uff1a\n\n\nJSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84\n\n\n\n\n\u53c2\u6570\u7ed1\u5b9a\u7684\u4ee3\u7801\uff1a\n\n\n@RequestMapping(\n/displayHeaderInfo.do\n)\npublic void displayHeaderInfo(@CookieValue(\nJSESSIONID\n) String cookie)  {\n\n  //...\n\n}\n\n\n\n\n\n\u5373\u628aJSESSIONID\u7684\u503c\u7ed1\u5b9a\u5230\u53c2\u6570cookie\u4e0a\u3002\n\n\n@RequestParam, @RequestBody\n\n\n @RequestParam \n\n\n\n\nA\uff09 \u5e38\u7528\u6765\u5904\u7406\u7b80\u5355\u7c7b\u578b\u7684\u7ed1\u5b9a\uff0c\u901a\u8fc7Request.getParameter() \u83b7\u53d6\u7684String\u53ef\u76f4\u63a5\u8f6c\u6362\u4e3a\u7b80\u5355\u7c7b\u578b\u7684\u60c5\u51b5\uff08 String--\n \u7b80\u5355\u7c7b\u578b\u7684\u8f6c\u6362\u64cd\u4f5c\u7531ConversionService\u914d\u7f6e\u7684\u8f6c\u6362\u5668\u6765\u5b8c\u6210\uff09\uff1b\u56e0\u4e3a\u4f7f\u7528request.getParameter()\u65b9\u5f0f\u83b7\u53d6\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5904\u7406get \u65b9\u5f0f\u4e2dqueryString\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406post\u65b9\u5f0f\u4e2d body data\u7684\u503c\uff1b\n\n\nB\uff09\u7528\u6765\u5904\u7406Content-Type: \u4e3a application/x-www-form-urlencoded\u7f16\u7801\u7684\u5185\u5bb9\uff0c\u63d0\u4ea4\u65b9\u5f0fGET\u3001POST\uff1b\n\n\nC) \u8be5\u6ce8\u89e3\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a value\u3001required\uff1b value\u7528\u6765\u6307\u5b9a\u8981\u4f20\u5165\u503c\u7684id\u540d\u79f0\uff0crequired\u7528\u6765\u6307\u793a\u53c2\u6570\u662f\u5426\u5fc5\u987b\u7ed1\u5b9a\uff1b\n\n\n\n\n@Controller\n@RequestMapping(\n/pets\n)\n@SessionAttributes(\npet\n)\npublic class EditPetForm {\n\n    // ...\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String setupForm(@RequestParam(\npetId\n) int petId, ModelMap model) {\n        Pet pet = this.clinic.loadPet(petId);\n        model.addAttribute(\npet\n, pet);\n        return \npetForm\n;\n    }\n\n    // ...\n\n\n\n\n@RequestBody\n\n\u8be5\u6ce8\u89e3\u5e38\u7528\u6765\u5904\u7406Content-Type: \u4e0d\u662fapplication/x-www-form-urlencoded\u7f16\u7801\u7684\u5185\u5bb9\uff0c\u4f8b\u5982application/json, application/xml\u7b49\uff1b\n\n\n\u5b83\u662f\u901a\u8fc7\u4f7f\u7528HandlerAdapter \u914d\u7f6e\u7684HttpMessageConverters\u6765\u89e3\u6790post data body\uff0c\u7136\u540e\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684bean\u4e0a\u7684\u3002\n\n\n\u56e0\u4e3a\u914d\u7f6e\u6709FormHttpMessageConverter\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u6765\u5904\u7406 application/x-www-form-urlencoded\u7684\u5185\u5bb9\uff0c\u5904\u7406\u5b8c\u7684\u7ed3\u679c\u653e\u5728\u4e00\u4e2aMultiValueMap\n\u91cc\uff0c\u8fd9\u79cd\u60c5\u51b5\u5728\u67d0\u4e9b\u7279\u6b8a\u9700\u6c42\u4e0b\u4f7f\u7528\uff0c\u8be6\u60c5\u67e5\u770bFormHttpMessageConverter api;\n\n\n@RequestMapping(value = \n/something\n, method = RequestMethod.PUT)\npublic void handle(@RequestBody String body, Writer writer) throws IOException {\n  writer.write(body);\n}\n\n\n\n\n@SessionAttributes, @ModelAttribute\n\n\n@SessionAttributes:\n\n\n\u8be5\u6ce8\u89e3\u7528\u6765\u7ed1\u5b9aHttpSession\u4e2d\u7684attribute\u5bf9\u8c61\u7684\u503c\uff0c\u4fbf\u4e8e\u5728\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u91cc\u4f7f\u7528\u3002\n\n\n\u8be5\u6ce8\u89e3\u6709value\u3001types\u4e24\u4e2a\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u540d\u5b57\u548c\u7c7b\u578b\u6307\u5b9a\u8981\u4f7f\u7528\u7684attribute \u5bf9\u8c61\uff1b\n\n\n\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\n@Controller\n@RequestMapping(\n/editPet.do\n)\n@SessionAttributes(\npet\n)\npublic class EditPetForm {\n    // ...\n}\n\n\n\n\n@ModelAttribute\n\n\n\u8be5\u6ce8\u89e3\u6709\u4e24\u4e2a\u7528\u6cd5\uff0c\u4e00\u4e2a\u662f\u7528\u4e8e\u65b9\u6cd5\u4e0a\uff0c\u4e00\u4e2a\u662f\u7528\u4e8e\u53c2\u6570\u4e0a\uff1b\n\n\n\u7528\u4e8e\u65b9\u6cd5\u4e0a\u65f6\uff1a  \u901a\u5e38\u7528\u6765\u5728\u5904\u7406@RequestMapping\u4e4b\u524d\uff0c\u4e3a\u8bf7\u6c42\u7ed1\u5b9a\u9700\u8981\u4ece\u540e\u53f0\u67e5\u8be2\u7684model\uff1b\n\n\n\u7528\u4e8e\u53c2\u6570\u4e0a\u65f6\uff1a \u7528\u6765\u901a\u8fc7\u540d\u79f0\u5bf9\u5e94\uff0c\u628a\u76f8\u5e94\u540d\u79f0\u7684\u503c\u7ed1\u5b9a\u5230\u6ce8\u89e3\u7684\u53c2\u6570bean\u4e0a\uff1b\u8981\u7ed1\u5b9a\u7684\u503c\u6765\u6e90\u4e8e\uff1a\n\n\n\n\n\n\nA\uff09 @SessionAttributes \u542f\u7528\u7684attribute \u5bf9\u8c61\u4e0a\uff1b\n\n\n\n\n\n\nB\uff09 @ModelAttribute \u7528\u4e8e\u65b9\u6cd5\u4e0a\u65f6\u6307\u5b9a\u7684model\u5bf9\u8c61\uff1b\n\n\n\n\n\n\nC\uff09 \u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u90fd\u6ca1\u6709\u65f6\uff0cnew\u4e00\u4e2a\u9700\u8981\u7ed1\u5b9a\u7684bean\u5bf9\u8c61\uff0c\u7136\u540e\u628arequest\u4e2d\u6309\u540d\u79f0\u5bf9\u5e94\u7684\u65b9\u5f0f\u628a\u503c\u7ed1\u5b9a\u5230bean\u4e2d\u3002\n\n\n\n\n\n\n\u7528\u5230\u65b9\u6cd5\u4e0a@ModelAttribute\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\n@ModelAttribute\npublic Account addAccount(@RequestParam String number) {\n    return accountManager.findAccount(number);\n}\n\n\n\n\n\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u9645\u7684\u6548\u679c\u5c31\u662f\u5728\u8c03\u7528@RequestMapping\u7684\u65b9\u6cd5\u4e4b\u524d\uff0c\u4e3arequest\u5bf9\u8c61\u7684model\u91ccput\uff08\u201caccount\u201d\uff0c Account\uff09\uff1b\n\n\n\u7528\u5728\u53c2\u6570\u4e0a\u7684@ModelAttribute\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\n@RequestMapping(value=\n/owners/{ownerId}/pets/{petId}/edit\n, method = RequestMethod.POST)\npublic String processSubmit(@ModelAttribute Pet pet) {\n\n}\n\n\n\n\n\u9996\u5148\u67e5\u8be2 @SessionAttributes\u6709\u65e0\u7ed1\u5b9a\u7684Pet\u5bf9\u8c61\uff0c\u82e5\u6ca1\u6709\u5219\u67e5\u8be2@ModelAttribute\u65b9\u6cd5\u5c42\u9762\u4e0a\u662f\u5426\u7ed1\u5b9a\u4e86Pet\u5bf9\u8c61\uff0c\u82e5\u6ca1\u6709\u5219\u5c06URI template\u4e2d\u7684\u503c\u6309\u5bf9\u5e94\u7684\u540d\u79f0\u7ed1\u5b9a\u5230Pet\u5bf9\u8c61\u7684\u5404\u5c5e\u6027\u4e0a\u3002\n\n\n\u8865\u5145\u8bb2\u89e3\uff1a\n\u95ee\u9898\uff1a \u5728\u4e0d\u7ed9\u5b9a\u6ce8\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u662f\u600e\u6837\u7ed1\u5b9a\u7684\uff1f\n\n\n\u901a\u8fc7\u5206\u6790AnnotationMethodHandlerAdapter\u548cRequestMappingHandlerAdapter\u7684\u6e90\u4ee3\u7801\u53d1\u73b0\uff0c\u65b9\u6cd5\u7684\u53c2\u6570\u5728\u4e0d\u7ed9\u5b9a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff1a\n\n\n\u82e5\u8981\u7ed1\u5b9a\u7684\u5bf9\u8c61\u65f6\u7b80\u5355\u7c7b\u578b\uff1a  \u8c03\u7528@RequestParam\u6765\u5904\u7406\u7684\u3002  \n\n\n\u82e5\u8981\u7ed1\u5b9a\u7684\u5bf9\u8c61\u65f6\u590d\u6742\u7c7b\u578b\uff1a  \u8c03\u7528@ModelAttribute\u6765\u5904\u7406\u7684\u3002\n\n\n\u8fd9\u91cc\u7684\u7b80\u5355\u7c7b\u578b\u6307java\u7684\u539f\u59cb\u7c7b\u578b(boolean, int \u7b49)\u3001\u539f\u59cb\u7c7b\u578b\u5bf9\u8c61\uff08Boolean, Int\u7b49\uff09\u3001String\u3001Date\u7b49ConversionService\u91cc\u53ef\u4ee5\u76f4\u63a5String\u8f6c\u6362\u6210\u76ee\u6807\u5bf9\u8c61\u7684\u7c7b\u578b\uff1b", 
            "title": "swagger"
        }, 
        {
            "location": "/swagger/#swaggerrestful-api", 
            "text": "", 
            "title": "\u8fd0\u7528swagger\u6784\u5efarestful api\u6587\u6863"
        }, 
        {
            "location": "/swagger/#_1", 
            "text": "\u7531\u4e8eSpring Boot\u80fd\u591f\u5feb\u901f\u5f00\u53d1\u3001\u4fbf\u6377\u90e8\u7f72\u7b49\u7279\u6027\uff0c\u76f8\u4fe1\u6709\u5f88\u5927\u4e00\u90e8\u5206Spring Boot\u7684\u7528\u6237\u4f1a\u7528\u6765\u6784\u5efaRESTful API\u3002\u800c\u6211\u4eec\u6784\u5efaRESTful API\u7684\u76ee\u7684\u901a\u5e38\u90fd\u662f\u7531\u4e8e\u591a\u7ec8\u7aef\u7684\u539f\u56e0\uff0c\u8fd9\u4e9b\u7ec8\u7aef\u4f1a\u5171\u7528\u5f88\u591a\u5e95\u5c42\u4e1a\u52a1\u903b\u8f91\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u62bd\u8c61\u51fa\u8fd9\u6837\u4e00\u5c42\u6765\u540c\u65f6\u670d\u52a1\u4e8e\u591a\u4e2a\u79fb\u52a8\u7aef\u6216\u8005Web\u524d\u7aef\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u7684RESTful API\u5c31\u6709\u53ef\u80fd\u8981\u9762\u5bf9\u591a\u4e2a\u5f00\u53d1\u4eba\u5458\u6216\u591a\u4e2a\u5f00\u53d1\u56e2\u961f\uff1aIOS\u5f00\u53d1\u3001Android\u5f00\u53d1\u6216\u662fWeb\u5f00\u53d1\u7b49\u3002\u4e3a\u4e86\u51cf\u5c11\u4e0e\u5176\u4ed6\u56e2\u961f\u5e73\u65f6\u5f00\u53d1\u671f\u95f4\u7684\u9891\u7e41\u6c9f\u901a\u6210\u672c\uff0c\u4f20\u7edf\u505a\u6cd5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4efdRESTful API\u6587\u6863\u6765\u8bb0\u5f55\u6240\u6709\u63a5\u53e3\u7ec6\u8282\uff0c\u7136\u800c\u8fd9\u6837\u7684\u505a\u6cd5\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a\n\n\u7531\u4e8e\u63a5\u53e3\u4f17\u591a\uff0c\u5e76\u4e14\u7ec6\u8282\u590d\u6742\uff08\u9700\u8981\u8003\u8651\u4e0d\u540c\u7684HTTP\u8bf7\u6c42\u7c7b\u578b\u3001HTTP\u5934\u90e8\u4fe1\u606f\u3001HTTP\u8bf7\u6c42\u5185\u5bb9\u7b49\uff09\uff0c\u9ad8\u8d28\u91cf\u5730\u521b\u5efa\u8fd9\u4efd\u6587\u6863\u672c\u8eab\u5c31\u662f\u4ef6\u975e\u5e38\u5403\u529b\u7684\u4e8b\uff0c\u4e0b\u6e38\u7684\u62b1\u6028\u58f0\u4e0d\u7edd\u4e8e\u8033\u3002\n\u968f\u7740\u65f6\u95f4\u63a8\u79fb\uff0c\u4e0d\u65ad\u4fee\u6539\u63a5\u53e3\u5b9e\u73b0\u7684\u65f6\u5019\u90fd\u5fc5\u987b\u540c\u6b65\u4fee\u6539\u63a5\u53e3\u6587\u6863\uff0c\u800c\u6587\u6863\u4e0e\u4ee3\u7801\u53c8\u5904\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u5a92\u4ecb\uff0c\u9664\u975e\u6709\u4e25\u683c\u7684\u7ba1\u7406\u673a\u5236\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u5bfc\u81f4\u4e0d\u4e00\u81f4\u73b0\u8c61\u3002\n\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u672c\u6587\u5c06\u4ecb\u7ecdRESTful API\u7684\u91cd\u78c5\u597d\u4f19\u4f34Swagger2\uff0c\u5b83\u53ef\u4ee5\u8f7b\u677e\u7684\u6574\u5408\u5230Spring Boot\u4e2d\uff0c\u5e76\u4e0eSpring MVC\u7a0b\u5e8f\u914d\u5408\u7ec4\u7ec7\u51fa\u5f3a\u5927RESTful API\u6587\u6863\u3002\u5b83\u65e2\u53ef\u4ee5\u51cf\u5c11\u6211\u4eec\u521b\u5efa\u6587\u6863\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u8bf4\u660e\u5185\u5bb9\u53c8\u6574\u5408\u5165\u5b9e\u73b0\u4ee3\u7801\u4e2d\uff0c\u8ba9\u7ef4\u62a4\u6587\u6863\u548c\u4fee\u6539\u4ee3\u7801\u6574\u5408\u4e3a\u4e00\u4f53\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u4fee\u6539\u4ee3\u7801\u903b\u8f91\u7684\u540c\u65f6\u65b9\u4fbf\u7684\u4fee\u6539\u6587\u6863\u8bf4\u660e\u3002\u53e6\u5916Swagger2\u4e5f\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u9875\u9762\u6d4b\u8bd5\u529f\u80fd\u6765\u8c03\u8bd5\u6bcf\u4e2aRESTful API\u3002\u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a", 
            "title": "\u80cc\u666f"
        }, 
        {
            "location": "/swagger/#_2", 
            "text": "\u6dfb\u52a0swagger2\u7684\u4f9d\u8d56:\u5728pom.xml\u4e2d   dependency \n     groupId io.springfox /groupId \n     artifactId springfox-swagger2 /artifactId \n     version 2.2.2 /version  /dependency  dependency \n     groupId io.springfox /groupId \n     artifactId springfox-swagger-ui /artifactId \n     version 2.2.2 /version  /dependency    \u521b\u5efaSwagger2\u914d\u7f6e\u7c7b  \u5728Application.java\u540c\u7ea7\u521b\u5efaSwagger2\u7684\u914d\u7f6e\u7c7bSwagger2     @Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage( com.didispace.web ))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title( Spring Boot\u4e2d\u4f7f\u7528Swagger2\u6784\u5efaRESTful APIs )\n                .description( \u66f4\u591aSpring Boot\u76f8\u5173\u6587\u7ae0\u8bf7\u5173\u6ce8\uff1ahttp://blog.didispace.com/ )\n                .termsOfServiceUrl( http://blog.didispace.com/ )\n                .contact( \u7a0b\u5e8f\u733fDD )\n                .version( 1.0 )\n                .build();\n    }\n\n}  \u5982\u4e0a\u4ee3\u7801\u6240\u793a\uff0c\u901a\u8fc7@Configuration\u6ce8\u89e3\uff0c\u8ba9Spring\u6765\u52a0\u8f7d\u8be5\u7c7b\u914d\u7f6e\u3002\u518d\u901a\u8fc7@EnableSwagger2\u6ce8\u89e3\u6765\u542f\u7528Swagger2\u3002  \u518d\u901a\u8fc7createRestApi\u51fd\u6570\u521b\u5efaDocket\u7684Bean\u4e4b\u540e\uff0capiInfo()\u7528\u6765\u521b\u5efa\u8be5Api\u7684\u57fa\u672c\u4fe1\u606f\uff08\u8fd9\u4e9b\u57fa\u672c\u4fe1\u606f\u4f1a\u5c55\u73b0\u5728\u6587\u6863\u9875\u9762\u4e2d\uff09\u3002select()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2aApiSelectorBuilder\u5b9e\u4f8b\u7528\u6765\u63a7\u5236\u54ea\u4e9b\u63a5\u53e3\u66b4\u9732\u7ed9Swagger\u6765\u5c55\u73b0\uff0c\u672c\u4f8b\u91c7\u7528\u6307\u5b9a\u626b\u63cf\u7684\u5305\u8def\u5f84\u6765\u5b9a\u4e49\uff0cSwagger\u4f1a\u626b\u63cf\u8be5\u5305\u4e0b\u6240\u6709Controller\u5b9a\u4e49\u7684API\uff0c\u5e76\u4ea7\u751f\u6587\u6863\u5185\u5bb9\uff08\u9664\u4e86\u88ab@ApiIgnore\u6307\u5b9a\u7684\u8bf7\u6c42\uff09\u3002   \u6dfb\u52a0\u6587\u6863\u5185\u5bb9   \u6211\u4eec\u901a\u8fc7@ApiOperation\u6ce8\u89e3\u6765\u7ed9API\u589e\u52a0\u8bf4\u660e\u3001\u901a\u8fc7@ApiImplicitParams\u3001@ApiImplicitParam\u6ce8\u89e3\u6765\u7ed9\u53c2\u6570\u589e\u52a0\u8bf4\u660e  @RestController\n@RequestMapping(value= /users )     // \u901a\u8fc7\u8fd9\u91cc\u914d\u7f6e\u4f7f\u4e0b\u9762\u7684\u6620\u5c04\u90fd\u5728/users\u4e0b\uff0c\u53ef\u53bb\u9664\npublic class UserController {\n\n    static Map Long, User  users = Collections.synchronizedMap(new HashMap Long, User ());\n\n    @ApiOperation(value= \u83b7\u53d6\u7528\u6237\u5217\u8868 , notes= )\n    @RequestMapping(value={ }, method=RequestMethod.GET)\n    public List User  getUserList() {\n        List User  r = new ArrayList User (users.values());\n        return r;\n    }\n\n    @ApiOperation(value= \u521b\u5efa\u7528\u6237 , notes= \u6839\u636eUser\u5bf9\u8c61\u521b\u5efa\u7528\u6237 )\n    @ApiImplicitParam(name =  user , value =  \u7528\u6237\u8be6\u7ec6\u5b9e\u4f53user , required = true, dataType =  User )\n    @RequestMapping(value= , method=RequestMethod.POST)\n    public String postUser(@RequestBody User user) {\n        users.put(user.getId(), user);\n        return  success ;\n    }\n\n    @ApiOperation(value= \u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f , notes= \u6839\u636eurl\u7684id\u6765\u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f )\n    @ApiImplicitParam(name =  id , value =  \u7528\u6237ID , required = true, dataType =  Long )\n    @RequestMapping(value= /{id} , method=RequestMethod.GET)\n    public User getUser(@PathVariable Long id) {\n        return users.get(id);\n    }\n\n    @ApiOperation(value= \u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f , notes= \u6839\u636eurl\u7684id\u6765\u6307\u5b9a\u66f4\u65b0\u5bf9\u8c61\uff0c\u5e76\u6839\u636e\u4f20\u8fc7\u6765\u7684user\u4fe1\u606f\u6765\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f )\n    @ApiImplicitParams({\n            @ApiImplicitParam(name =  id , value =  \u7528\u6237ID , required = true, dataType =  Long ),\n            @ApiImplicitParam(name =  user , value =  \u7528\u6237\u8be6\u7ec6\u5b9e\u4f53user , required = true, dataType =  User )\n    })\n    @RequestMapping(value= /{id} , method=RequestMethod.PUT)\n    public String putUser(@PathVariable Long id, @RequestBody User user) {\n        User u = users.get(id);\n        u.setName(user.getName());\n        u.setAge(user.getAge());\n        users.put(id, u);\n        return  success ;\n    }\n\n    @ApiOperation(value= \u5220\u9664\u7528\u6237 , notes= \u6839\u636eurl\u7684id\u6765\u6307\u5b9a\u5220\u9664\u5bf9\u8c61 )\n    @ApiImplicitParam(name =  id , value =  \u7528\u6237ID , required = true, dataType =  Long )\n    @RequestMapping(value= /{id} , method=RequestMethod.DELETE)\n    public String deleteUser(@PathVariable Long id) {\n        users.remove(id);\n        return  success ;\n    }\n\n}  \u5b8c\u6210\u4e0a\u8ff0\u4ee3\u7801\u6dfb\u52a0\u4e0a\uff0c\u542f\u52a8Spring Boot\u7a0b\u5e8f\uff0c\u8bbf\u95ee\uff1ahttp://localhost:8080/swagger-ui.html   \u5e38\u7528\u6ce8\u89e3\u8bf4\u660e   @ApiIgnore \u5ffd\u7565\u6ce8\u89e3\u6807\u6ce8\u7684\u7c7b\u6216\u8005\u65b9\u6cd5\uff0c\u4e0d\u6dfb\u52a0\u5230API\u6587\u6863\u4e2d  @ApiOperation \u5c55\u793a\u6bcf\u4e2aAPI\u57fa\u672c\u4fe1\u606f  * value api\u540d\u79f0\n* notes \u5907\u6ce8\u8bf4\u660e\n*  @ApiImplicitParam \u7528\u4e8e\u89c4\u5b9a\u63a5\u6536\u53c2\u6570\u7c7b\u578b\u3001\u540d\u79f0\u3001\u662f\u5426\u5fc5\u987b\u7b49\u4fe1\u606f  * name \u5bf9\u5e94\u65b9\u6cd5\u4e2d\u63a5\u6536\u53c2\u6570\u540d\u79f0\n* value \u5907\u6ce8\u8bf4\u660e\n* required \u662f\u5426\u5fc5\u987b boolean\n* paramType \u53c2\u6570\u7c7b\u578b body\u3001path\u3001query\u3001header\u3001form\u4e2d\u7684\u4e00\u79cd\n    * body \u4f7f\u7528@RequestBody\u63a5\u6536\u6570\u636e POST\u6709\u6548\n    * path \u5728url\u4e2d\u914d\u7f6e{}\u7684\u53c2\u6570\n    * query \u666e\u901a\u67e5\u8be2\u53c2\u6570 \u4f8b\u5982 ?query=q ,jquery ajax\u4e2ddata\u8bbe\u7f6e\u7684\u503c\u4e5f\u53ef\u4ee5\uff0c\u4f8b\u5982 {query:\u201dq\u201d},springMVC\u4e2d\u4e0d\u9700\u8981\u6dfb\u52a0\u6ce8\u89e3\u63a5\u6536\n    * header \u4f7f\u7528@RequestHeader\u63a5\u6536\u6570\u636e\n    * form \u7b14\u8005\u672a\u4f7f\u7528\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9API\u6587\u6863\n* dataType \u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u7c7b\u578b\u540d\u79f0\u76f8\u540c\uff0c\u8bf7\u6307\u5b9a\u5168\u8def\u5f84\uff0c\u4f8b\u5982 dataType = \u201cjava.util.Date\u201d\uff0cspringfox\u4f1a\u81ea\u52a8\u6839\u636e\u7c7b\u578b\u751f\u6210\u6a21\u578b  @ApiImplicitParams \u5305\u542b\u591a\u4e2a@ApiImplicitParam  @ApiModelProperty \u5bf9\u6a21\u578b\u4e2d\u5c5e\u6027\u6dfb\u52a0\u8bf4\u660e\uff0c\u4f8b\u5982 \u4e0a\u9762\u7684PageInfoBeen\u3001BlogArticleBeen\u8fd9\u4e24\u4e2a\u7c7b\u4e2d\u4f7f\u7528\uff0c\u53ea\u80fd\u4f7f\u7528\u5728\u7c7b\u4e2d\u3002  * value \u53c2\u6570\u540d\u79f0\n* required \u662f\u5426\u5fc5\u987b boolean\n* hidden \u662f\u5426\u9690\u85cf boolean", 
            "title": "\u64cd\u4f5c"
        }, 
        {
            "location": "/swagger/#apiparam-controller", 
            "text": "@RequestBody\n\u7528\u4e8e\u63a5\u6536json\u4e32  \u5982ajax\u8bf7\u6c42\u7684data\u53c2\u6570    \u53ef\u5728\u76f4\u63a5\u63a5\u6536\u8f6c\u6362\u5230Pojo  @ModelAttribute\n\u7528\u4e8e\u76f4\u63a5\u63a5\u53d7url?\u540e\u9762\u7684\u53c2\u6570 \u5982url?id=123 name=456    \u53ef\u5728\u76f4\u63a5\u63a5\u6536\u8f6c\u6362\u5230Pojo", 
            "title": "@ApiParam \u5bf9\u5355\u72ec\u67d0\u4e2a\u53c2\u6570\u8fdb\u884c\u8bf4\u660e\uff0c\u4f7f\u7528\u5728\u7c7b\u4e2d\u6216\u8005controller\u65b9\u6cd5\u4e2d\u90fd\u53ef\u4ee5\u3002\u6ce8\u89e3\u4e2d\u7684\u5c5e\u6027\u548c\u4e0a\u9762\u5217\u51fa\u7684\u540c\u540d\u5c5e\u6027\u4f5c\u7528\u76f8\u540c"
        }, 
        {
            "location": "/swagger/#requestparam-requestbody-pathvariable", 
            "text": "", 
            "title": "@RequestParam @RequestBody @PathVariable\u53c2\u6570\u7ed1\u5b9a\u8be6\u89e3"
        }, 
        {
            "location": "/swagger/#_3", 
            "text": "handler method \u53c2\u6570\u7ed1\u5b9a\u5e38\u7528\u7684\u6ce8\u89e3,\u6211\u4eec\u6839\u636e\u4ed6\u4eec\u5904\u7406\u7684Request\u7684\u4e0d\u540c\u5185\u5bb9\u90e8\u5206\u5206\u4e3a\u56db\u7c7b\uff1a\uff08\u4e3b\u8981\u8bb2\u89e3\u5e38\u7528\u7c7b\u578b\uff09  A\u3001\u5904\u7406requet uri \u90e8\u5206\uff08\u8fd9\u91cc\u6307uri template\u4e2dvariable\uff0c\u4e0d\u542bqueryString\u90e8\u5206\uff09\u7684\u6ce8\u89e3\uff1a   @PathVariable;  B\u3001\u5904\u7406request header\u90e8\u5206\u7684\u6ce8\u89e3\uff1a   @RequestHeader, @CookieValue;  C\u3001\u5904\u7406request body\u90e8\u5206\u7684\u6ce8\u89e3\uff1a@RequestParam,  @RequestBody;  D\u3001\u5904\u7406attribute\u7c7b\u578b\u662f\u6ce8\u89e3\uff1a @SessionAttributes, @ModelAttribute;", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/swagger/#pathvariable", 
            "text": "\u5f53\u4f7f\u7528@RequestMapping URI template \u6837\u5f0f\u6620\u5c04\u65f6\uff0c \u5373 someUrl/{paramId}, \u8fd9\u65f6\u7684paramId\u53ef\u901a\u8fc7 @Pathvariable\u6ce8\u89e3\u7ed1\u5b9a\u5b83\u4f20\u8fc7\u6765\u7684\u503c\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002  \u793a\u4f8b\u4ee3\u7801\uff1a  @Controller\n@RequestMapping( /owners/{ownerId} )\npublic class RelativePathUriTemplateController {\n\n  @RequestMapping( /pets/{petId} )\n  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {    \n    // implementation omitted\n  }\n}  \u4e0a\u9762\u4ee3\u7801\u628aURI template \u4e2d\u53d8\u91cf ownerId\u7684\u503c\u548cpetId\u7684\u503c\uff0c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002\u82e5\u65b9\u6cd5\u53c2\u6570\u540d\u79f0\u548c\u9700\u8981\u7ed1\u5b9a\u7684uri template\u4e2d\u53d8\u91cf\u540d\u79f0\u4e0d\u4e00\u81f4\uff0c\u9700\u8981\u5728@PathVariable(\"name\")\u6307\u5b9auri template\u4e2d\u7684\u540d\u79f0\u3002", 
            "title": "@PathVariable"
        }, 
        {
            "location": "/swagger/#requestheadercookievalue", 
            "text": "@RequestHeader \u6ce8\u89e3\uff0c\u53ef\u4ee5\u628aRequest\u8bf7\u6c42header\u90e8\u5206\u7684\u503c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002  \u793a\u4f8b\u4ee3\u7801\uff1a  \u8fd9\u662f\u4e00\u4e2aRequest \u7684header\u90e8\u5206\uff1a  Host                    localhost:8080\nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9\nAccept-Language         fr,en-gb;q=0.7,en;q=0.3\nAccept-Encoding         gzip,deflate\nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive              300\n\n@RequestMapping( /displayHeaderInfo.do )\npublic void displayHeaderInfo(@RequestHeader( Accept-Encoding ) String encoding,\n                              @RequestHeader( Keep-Alive ) long keepAlive)  {\n\n  //...\n\n}  \u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u628arequest header\u90e8\u5206\u7684 Accept-Encoding\u7684\u503c\uff0c\u7ed1\u5b9a\u5230\u53c2\u6570encoding\u4e0a\u4e86\uff0c Keep-Alive header\u7684\u503c\u7ed1\u5b9a\u5230\u53c2\u6570keepAlive\u4e0a\u3002  @CookieValue \u53ef\u4ee5\u628aRequest header\u4e2d\u5173\u4e8ecookie\u7684\u503c\u7ed1\u5b9a\u5230\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\u3002  \u4f8b\u5982\u6709\u5982\u4e0bCookie\u503c\uff1a  JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84  \u53c2\u6570\u7ed1\u5b9a\u7684\u4ee3\u7801\uff1a  @RequestMapping( /displayHeaderInfo.do )\npublic void displayHeaderInfo(@CookieValue( JSESSIONID ) String cookie)  {\n\n  //...\n\n}  \u5373\u628aJSESSIONID\u7684\u503c\u7ed1\u5b9a\u5230\u53c2\u6570cookie\u4e0a\u3002", 
            "title": "@RequestHeader\u3001@CookieValue"
        }, 
        {
            "location": "/swagger/#requestparam-requestbody", 
            "text": "@RequestParam    A\uff09 \u5e38\u7528\u6765\u5904\u7406\u7b80\u5355\u7c7b\u578b\u7684\u7ed1\u5b9a\uff0c\u901a\u8fc7Request.getParameter() \u83b7\u53d6\u7684String\u53ef\u76f4\u63a5\u8f6c\u6362\u4e3a\u7b80\u5355\u7c7b\u578b\u7684\u60c5\u51b5\uff08 String--  \u7b80\u5355\u7c7b\u578b\u7684\u8f6c\u6362\u64cd\u4f5c\u7531ConversionService\u914d\u7f6e\u7684\u8f6c\u6362\u5668\u6765\u5b8c\u6210\uff09\uff1b\u56e0\u4e3a\u4f7f\u7528request.getParameter()\u65b9\u5f0f\u83b7\u53d6\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5904\u7406get \u65b9\u5f0f\u4e2dqueryString\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406post\u65b9\u5f0f\u4e2d body data\u7684\u503c\uff1b  B\uff09\u7528\u6765\u5904\u7406Content-Type: \u4e3a application/x-www-form-urlencoded\u7f16\u7801\u7684\u5185\u5bb9\uff0c\u63d0\u4ea4\u65b9\u5f0fGET\u3001POST\uff1b  C) \u8be5\u6ce8\u89e3\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a value\u3001required\uff1b value\u7528\u6765\u6307\u5b9a\u8981\u4f20\u5165\u503c\u7684id\u540d\u79f0\uff0crequired\u7528\u6765\u6307\u793a\u53c2\u6570\u662f\u5426\u5fc5\u987b\u7ed1\u5b9a\uff1b   @Controller\n@RequestMapping( /pets )\n@SessionAttributes( pet )\npublic class EditPetForm {\n\n    // ...\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String setupForm(@RequestParam( petId ) int petId, ModelMap model) {\n        Pet pet = this.clinic.loadPet(petId);\n        model.addAttribute( pet , pet);\n        return  petForm ;\n    }\n\n    // ...  @RequestBody \n\u8be5\u6ce8\u89e3\u5e38\u7528\u6765\u5904\u7406Content-Type: \u4e0d\u662fapplication/x-www-form-urlencoded\u7f16\u7801\u7684\u5185\u5bb9\uff0c\u4f8b\u5982application/json, application/xml\u7b49\uff1b  \u5b83\u662f\u901a\u8fc7\u4f7f\u7528HandlerAdapter \u914d\u7f6e\u7684HttpMessageConverters\u6765\u89e3\u6790post data body\uff0c\u7136\u540e\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684bean\u4e0a\u7684\u3002  \u56e0\u4e3a\u914d\u7f6e\u6709FormHttpMessageConverter\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u6765\u5904\u7406 application/x-www-form-urlencoded\u7684\u5185\u5bb9\uff0c\u5904\u7406\u5b8c\u7684\u7ed3\u679c\u653e\u5728\u4e00\u4e2aMultiValueMap \u91cc\uff0c\u8fd9\u79cd\u60c5\u51b5\u5728\u67d0\u4e9b\u7279\u6b8a\u9700\u6c42\u4e0b\u4f7f\u7528\uff0c\u8be6\u60c5\u67e5\u770bFormHttpMessageConverter api;  @RequestMapping(value =  /something , method = RequestMethod.PUT)\npublic void handle(@RequestBody String body, Writer writer) throws IOException {\n  writer.write(body);\n}", 
            "title": "@RequestParam, @RequestBody"
        }, 
        {
            "location": "/swagger/#sessionattributes-modelattribute", 
            "text": "@SessionAttributes:  \u8be5\u6ce8\u89e3\u7528\u6765\u7ed1\u5b9aHttpSession\u4e2d\u7684attribute\u5bf9\u8c61\u7684\u503c\uff0c\u4fbf\u4e8e\u5728\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u91cc\u4f7f\u7528\u3002  \u8be5\u6ce8\u89e3\u6709value\u3001types\u4e24\u4e2a\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u540d\u5b57\u548c\u7c7b\u578b\u6307\u5b9a\u8981\u4f7f\u7528\u7684attribute \u5bf9\u8c61\uff1b  \u793a\u4f8b\u4ee3\u7801\uff1a  @Controller\n@RequestMapping( /editPet.do )\n@SessionAttributes( pet )\npublic class EditPetForm {\n    // ...\n}  @ModelAttribute  \u8be5\u6ce8\u89e3\u6709\u4e24\u4e2a\u7528\u6cd5\uff0c\u4e00\u4e2a\u662f\u7528\u4e8e\u65b9\u6cd5\u4e0a\uff0c\u4e00\u4e2a\u662f\u7528\u4e8e\u53c2\u6570\u4e0a\uff1b  \u7528\u4e8e\u65b9\u6cd5\u4e0a\u65f6\uff1a  \u901a\u5e38\u7528\u6765\u5728\u5904\u7406@RequestMapping\u4e4b\u524d\uff0c\u4e3a\u8bf7\u6c42\u7ed1\u5b9a\u9700\u8981\u4ece\u540e\u53f0\u67e5\u8be2\u7684model\uff1b  \u7528\u4e8e\u53c2\u6570\u4e0a\u65f6\uff1a \u7528\u6765\u901a\u8fc7\u540d\u79f0\u5bf9\u5e94\uff0c\u628a\u76f8\u5e94\u540d\u79f0\u7684\u503c\u7ed1\u5b9a\u5230\u6ce8\u89e3\u7684\u53c2\u6570bean\u4e0a\uff1b\u8981\u7ed1\u5b9a\u7684\u503c\u6765\u6e90\u4e8e\uff1a    A\uff09 @SessionAttributes \u542f\u7528\u7684attribute \u5bf9\u8c61\u4e0a\uff1b    B\uff09 @ModelAttribute \u7528\u4e8e\u65b9\u6cd5\u4e0a\u65f6\u6307\u5b9a\u7684model\u5bf9\u8c61\uff1b    C\uff09 \u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u90fd\u6ca1\u6709\u65f6\uff0cnew\u4e00\u4e2a\u9700\u8981\u7ed1\u5b9a\u7684bean\u5bf9\u8c61\uff0c\u7136\u540e\u628arequest\u4e2d\u6309\u540d\u79f0\u5bf9\u5e94\u7684\u65b9\u5f0f\u628a\u503c\u7ed1\u5b9a\u5230bean\u4e2d\u3002    \u7528\u5230\u65b9\u6cd5\u4e0a@ModelAttribute\u7684\u793a\u4f8b\u4ee3\u7801\uff1a  @ModelAttribute\npublic Account addAccount(@RequestParam String number) {\n    return accountManager.findAccount(number);\n}  \u8fd9\u79cd\u65b9\u5f0f\u5b9e\u9645\u7684\u6548\u679c\u5c31\u662f\u5728\u8c03\u7528@RequestMapping\u7684\u65b9\u6cd5\u4e4b\u524d\uff0c\u4e3arequest\u5bf9\u8c61\u7684model\u91ccput\uff08\u201caccount\u201d\uff0c Account\uff09\uff1b  \u7528\u5728\u53c2\u6570\u4e0a\u7684@ModelAttribute\u793a\u4f8b\u4ee3\u7801\uff1a  @RequestMapping(value= /owners/{ownerId}/pets/{petId}/edit , method = RequestMethod.POST)\npublic String processSubmit(@ModelAttribute Pet pet) {\n\n}  \u9996\u5148\u67e5\u8be2 @SessionAttributes\u6709\u65e0\u7ed1\u5b9a\u7684Pet\u5bf9\u8c61\uff0c\u82e5\u6ca1\u6709\u5219\u67e5\u8be2@ModelAttribute\u65b9\u6cd5\u5c42\u9762\u4e0a\u662f\u5426\u7ed1\u5b9a\u4e86Pet\u5bf9\u8c61\uff0c\u82e5\u6ca1\u6709\u5219\u5c06URI template\u4e2d\u7684\u503c\u6309\u5bf9\u5e94\u7684\u540d\u79f0\u7ed1\u5b9a\u5230Pet\u5bf9\u8c61\u7684\u5404\u5c5e\u6027\u4e0a\u3002  \u8865\u5145\u8bb2\u89e3\uff1a\n\u95ee\u9898\uff1a \u5728\u4e0d\u7ed9\u5b9a\u6ce8\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u662f\u600e\u6837\u7ed1\u5b9a\u7684\uff1f  \u901a\u8fc7\u5206\u6790AnnotationMethodHandlerAdapter\u548cRequestMappingHandlerAdapter\u7684\u6e90\u4ee3\u7801\u53d1\u73b0\uff0c\u65b9\u6cd5\u7684\u53c2\u6570\u5728\u4e0d\u7ed9\u5b9a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff1a  \u82e5\u8981\u7ed1\u5b9a\u7684\u5bf9\u8c61\u65f6\u7b80\u5355\u7c7b\u578b\uff1a  \u8c03\u7528@RequestParam\u6765\u5904\u7406\u7684\u3002    \u82e5\u8981\u7ed1\u5b9a\u7684\u5bf9\u8c61\u65f6\u590d\u6742\u7c7b\u578b\uff1a  \u8c03\u7528@ModelAttribute\u6765\u5904\u7406\u7684\u3002  \u8fd9\u91cc\u7684\u7b80\u5355\u7c7b\u578b\u6307java\u7684\u539f\u59cb\u7c7b\u578b(boolean, int \u7b49)\u3001\u539f\u59cb\u7c7b\u578b\u5bf9\u8c61\uff08Boolean, Int\u7b49\uff09\u3001String\u3001Date\u7b49ConversionService\u91cc\u53ef\u4ee5\u76f4\u63a5String\u8f6c\u6362\u6210\u76ee\u6807\u5bf9\u8c61\u7684\u7c7b\u578b\uff1b", 
            "title": "@SessionAttributes, @ModelAttribute"
        }, 
        {
            "location": "/limiting/", 
            "text": "\u4ee4\u724c\u6876\u7b97\u6cd5\u9650\u6d41\n\n\n\u7b80\u4ecb\n\n\n\u4ee4\u724c\u6876\u7b97\u6cd5\u6700\u521d\u6765\u6e90\u4e8e\u8ba1\u7b97\u673a\u7f51\u7edc\u3002\u5728\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u62e5\u585e\uff0c\u9700\u9650\u5236\u6d41\u51fa\u7f51\u7edc\u7684\u6d41\u91cf\uff0c\u4f7f\u6d41\u91cf\u4ee5\u6bd4\u8f83\u5747\u5300\u7684\u901f\u5ea6\u5411\u5916\u53d1\u9001\u3002\u4ee4\u724c\u6876\u7b97\u6cd5\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\uff0c\u53ef\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u6570\u636e\u7684\u6570\u76ee\uff0c\u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001\u3002\n\n\n\u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u7f51\u7edc\u6d41\u91cf\u6574\u5f62\uff08Traffic Shaping\uff09\u548c\u901f\u7387\u9650\u5236\uff08Rate Limiting\uff09\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u7528\u6765\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u7684\u6570\u76ee\uff0c\u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001\u3002\n\n\n\u5927\u5c0f\u56fa\u5b9a\u7684\u4ee4\u724c\u6876\u53ef\u81ea\u884c\u4ee5\u6052\u5b9a\u7684\u901f\u7387\u6e90\u6e90\u4e0d\u65ad\u5730\u4ea7\u751f\u4ee4\u724c\u3002\u5982\u679c\u4ee4\u724c\u4e0d\u88ab\u6d88\u8017\uff0c\u6216\u8005\u88ab\u6d88\u8017\u7684\u901f\u5ea6\u5c0f\u4e8e\u4ea7\u751f\u7684\u901f\u5ea6\uff0c\u4ee4\u724c\u5c31\u4f1a\u4e0d\u65ad\u5730\u589e\u591a\uff0c\u76f4\u5230\u628a\u6876\u586b\u6ee1\u3002\u540e\u9762\u518d\u4ea7\u751f\u7684\u4ee4\u724c\u5c31\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u3002\u6700\u540e\u6876\u4e2d\u53ef\u4ee5\u4fdd\u5b58\u7684\u6700\u5927\u4ee4\u724c\u6570\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u6876\u7684\u5927\u5c0f\u3002\n\n\n\u4f20\u9001\u5230\u4ee4\u724c\u6876\u7684\u6570\u636e\u5305\u9700\u8981\u6d88\u8017\u4ee4\u724c\u3002\u4e0d\u540c\u5927\u5c0f\u7684\u6570\u636e\u5305\uff0c\u6d88\u8017\u7684\u4ee4\u724c\u6570\u91cf\u4e0d\u4e00\u6837\u3002\n\n\n\u4ee4\u724c\u6876\u8fd9\u79cd\u63a7\u5236\u673a\u5236\u57fa\u4e8e\u4ee4\u724c\u6876\u4e2d\u662f\u5426\u5b58\u5728\u4ee4\u724c\u6765\u6307\u793a\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u53d1\u9001\u6d41\u91cf\u3002\u4ee4\u724c\u6876\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ee4\u724c\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b57\u8282\u3002\u5982\u679c\u4ee4\u724c\u6876\u4e2d\u5b58\u5728\u4ee4\u724c\uff0c\u5219\u5141\u8bb8\u53d1\u9001\u6d41\u91cf\uff1b\u800c\u5982\u679c\u4ee4\u724c\u6876\u4e2d\u4e0d\u5b58\u5728\u4ee4\u724c\uff0c\u5219\u4e0d\u5141\u8bb8\u53d1\u9001\u6d41\u91cf\u3002\u56e0\u6b64\uff0c\u5982\u679c\u7a81\u53d1\u95e8\u9650\u88ab\u5408\u7406\u5730\u914d\u7f6e\u5e76\u4e14\u4ee4\u724c\u6876\u4e2d\u6709\u8db3\u591f\u7684\u4ee4\u724c\uff0c\u90a3\u4e48\u6d41\u91cf\u5c31\u53ef\u4ee5\u4ee5\u5cf0\u503c\u901f\u7387\u53d1\u9001\u3002\n\n\n\u7b97\u6cd5\u8fc7\u7a0b\n\n\n\n\n\u7b97\u6cd5\u63cf\u8ff0\uff1a\n\n\n\u5047\u5982\u7528\u6237\u914d\u7f6e\u7684\u5e73\u5747\u53d1\u9001\u901f\u7387\u4e3ar\uff0c\u5219\u6bcf\u96941/r\u79d2\u4e00\u4e2a\u4ee4\u724c\u88ab\u52a0\u5165\u5230\u6876\u4e2d\uff08\u6bcf\u79d2\u4f1a\u6709r\u4e2a\u4ee4\u724c\u653e\u5165\u6876\u4e2d\uff09\uff1b\n\n\n\u5047\u8bbe\u6876\u4e2d\u6700\u591a\u53ef\u4ee5\u5b58\u653eb\u4e2a\u4ee4\u724c\u3002\u5982\u679c\u4ee4\u724c\u5230\u8fbe\u65f6\u4ee4\u724c\u6876\u5df2\u7ecf\u6ee1\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4ee4\u724c\u4f1a\u88ab\u4e22\u5f03\uff1b\n\n\n\u5f53\u4e00\u4e2an\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5305\u5230\u8fbe\u65f6\uff0c\u5c31\u4ece\u4ee4\u724c\u6876\u4e2d\u5220\u9664n\u4e2a\u4ee4\u724c\uff08\u4e0d\u540c\u5927\u5c0f\u7684\u6570\u636e\u5305\uff0c\u6d88\u8017\u7684\u4ee4\u724c\u6570\u91cf\u4e0d\u4e00\u6837\uff09\uff0c\u5e76\u4e14\u6570\u636e\u5305\u88ab\u53d1\u9001\u5230\u7f51\u7edc\uff1b\n\n\n\u5982\u679c\u4ee4\u724c\u6876\u4e2d\u5c11\u4e8en\u4e2a\u4ee4\u724c\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5220\u9664\u4ee4\u724c\uff0c\u5e76\u4e14\u8ba4\u4e3a\u8fd9\u4e2a\u6570\u636e\u5305\u5728\u6d41\u91cf\u9650\u5236\u4e4b\u5916\uff08n\u4e2a\u5b57\u8282\uff0c\u9700\u8981n\u4e2a\u4ee4\u724c\u3002\u8be5\u6570\u636e\u5305\u5c06\u88ab\u7f13\u5b58\u6216\u4e22\u5f03\uff09\uff1b\n\n\n\u7b97\u6cd5\u5141\u8bb8\u6700\u957fb\u4e2a\u5b57\u8282\u7684\u7a81\u53d1\uff0c\u4f46\u4ece\u957f\u671f\u8fd0\u884c\u7ed3\u679c\u770b\uff0c\u6570\u636e\u5305\u7684\u901f\u7387\u88ab\u9650\u5236\u6210\u5e38\u91cfr\u3002\u5bf9\u4e8e\u5728\u6d41\u91cf\u9650\u5236\u5916\u7684\u6570\u636e\u5305\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\uff1a\uff081\uff09\u5b83\u4eec\u53ef\u4ee5\u88ab\u4e22\u5f03\uff1b\uff082\uff09\u5b83\u4eec\u53ef\u4ee5\u6392\u653e\u5728\u961f\u5217\u4e2d\u4ee5\u4fbf\u5f53\u4ee4\u724c\u6876\u4e2d\u7d2f\u79ef\u4e86\u8db3\u591f\u591a\u7684\u4ee4\u724c\u65f6\u518d\u4f20\u8f93\uff1b\uff083\uff09\u5b83\u4eec\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\uff0c\u4f46\u9700\u8981\u505a\u7279\u6b8a\u6807\u8bb0\uff0c\u7f51\u7edc\u8fc7\u8f7d\u7684\u65f6\u5019\u5c06\u8fd9\u4e9b\u7279\u6b8a\u6807\u8bb0\u7684\u5305\u4e22\u5f03\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\u4ee4\u724c\u6876\u7b97\u6cd5\u4e0d\u80fd\u4e0e\u53e6\u5916\u4e00\u79cd\u5e38\u89c1\u7b97\u6cd5\u6f0f\u6876\u7b97\u6cd5\u76f8\u6df7\u6dc6\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u6f0f\u6876\u7b97\u6cd5\u80fd\u591f\u5f3a\u884c\u9650\u5236\u6570\u636e\u7684\u4f20\u8f93\u901f\u7387\uff0c\u800c\u4ee4\u724c\u6876\u7b97\u6cd5\u5728\u80fd\u591f\u9650\u5236\u6570\u636e\u7684\u5e73\u5747\u4f20\u8f93\u901f\u7387\u5916\uff0c\u8fd8\u5141\u8bb8\u67d0\u79cd\u7a0b\u5ea6\u7684\u7a81\u53d1\u4f20\u8f93\u3002\u5728\u4ee4\u724c\u6876\u7b97\u6cd5\u4e2d\uff0c\u53ea\u8981\u4ee4\u724c\u6876\u4e2d\u5b58\u5728\u4ee4\u724c\uff0c\u90a3\u4e48\u5c31\u5141\u8bb8\u7a81\u53d1\u5730\u4f20\u8f93\u6570\u636e\u76f4\u5230\u8fbe\u5230\u7528\u6237\u914d\u7f6e\u7684\u95e8\u9650\uff0c\u56e0\u6b64\u5b83\u9002\u5408\u4e8e\u5177\u6709\u7a81\u53d1\u7279\u6027\u7684\u6d41\u91cf\u3002\n\n\n3.Java\u5b9e\u73b0\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Guava \u7684 RateLimiter \u6765\u5b9e\u73b0\u57fa\u4e8e\u4ee4\u724c\u6876\u7684\u6d41\u63a7\uff0cRateLimiter \u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u5355\u6876\u5b9e\u73b0\u3002RateLimiter \u5bf9\u7b80\u5355\u7684\u4ee4\u724c\u6876\u7b97\u6cd5\u505a\u4e86\u4e00\u4e9b\u5de5\u7a0b\u4e0a\u7684\u4f18\u5316\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u662f SmoothBursty\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRateLimiter \u7684\u53e6\u4e00\u4e2a\u5b9e\u73b0SmoothWarmingUp\uff0c\u5c31\u4e0d\u662f\u4ee4\u724c\u6876\u4e86\uff0c\u800c\u662f\u6f0f\u6876\u7b97\u6cd5\u3002\u4e5f\u8bb8\u662f\u51fa\u4e8e\u7b80\u5355\u8d77\u89c1\uff0cRateLimiter \u4e2d\u7684\u65f6\u95f4\u7a97\u53e3\u80fd\u4e14\u4ec5\u80fd\u4e3a 1s\u3002\n\n\nSmoothBursty \u6709\u4e00\u4e2a\u53ef\u4ee5\u653e N \u4e2a\u65f6\u95f4\u7a97\u53e3\u4ea7\u751f\u7684\u4ee4\u724c\u7684\u6876\uff0c\u7cfb\u7edf\u7a7a\u95f2\u7684\u65f6\u5019\u4ee4\u724c\u5c31\u4e00\u76f4\u6512\u7740\uff0c\u6700\u597d\u60c5\u51b5\u4e0b\u53ef\u4ee5\u625b N \u500d\u4e8e\u9650\u6d41\u503c\u7684\u9ad8\u5cf0\u800c\u4e0d\u5f71\u54cd\u540e\u7eed\u8bf7\u6c42\u3002RateLimite\u5141\u8bb8\u67d0\u6b21\u8bf7\u6c42\u62ff\u8d70\u8d85\u51fa\u5269\u4f59\u4ee4\u724c\u6570\u7684\u4ee4\u724c\uff0c\u4f46\u662f\u4e0b\u4e00\u6b21\u8bf7\u6c42\u5c06\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u4e00\u76f4\u7b49\u5230\u4ee4\u724c\u4e8f\u7a7a\u8865\u4e0a\uff0c\u5e76\u4e14\u6876\u4e2d\u6709\u8db3\u591f\u672c\u6b21\u8bf7\u6c42\u4f7f\u7528\u7684\u4ee4\u724c\u4e3a\u6b62\u3002\u5f53\u67d0\u6b21\u8bf7\u6c42\u4e0d\u80fd\u5f97\u5230\u6240\u9700\u8981\u7684\u4ee4\u724c\u65f6\uff0c\u8fd9\u65f6\u6d89\u53ca\u5230\u4e00\u4e2a\u6743\u8861\uff0c\u662f\u8ba9\u524d\u4e00\u6b21\u8bf7\u6c42\u5e72\u7b49\u5230\u4ee4\u724c\u591f\u7528\u624d\u8d70\u6389\u5462\uff0c\u8fd8\u662f\u8ba9\u5b83\u5148\u8d70\u6389\u540e\u9762\u7684\u8bf7\u6c42\u7b49\u4e00\u7b49\u5462\uff1fGuava \u7684\u8bbe\u8ba1\u8005\u9009\u62e9\u7684\u662f\u540e\u8005\uff0c\u5148\u628a\u773c\u524d\u7684\u6d3b\u5e72\u4e86\uff0c\u540e\u9762\u7684\u4e8b\u540e\u9762\u518d\u8bf4\u3002\n\n\nRateLimit--guava\u6765\u505a\u9650\u6d41\n\n\n\u4e00\u3001\u95ee\u9898\u63cf\u8ff0  \n\n\n\u67d0\u5929A\u541b\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u7684\u63a5\u53e3\u8bf7\u6c42\u91cf\u7a81\u7136\u6da8\u5230\u4e4b\u524d\u768410\u500d\uff0c\u6ca1\u591a\u4e45\u8be5\u63a5\u53e3\u51e0\u4e4e\u4e0d\u53ef\u4f7f\u7528\uff0c\u5e76\u5f15\u53d1\u8fde\u9501\u53cd\u5e94\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002\u5982\u4f55\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\u751f\u6d3b\u7ed9\u4e86\u6211\u4eec\u7b54\u6848\uff1a\u6bd4\u5982\u8001\u5f0f\u7535\u95f8\u90fd\u5b89\u88c5\u4e86\u4fdd\u9669\u4e1d\uff0c\u4e00\u65e6\u6709\u4eba\u4f7f\u7528\u8d85\u5927\u529f\u7387\u7684\u8bbe\u5907\uff0c\u4fdd\u9669\u4e1d\u5c31\u4f1a\u70e7\u65ad\u4ee5\u4fdd\u62a4\u5404\u4e2a\u7535\u5668\u4e0d\u88ab\u5f3a\u7535\u6d41\u7ed9\u70e7\u574f\u3002\u540c\u7406\u6211\u4eec\u7684\u63a5\u53e3\u4e5f\u9700\u8981\u5b89\u88c5\u4e0a\u201c\u4fdd\u9669\u4e1d\u201d\uff0c\u4ee5\u9632\u6b62\u975e\u9884\u671f\u7684\u8bf7\u6c42\u5bf9\u7cfb\u7edf\u538b\u529b\u8fc7\u5927\u800c\u5f15\u8d77\u7684\u7cfb\u7edf\u762b\u75ea\uff0c\u5f53\u6d41\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u4ee5\u91c7\u53d6\u62d2\u7edd\u6216\u8005\u5f15\u6d41\u7b49\u673a\u5236\n\n\n\u4e8c\u3001\u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5\n\n\n\u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5\u6709\u4e24\u79cd\uff1a\u6f0f\u6876\u7b97\u6cd5\u548c\u4ee4\u724c\u6876\u7b97\u6cd5\uff0c\u8fd9\u7bc7\u535a\u6587\u4ecb\u7ecd\u5f97\u6bd4\u8f83\u6e05\u6670\uff08\n\u8fc7\u8f7d\u4fdd\u62a4\u7b97\u6cd5\u6d45\u6790\n\uff09\u3002\n\u6f0f\u6876\u7b97\u6cd5\u601d\u8def\u5f88\u7b80\u5355\uff0c\u8bf7\u6c42\u5148\u8fdb\u5165\u5230\u6f0f\u6876\u91cc\uff0c\u6f0f\u6876\u4ee5\u4e00\u5b9a\u7684\u901f\u5ea6\u51fa\u6c34\uff0c\u5f53\u6c34\u8bf7\u6c42\u8fc7\u5927\u4f1a\u76f4\u63a5\u6ea2\u51fa\uff0c\u53ef\u4ee5\u770b\u51fa\u6f0f\u6876\u7b97\u6cd5\u80fd\u5f3a\u884c\u9650\u5236\u6570\u636e\u7684\u4f20\u8f93\u901f\u7387\u3002\n\n\n\n\u5bf9\u4e8e\u5f88\u591a\u5e94\u7528\u573a\u666f\u6765\u8bf4\uff0c\u9664\u4e86\u8981\u6c42\u80fd\u591f\u9650\u5236\u6570\u636e\u7684\u5e73\u5747\u4f20\u8f93\u901f\u7387\u5916\uff0c\u8fd8\u8981\u6c42\u5141\u8bb8\u67d0\u79cd\u7a0b\u5ea6\u7684\u7a81\u53d1\u4f20\u8f93\u3002\u8fd9\u65f6\u5019\u6f0f\u6876\u7b97\u6cd5\u53ef\u80fd\u5c31\u4e0d\u5408\u9002\u4e86\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u66f4\u4e3a\u9002\u5408\u3002\u5982\u56fe2\u6240\u793a\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u7684\u539f\u7406\u662f\u7cfb\u7edf\u4f1a\u4ee5\u4e00\u4e2a\u6052\u5b9a\u7684\u901f\u5ea6\u5f80\u6876\u91cc\u653e\u5165\u4ee4\u724c\uff0c\u800c\u5982\u679c\u8bf7\u6c42\u9700\u8981\u88ab\u5904\u7406\uff0c\u5219\u9700\u8981\u5148\u4ece\u6876\u91cc\u83b7\u53d6\u4e00\u4e2a\u4ee4\u724c\uff0c\u5f53\u6876\u91cc\u6ca1\u6709\u4ee4\u724c\u53ef\u53d6\u65f6\uff0c\u5219\u62d2\u7edd\u670d\u52a1\u3002\n\n\n\n\u4e09\u3001\u9650\u6d41\u5de5\u5177\u7c7bRateLimiter\n\n\ngoogle\u5f00\u6e90\u5de5\u5177\u5305guava\u63d0\u4f9b\u4e86\u9650\u6d41\u5de5\u5177\u7c7bRateLimiter\uff0c\u8be5\u7c7b\u57fa\u4e8e\u201c\u4ee4\u724c\u6876\u7b97\u6cd5\u201d\uff0c\u975e\u5e38\u65b9\u4fbf\u4f7f\u7528\u3002\u8be5\u7c7b\u7684\u63a5\u53e3\u63cf\u8ff0\u8bf7\u53c2\u8003\uff1a\nRateLimiter\u63a5\u53e3\u63cf\u8ff0\n\uff0c\u5177\u4f53\u7684\u4f7f\u7528\u8bf7\u53c2\u8003\uff1a\nRateLimiter\u4f7f\u7528\u5b9e\u8df5\n\n\nRateLimiter \u4f7f\u7528Demo\n\n\npackage ratelimite;  \n\nimport com.google.common.util.concurrent.RateLimiter;  \n\npublic class RateLimiterDemo {  \n    public static void main(String[] args) {  \n        testNoRateLimiter();  \n        testWithRateLimiter();  \n    }  \n\n    public static void testNoRateLimiter() {  \n        Long start = System.currentTimeMillis();  \n        for (int i = 0; i \n 10; i++) {  \n            System.out.println(\ncall execute..\n + i);  \n\n        }  \n        Long end = System.currentTimeMillis();  \n\n        System.out.println(end - start);  \n\n    }  \n\n    public static void testWithRateLimiter() {  \n        Long start = System.currentTimeMillis();  \n        RateLimiter limiter = RateLimiter.create(10.0); // \u6bcf\u79d2\u4e0d\u8d85\u8fc710\u4e2a\u4efb\u52a1\u88ab\u63d0\u4ea4  \n        for (int i = 0; i \n 10; i++) {  \n            limiter.acquire(); // \u8bf7\u6c42RateLimiter, \u8d85\u8fc7permits\u4f1a\u88ab\u963b\u585e  \n            System.out.println(\ncall execute..\n + i);  \n\n        }  \n        Long end = System.currentTimeMillis();  \n\n        System.out.println(end - start);  \n\n    }  \n\n}  \n\n\n\n\n\u53c2\u8003\u8d44\u6599", 
            "title": "\u4ee4\u724c\u6876"
        }, 
        {
            "location": "/limiting/#_1", 
            "text": "", 
            "title": "\u4ee4\u724c\u6876\u7b97\u6cd5\u9650\u6d41"
        }, 
        {
            "location": "/limiting/#_2", 
            "text": "\u4ee4\u724c\u6876\u7b97\u6cd5\u6700\u521d\u6765\u6e90\u4e8e\u8ba1\u7b97\u673a\u7f51\u7edc\u3002\u5728\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u62e5\u585e\uff0c\u9700\u9650\u5236\u6d41\u51fa\u7f51\u7edc\u7684\u6d41\u91cf\uff0c\u4f7f\u6d41\u91cf\u4ee5\u6bd4\u8f83\u5747\u5300\u7684\u901f\u5ea6\u5411\u5916\u53d1\u9001\u3002\u4ee4\u724c\u6876\u7b97\u6cd5\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\uff0c\u53ef\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u6570\u636e\u7684\u6570\u76ee\uff0c\u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001\u3002  \u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u7f51\u7edc\u6d41\u91cf\u6574\u5f62\uff08Traffic Shaping\uff09\u548c\u901f\u7387\u9650\u5236\uff08Rate Limiting\uff09\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u7528\u6765\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u7684\u6570\u76ee\uff0c\u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001\u3002  \u5927\u5c0f\u56fa\u5b9a\u7684\u4ee4\u724c\u6876\u53ef\u81ea\u884c\u4ee5\u6052\u5b9a\u7684\u901f\u7387\u6e90\u6e90\u4e0d\u65ad\u5730\u4ea7\u751f\u4ee4\u724c\u3002\u5982\u679c\u4ee4\u724c\u4e0d\u88ab\u6d88\u8017\uff0c\u6216\u8005\u88ab\u6d88\u8017\u7684\u901f\u5ea6\u5c0f\u4e8e\u4ea7\u751f\u7684\u901f\u5ea6\uff0c\u4ee4\u724c\u5c31\u4f1a\u4e0d\u65ad\u5730\u589e\u591a\uff0c\u76f4\u5230\u628a\u6876\u586b\u6ee1\u3002\u540e\u9762\u518d\u4ea7\u751f\u7684\u4ee4\u724c\u5c31\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u3002\u6700\u540e\u6876\u4e2d\u53ef\u4ee5\u4fdd\u5b58\u7684\u6700\u5927\u4ee4\u724c\u6570\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u6876\u7684\u5927\u5c0f\u3002  \u4f20\u9001\u5230\u4ee4\u724c\u6876\u7684\u6570\u636e\u5305\u9700\u8981\u6d88\u8017\u4ee4\u724c\u3002\u4e0d\u540c\u5927\u5c0f\u7684\u6570\u636e\u5305\uff0c\u6d88\u8017\u7684\u4ee4\u724c\u6570\u91cf\u4e0d\u4e00\u6837\u3002  \u4ee4\u724c\u6876\u8fd9\u79cd\u63a7\u5236\u673a\u5236\u57fa\u4e8e\u4ee4\u724c\u6876\u4e2d\u662f\u5426\u5b58\u5728\u4ee4\u724c\u6765\u6307\u793a\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u53d1\u9001\u6d41\u91cf\u3002\u4ee4\u724c\u6876\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ee4\u724c\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b57\u8282\u3002\u5982\u679c\u4ee4\u724c\u6876\u4e2d\u5b58\u5728\u4ee4\u724c\uff0c\u5219\u5141\u8bb8\u53d1\u9001\u6d41\u91cf\uff1b\u800c\u5982\u679c\u4ee4\u724c\u6876\u4e2d\u4e0d\u5b58\u5728\u4ee4\u724c\uff0c\u5219\u4e0d\u5141\u8bb8\u53d1\u9001\u6d41\u91cf\u3002\u56e0\u6b64\uff0c\u5982\u679c\u7a81\u53d1\u95e8\u9650\u88ab\u5408\u7406\u5730\u914d\u7f6e\u5e76\u4e14\u4ee4\u724c\u6876\u4e2d\u6709\u8db3\u591f\u7684\u4ee4\u724c\uff0c\u90a3\u4e48\u6d41\u91cf\u5c31\u53ef\u4ee5\u4ee5\u5cf0\u503c\u901f\u7387\u53d1\u9001\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/limiting/#_3", 
            "text": "\u7b97\u6cd5\u63cf\u8ff0\uff1a  \u5047\u5982\u7528\u6237\u914d\u7f6e\u7684\u5e73\u5747\u53d1\u9001\u901f\u7387\u4e3ar\uff0c\u5219\u6bcf\u96941/r\u79d2\u4e00\u4e2a\u4ee4\u724c\u88ab\u52a0\u5165\u5230\u6876\u4e2d\uff08\u6bcf\u79d2\u4f1a\u6709r\u4e2a\u4ee4\u724c\u653e\u5165\u6876\u4e2d\uff09\uff1b  \u5047\u8bbe\u6876\u4e2d\u6700\u591a\u53ef\u4ee5\u5b58\u653eb\u4e2a\u4ee4\u724c\u3002\u5982\u679c\u4ee4\u724c\u5230\u8fbe\u65f6\u4ee4\u724c\u6876\u5df2\u7ecf\u6ee1\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4ee4\u724c\u4f1a\u88ab\u4e22\u5f03\uff1b  \u5f53\u4e00\u4e2an\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5305\u5230\u8fbe\u65f6\uff0c\u5c31\u4ece\u4ee4\u724c\u6876\u4e2d\u5220\u9664n\u4e2a\u4ee4\u724c\uff08\u4e0d\u540c\u5927\u5c0f\u7684\u6570\u636e\u5305\uff0c\u6d88\u8017\u7684\u4ee4\u724c\u6570\u91cf\u4e0d\u4e00\u6837\uff09\uff0c\u5e76\u4e14\u6570\u636e\u5305\u88ab\u53d1\u9001\u5230\u7f51\u7edc\uff1b  \u5982\u679c\u4ee4\u724c\u6876\u4e2d\u5c11\u4e8en\u4e2a\u4ee4\u724c\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5220\u9664\u4ee4\u724c\uff0c\u5e76\u4e14\u8ba4\u4e3a\u8fd9\u4e2a\u6570\u636e\u5305\u5728\u6d41\u91cf\u9650\u5236\u4e4b\u5916\uff08n\u4e2a\u5b57\u8282\uff0c\u9700\u8981n\u4e2a\u4ee4\u724c\u3002\u8be5\u6570\u636e\u5305\u5c06\u88ab\u7f13\u5b58\u6216\u4e22\u5f03\uff09\uff1b  \u7b97\u6cd5\u5141\u8bb8\u6700\u957fb\u4e2a\u5b57\u8282\u7684\u7a81\u53d1\uff0c\u4f46\u4ece\u957f\u671f\u8fd0\u884c\u7ed3\u679c\u770b\uff0c\u6570\u636e\u5305\u7684\u901f\u7387\u88ab\u9650\u5236\u6210\u5e38\u91cfr\u3002\u5bf9\u4e8e\u5728\u6d41\u91cf\u9650\u5236\u5916\u7684\u6570\u636e\u5305\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\uff1a\uff081\uff09\u5b83\u4eec\u53ef\u4ee5\u88ab\u4e22\u5f03\uff1b\uff082\uff09\u5b83\u4eec\u53ef\u4ee5\u6392\u653e\u5728\u961f\u5217\u4e2d\u4ee5\u4fbf\u5f53\u4ee4\u724c\u6876\u4e2d\u7d2f\u79ef\u4e86\u8db3\u591f\u591a\u7684\u4ee4\u724c\u65f6\u518d\u4f20\u8f93\uff1b\uff083\uff09\u5b83\u4eec\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\uff0c\u4f46\u9700\u8981\u505a\u7279\u6b8a\u6807\u8bb0\uff0c\u7f51\u7edc\u8fc7\u8f7d\u7684\u65f6\u5019\u5c06\u8fd9\u4e9b\u7279\u6b8a\u6807\u8bb0\u7684\u5305\u4e22\u5f03\u3002  \u6ce8\u610f\uff1a  \u4ee4\u724c\u6876\u7b97\u6cd5\u4e0d\u80fd\u4e0e\u53e6\u5916\u4e00\u79cd\u5e38\u89c1\u7b97\u6cd5\u6f0f\u6876\u7b97\u6cd5\u76f8\u6df7\u6dc6\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u6f0f\u6876\u7b97\u6cd5\u80fd\u591f\u5f3a\u884c\u9650\u5236\u6570\u636e\u7684\u4f20\u8f93\u901f\u7387\uff0c\u800c\u4ee4\u724c\u6876\u7b97\u6cd5\u5728\u80fd\u591f\u9650\u5236\u6570\u636e\u7684\u5e73\u5747\u4f20\u8f93\u901f\u7387\u5916\uff0c\u8fd8\u5141\u8bb8\u67d0\u79cd\u7a0b\u5ea6\u7684\u7a81\u53d1\u4f20\u8f93\u3002\u5728\u4ee4\u724c\u6876\u7b97\u6cd5\u4e2d\uff0c\u53ea\u8981\u4ee4\u724c\u6876\u4e2d\u5b58\u5728\u4ee4\u724c\uff0c\u90a3\u4e48\u5c31\u5141\u8bb8\u7a81\u53d1\u5730\u4f20\u8f93\u6570\u636e\u76f4\u5230\u8fbe\u5230\u7528\u6237\u914d\u7f6e\u7684\u95e8\u9650\uff0c\u56e0\u6b64\u5b83\u9002\u5408\u4e8e\u5177\u6709\u7a81\u53d1\u7279\u6027\u7684\u6d41\u91cf\u3002  3.Java\u5b9e\u73b0  \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Guava \u7684 RateLimiter \u6765\u5b9e\u73b0\u57fa\u4e8e\u4ee4\u724c\u6876\u7684\u6d41\u63a7\uff0cRateLimiter \u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u5355\u6876\u5b9e\u73b0\u3002RateLimiter \u5bf9\u7b80\u5355\u7684\u4ee4\u724c\u6876\u7b97\u6cd5\u505a\u4e86\u4e00\u4e9b\u5de5\u7a0b\u4e0a\u7684\u4f18\u5316\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u662f SmoothBursty\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRateLimiter \u7684\u53e6\u4e00\u4e2a\u5b9e\u73b0SmoothWarmingUp\uff0c\u5c31\u4e0d\u662f\u4ee4\u724c\u6876\u4e86\uff0c\u800c\u662f\u6f0f\u6876\u7b97\u6cd5\u3002\u4e5f\u8bb8\u662f\u51fa\u4e8e\u7b80\u5355\u8d77\u89c1\uff0cRateLimiter \u4e2d\u7684\u65f6\u95f4\u7a97\u53e3\u80fd\u4e14\u4ec5\u80fd\u4e3a 1s\u3002  SmoothBursty \u6709\u4e00\u4e2a\u53ef\u4ee5\u653e N \u4e2a\u65f6\u95f4\u7a97\u53e3\u4ea7\u751f\u7684\u4ee4\u724c\u7684\u6876\uff0c\u7cfb\u7edf\u7a7a\u95f2\u7684\u65f6\u5019\u4ee4\u724c\u5c31\u4e00\u76f4\u6512\u7740\uff0c\u6700\u597d\u60c5\u51b5\u4e0b\u53ef\u4ee5\u625b N \u500d\u4e8e\u9650\u6d41\u503c\u7684\u9ad8\u5cf0\u800c\u4e0d\u5f71\u54cd\u540e\u7eed\u8bf7\u6c42\u3002RateLimite\u5141\u8bb8\u67d0\u6b21\u8bf7\u6c42\u62ff\u8d70\u8d85\u51fa\u5269\u4f59\u4ee4\u724c\u6570\u7684\u4ee4\u724c\uff0c\u4f46\u662f\u4e0b\u4e00\u6b21\u8bf7\u6c42\u5c06\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u4e00\u76f4\u7b49\u5230\u4ee4\u724c\u4e8f\u7a7a\u8865\u4e0a\uff0c\u5e76\u4e14\u6876\u4e2d\u6709\u8db3\u591f\u672c\u6b21\u8bf7\u6c42\u4f7f\u7528\u7684\u4ee4\u724c\u4e3a\u6b62\u3002\u5f53\u67d0\u6b21\u8bf7\u6c42\u4e0d\u80fd\u5f97\u5230\u6240\u9700\u8981\u7684\u4ee4\u724c\u65f6\uff0c\u8fd9\u65f6\u6d89\u53ca\u5230\u4e00\u4e2a\u6743\u8861\uff0c\u662f\u8ba9\u524d\u4e00\u6b21\u8bf7\u6c42\u5e72\u7b49\u5230\u4ee4\u724c\u591f\u7528\u624d\u8d70\u6389\u5462\uff0c\u8fd8\u662f\u8ba9\u5b83\u5148\u8d70\u6389\u540e\u9762\u7684\u8bf7\u6c42\u7b49\u4e00\u7b49\u5462\uff1fGuava \u7684\u8bbe\u8ba1\u8005\u9009\u62e9\u7684\u662f\u540e\u8005\uff0c\u5148\u628a\u773c\u524d\u7684\u6d3b\u5e72\u4e86\uff0c\u540e\u9762\u7684\u4e8b\u540e\u9762\u518d\u8bf4\u3002", 
            "title": "\u7b97\u6cd5\u8fc7\u7a0b"
        }, 
        {
            "location": "/limiting/#ratelimit-guava", 
            "text": "\u4e00\u3001\u95ee\u9898\u63cf\u8ff0    \u67d0\u5929A\u541b\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u7684\u63a5\u53e3\u8bf7\u6c42\u91cf\u7a81\u7136\u6da8\u5230\u4e4b\u524d\u768410\u500d\uff0c\u6ca1\u591a\u4e45\u8be5\u63a5\u53e3\u51e0\u4e4e\u4e0d\u53ef\u4f7f\u7528\uff0c\u5e76\u5f15\u53d1\u8fde\u9501\u53cd\u5e94\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002\u5982\u4f55\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\u751f\u6d3b\u7ed9\u4e86\u6211\u4eec\u7b54\u6848\uff1a\u6bd4\u5982\u8001\u5f0f\u7535\u95f8\u90fd\u5b89\u88c5\u4e86\u4fdd\u9669\u4e1d\uff0c\u4e00\u65e6\u6709\u4eba\u4f7f\u7528\u8d85\u5927\u529f\u7387\u7684\u8bbe\u5907\uff0c\u4fdd\u9669\u4e1d\u5c31\u4f1a\u70e7\u65ad\u4ee5\u4fdd\u62a4\u5404\u4e2a\u7535\u5668\u4e0d\u88ab\u5f3a\u7535\u6d41\u7ed9\u70e7\u574f\u3002\u540c\u7406\u6211\u4eec\u7684\u63a5\u53e3\u4e5f\u9700\u8981\u5b89\u88c5\u4e0a\u201c\u4fdd\u9669\u4e1d\u201d\uff0c\u4ee5\u9632\u6b62\u975e\u9884\u671f\u7684\u8bf7\u6c42\u5bf9\u7cfb\u7edf\u538b\u529b\u8fc7\u5927\u800c\u5f15\u8d77\u7684\u7cfb\u7edf\u762b\u75ea\uff0c\u5f53\u6d41\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u4ee5\u91c7\u53d6\u62d2\u7edd\u6216\u8005\u5f15\u6d41\u7b49\u673a\u5236  \u4e8c\u3001\u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5  \u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5\u6709\u4e24\u79cd\uff1a\u6f0f\u6876\u7b97\u6cd5\u548c\u4ee4\u724c\u6876\u7b97\u6cd5\uff0c\u8fd9\u7bc7\u535a\u6587\u4ecb\u7ecd\u5f97\u6bd4\u8f83\u6e05\u6670\uff08 \u8fc7\u8f7d\u4fdd\u62a4\u7b97\u6cd5\u6d45\u6790 \uff09\u3002\n\u6f0f\u6876\u7b97\u6cd5\u601d\u8def\u5f88\u7b80\u5355\uff0c\u8bf7\u6c42\u5148\u8fdb\u5165\u5230\u6f0f\u6876\u91cc\uff0c\u6f0f\u6876\u4ee5\u4e00\u5b9a\u7684\u901f\u5ea6\u51fa\u6c34\uff0c\u5f53\u6c34\u8bf7\u6c42\u8fc7\u5927\u4f1a\u76f4\u63a5\u6ea2\u51fa\uff0c\u53ef\u4ee5\u770b\u51fa\u6f0f\u6876\u7b97\u6cd5\u80fd\u5f3a\u884c\u9650\u5236\u6570\u636e\u7684\u4f20\u8f93\u901f\u7387\u3002  \u5bf9\u4e8e\u5f88\u591a\u5e94\u7528\u573a\u666f\u6765\u8bf4\uff0c\u9664\u4e86\u8981\u6c42\u80fd\u591f\u9650\u5236\u6570\u636e\u7684\u5e73\u5747\u4f20\u8f93\u901f\u7387\u5916\uff0c\u8fd8\u8981\u6c42\u5141\u8bb8\u67d0\u79cd\u7a0b\u5ea6\u7684\u7a81\u53d1\u4f20\u8f93\u3002\u8fd9\u65f6\u5019\u6f0f\u6876\u7b97\u6cd5\u53ef\u80fd\u5c31\u4e0d\u5408\u9002\u4e86\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u66f4\u4e3a\u9002\u5408\u3002\u5982\u56fe2\u6240\u793a\uff0c\u4ee4\u724c\u6876\u7b97\u6cd5\u7684\u539f\u7406\u662f\u7cfb\u7edf\u4f1a\u4ee5\u4e00\u4e2a\u6052\u5b9a\u7684\u901f\u5ea6\u5f80\u6876\u91cc\u653e\u5165\u4ee4\u724c\uff0c\u800c\u5982\u679c\u8bf7\u6c42\u9700\u8981\u88ab\u5904\u7406\uff0c\u5219\u9700\u8981\u5148\u4ece\u6876\u91cc\u83b7\u53d6\u4e00\u4e2a\u4ee4\u724c\uff0c\u5f53\u6876\u91cc\u6ca1\u6709\u4ee4\u724c\u53ef\u53d6\u65f6\uff0c\u5219\u62d2\u7edd\u670d\u52a1\u3002  \u4e09\u3001\u9650\u6d41\u5de5\u5177\u7c7bRateLimiter  google\u5f00\u6e90\u5de5\u5177\u5305guava\u63d0\u4f9b\u4e86\u9650\u6d41\u5de5\u5177\u7c7bRateLimiter\uff0c\u8be5\u7c7b\u57fa\u4e8e\u201c\u4ee4\u724c\u6876\u7b97\u6cd5\u201d\uff0c\u975e\u5e38\u65b9\u4fbf\u4f7f\u7528\u3002\u8be5\u7c7b\u7684\u63a5\u53e3\u63cf\u8ff0\u8bf7\u53c2\u8003\uff1a RateLimiter\u63a5\u53e3\u63cf\u8ff0 \uff0c\u5177\u4f53\u7684\u4f7f\u7528\u8bf7\u53c2\u8003\uff1a RateLimiter\u4f7f\u7528\u5b9e\u8df5  RateLimiter \u4f7f\u7528Demo  package ratelimite;  \n\nimport com.google.common.util.concurrent.RateLimiter;  \n\npublic class RateLimiterDemo {  \n    public static void main(String[] args) {  \n        testNoRateLimiter();  \n        testWithRateLimiter();  \n    }  \n\n    public static void testNoRateLimiter() {  \n        Long start = System.currentTimeMillis();  \n        for (int i = 0; i   10; i++) {  \n            System.out.println( call execute..  + i);  \n\n        }  \n        Long end = System.currentTimeMillis();  \n\n        System.out.println(end - start);  \n\n    }  \n\n    public static void testWithRateLimiter() {  \n        Long start = System.currentTimeMillis();  \n        RateLimiter limiter = RateLimiter.create(10.0); // \u6bcf\u79d2\u4e0d\u8d85\u8fc710\u4e2a\u4efb\u52a1\u88ab\u63d0\u4ea4  \n        for (int i = 0; i   10; i++) {  \n            limiter.acquire(); // \u8bf7\u6c42RateLimiter, \u8d85\u8fc7permits\u4f1a\u88ab\u963b\u585e  \n            System.out.println( call execute..  + i);  \n\n        }  \n        Long end = System.currentTimeMillis();  \n\n        System.out.println(end - start);  \n\n    }  \n\n}    \u53c2\u8003\u8d44\u6599", 
            "title": "RateLimit--guava\u6765\u505a\u9650\u6d41"
        }, 
        {
            "location": "/javassit/", 
            "text": "Java\u52a8\u6001\u4ee3\u7406\u673a\u5236\u8be6\u89e3\uff08JDK \u548cCGLIB\uff0cJavassist\uff0cASM\uff09\n\n\nclass\u6587\u4ef6\u7b80\u4ecb\u53ca\u52a0\u8f7d\n\n\nJava\u7f16\u8bd1\u5668\u7f16\u8bd1\u597dJava\u6587\u4ef6\u4e4b\u540e\uff0c\u4ea7\u751f.class \u6587\u4ef6\u5728\u78c1\u76d8\u4e2d\u3002\u8fd9\u79cdclass\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5185\u5bb9\u662f\u53ea\u6709JVM\u865a\u62df\u673a\u80fd\u591f\u8bc6\u522b\u7684\u673a\u5668\u7801\u3002JVM\u865a\u62df\u673a\u8bfb\u53d6\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u89e3\u6790.class \u6587\u4ef6\u5185\u7684\u4fe1\u606f\uff0c\u751f\u6210\u5bf9\u5e94\u7684 Class\u5bf9\u8c61:\n\n\n\nclass\u5b57\u8282\u7801\u6587\u4ef6\u662f\u6839\u636eJVM\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c4\u5b9a\u7684\u5b57\u8282\u7801\u7ec4\u7ec7\u89c4\u5219\u751f\u6210\u7684\u3001\u5177\u4f53class\u6587\u4ef6\u662f\u600e\u6837\u7ec4\u7ec7\u7c7b\u4fe1\u606f\u7684\uff0c\u53ef\u4ee5\u53c2\u8003 \u6b64\u535a\u6587\uff1a\u6df1\u5165\u7406\u89e3Java Class\u6587\u4ef6\u683c\u5f0f\u7cfb\u5217\u3002\u6216\u8005\u662fJava\u865a\u62df\u673a\u89c4\u8303\u3002\n     \u4e0b\u9762\u901a\u8fc7\u4e00\u6bb5\u4ee3\u7801\u6f14\u793a\u624b\u52a8\u52a0\u8f7d class\u6587\u4ef6\u5b57\u8282\u7801\u5230\u7cfb\u7edf\u5185\uff0c\u8f6c\u6362\u6210class\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\uff1a\n\n\n\n\na. \u5b9a\u4e49\u4e00\u4e2a Programmer\u7c7b\uff1a\n\n\n\n\npackage samples;  \n/** \n * \u7a0b\u5e8f\u733f\u7c7b \n * @author louluan \n */  \npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println(\nI'm a Programmer,Just Coding.....\n);  \n    }  \n}  \n\n\n\n\n\n\nb. \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff1a\n\n\n\n\npackage samples;  \n/** \n * \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff0c\u7528\u4e8e\u5c06\u5b57\u8282\u7801\u8f6c\u6362\u4e3aclass\u5bf9\u8c61 \n * @author louluan \n */  \npublic class MyClassLoader extends ClassLoader {  \n\n    public Class\n?\n defineMyClass( byte[] b, int off, int len)   \n    {  \n        return super.defineClass(b, off, len);  \n    }  \n\n} \n\n\n\n\n\n\nc. \u7136\u540e\u7f16\u8bd1\u6210Programmer.class\u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5b57\u8282\u7801\uff0c\u7136\u540e\u8f6c\u6362\u6210\u76f8\u5e94\u7684class\u5bf9\u8c61\uff0c\u518d\u5b9e\u4f8b\u5316\uff1a\n\n\n\n\npackage samples;  \n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.net.URL;  \n\npublic class MyTest {  \n\n    public static void main(String[] args) throws IOException {  \n        //\u8bfb\u53d6\u672c\u5730\u7684class\u6587\u4ef6\u5185\u7684\u5b57\u8282\u7801\uff0c\u8f6c\u6362\u6210\u5b57\u8282\u7801\u6570\u7ec4  \n        File file = new File(\n.\n);  \n        InputStream  input = new FileInputStream(file.getCanonicalPath()+\n\\\\bin\\\\samples\\\\Programmer.class\n);  \n        byte[] result = new byte[1024];  \n\n        int count = input.read(result);  \n        // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u7c7b\u52a0\u8f7d\u5668\u5c06 byte\u5b57\u8282\u7801\u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684class\u5bf9\u8c61  \n        MyClassLoader loader = new MyClassLoader();  \n        Class clazz = loader.defineMyClass( result, 0, count);  \n        //\u6d4b\u8bd5\u52a0\u8f7d\u662f\u5426\u6210\u529f\uff0c\u6253\u5370class \u5bf9\u8c61\u7684\u540d\u79f0  \n        System.out.println(clazz.getCanonicalName());  \n\n               //\u5b9e\u4f8b\u5316\u4e00\u4e2aProgrammer\u5bf9\u8c61  \n               Object o= clazz.newInstance();  \n               try {  \n                   //\u8c03\u7528Programmer\u7684code\u65b9\u6cd5  \n                    clazz.getMethod(\ncode\n, null).invoke(o, null);  \n                   } catch (IllegalArgumentException | InvocationTargetException  \n                        | NoSuchMethodException | SecurityException e) {  \n                     e.printStackTrace();  \n                  }  \n }  \n}  \n\n\n\n\n\u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\u4e86\uff0c\u901a\u8fc7\u5b57\u8282\u7801\u52a0\u8f7d\u6210class \u5bf9\u8c61\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u5728\u4ee3\u7801\u4e2d\u5982\u4f55\u751f\u6210class\u6587\u4ef6\u7684\u5b57\u8282\u7801\u3002\n\n\n\u5728\u8fd0\u884c\u671f\u7684\u4ee3\u7801\u4e2d\u751f\u6210\u4e8c\u8fdb\u5236\u5b57\u8282\u7801\n\n\n\u7531\u4e8eJVM\u901a\u8fc7\u5b57\u8282\u7801\u7684\u4e8c\u8fdb\u5236\u4fe1\u606f\u52a0\u8f7d\u7c7b\u7684\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5728\u8fd0\u884c\u671f\u7cfb\u7edf\u4e2d\uff0c\u9075\u5faaJava\u7f16\u8bd1\u7cfb\u7edf\u7ec4\u7ec7.class\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7ed3\u6784\uff0c\u751f\u6210\u76f8\u5e94\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\u52a0\u8f7d\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7c7b\uff0c\u8fd9\u6837\uff0c\u5c31\u5b8c\u6210\u4e86\u5728\u4ee3\u7801\u4e2d\uff0c\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u80fd\u529b\u4e86\u3002\n\n\n\n\u5728\u8fd0\u884c\u65f6\u671f\u53ef\u4ee5\u6309\u7167Java\u865a\u62df\u673a\u89c4\u8303\u5bf9class\u6587\u4ef6\u7684\u7ec4\u7ec7\u89c4\u5219\u751f\u6210\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5b57\u8282\u7801\u3002\u5f53\u524d\u6709\u5f88\u591a\u5f00\u6e90\u6846\u67b6\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e9b\u529f\u80fd\uff0c\u5982ASM\uff0cJavassist\u3002\n\n\nJava\u5b57\u8282\u7801\u751f\u6210\u5f00\u6e90\u6846\u67b6\u4ecb\u7ecd--ASM\uff1a\n\n\nASM \u662f\u4e00\u4e2a Java \u5b57\u8282\u7801\u64cd\u63a7\u6846\u67b6\u3002\u5b83\u80fd\u591f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fee\u6539\u5df2\u6709\u7c7b\u6216\u8005\u52a8\u6001\u751f\u6210\u7c7b\u3002ASM \u53ef\u4ee5\u76f4\u63a5\u4ea7\u751f\u4e8c\u8fdb\u5236 class \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u88ab\u52a0\u8f7d\u5165 Java \u865a\u62df\u673a\u4e4b\u524d\u52a8\u6001\u6539\u53d8\u7c7b\u884c\u4e3a\u3002ASM \u4ece\u7c7b\u6587\u4ef6\u4e2d\u8bfb\u5165\u4fe1\u606f\u540e\uff0c\u80fd\u591f\u6539\u53d8\u7c7b\u884c\u4e3a\uff0c\u5206\u6790\u7c7b\u4fe1\u606f\uff0c\u751a\u81f3\u80fd\u591f\u6839\u636e\u7528\u6237\u8981\u6c42\u751f\u6210\u65b0\u7c7b\u3002\n\n\n\u4e0d\u8fc7ASM\u5728\u521b\u5efaclass\u5b57\u8282\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u7eb5\u7684\u7ea7\u522b\u662f\u5e95\u5c42JVM\u7684\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\uff0c\u8fd9\u8981\u6c42ASM\u4f7f\u7528\u8005\u8981\u5bf9class\u7ec4\u7ec7\u7ed3\u6784\u548cJVM\u6c47\u7f16\u6307\u4ee4\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\n\n\n\u4e0b\u9762\u901a\u8fc7ASM \u751f\u6210\u4e0b\u9762\u7c7bProgrammer\u7684class\u5b57\u8282\u7801\uff1a\n\n\npackage com.samples;  \nimport java.io.PrintStream;  \n\npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println(\nI'm a Programmer,Just Coding.....\n);  \n    }  \n}  \n\n\n\n\n\u4f7f\u7528ASM\u6846\u67b6\u63d0\u4f9b\u4e86ClassWriter \u63a5\u53e3\uff0c\u901a\u8fc7\u8bbf\u95ee\u8005\u6a21\u5f0f\u8fdb\u884c\u52a8\u6001\u521b\u5efaclass\u5b57\u8282\u7801\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n\npackage samples;  \n\nimport java.io.File;  \nimport java.io.FileOutputStream;  \nimport java.io.IOException;  \n\nimport org.objectweb.asm.ClassWriter;  \nimport org.objectweb.asm.MethodVisitor;  \nimport org.objectweb.asm.Opcodes;  \npublic class MyGenerator {  \n\n    public static void main(String[] args) throws IOException {  \n\n        System.out.println();  \n        ClassWriter classWriter = new ClassWriter(0);  \n        // \u901a\u8fc7visit\u65b9\u6cd5\u786e\u5b9a\u7c7b\u7684\u5934\u90e8\u4fe1\u606f  \n        classWriter.visit(Opcodes.V1_7,// java\u7248\u672c  \n                Opcodes.ACC_PUBLIC,// \u7c7b\u4fee\u9970\u7b26  \n                \nProgrammer\n, // \u7c7b\u7684\u5168\u9650\u5b9a\u540d  \n                null, \njava/lang/Object\n, null);  \n\n        //\u521b\u5efa\u6784\u9020\u51fd\u6570  \n        MethodVisitor mv = classWriter.visitMethod(Opcodes.ACC_PUBLIC, \ninit\n, \n()V\n, null, null);  \n        mv.visitCode();  \n        mv.visitVarInsn(Opcodes.ALOAD, 0);  \n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, \njava/lang/Object\n, \ninit\n,\n()V\n);  \n        mv.visitInsn(Opcodes.RETURN);  \n        mv.visitMaxs(1, 1);  \n        mv.visitEnd();  \n\n        // \u5b9a\u4e49code\u65b9\u6cd5  \n        MethodVisitor methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, \ncode\n, \n()V\n,  \n                null, null);  \n        methodVisitor.visitCode();  \n        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, \njava/lang/System\n, \nout\n,  \n                \nLjava/io/PrintStream;\n);  \n        methodVisitor.visitLdcInsn(\nI'm a Programmer,Just Coding.....\n);  \n        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \njava/io/PrintStream\n, \nprintln\n,  \n                \n(Ljava/lang/String;)V\n);  \n        methodVisitor.visitInsn(Opcodes.RETURN);  \n        methodVisitor.visitMaxs(2, 2);  \n        methodVisitor.visitEnd();  \n        classWriter.visitEnd();   \n        // \u4f7fclassWriter\u7c7b\u5df2\u7ecf\u5b8c\u6210  \n        // \u5c06classWriter\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\u5199\u5230\u6587\u4ef6\u91cc\u9762\u53bb  \n        byte[] data = classWriter.toByteArray();  \n        File file = new File(\nD://Programmer.class\n);  \n        FileOutputStream fout = new FileOutputStream(file);  \n        fout.write(data);  \n        fout.close();  \n    }  \n} \n\n\n\n\n\u4e0a\u8ff0\u7684\u4ee3\u7801\u6267\u884c\u8fc7\u540e\uff0c\u7528Java\u53cd\u7f16\u8bd1\u5de5\u5177\uff08\u5982JD_GUI\uff09\u6253\u5f00D\u76d8\u4e0b\u751f\u6210\u7684Programmer.class\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n\n\u518d\u7528\u4e0a\u9762\u6211\u4eec\u5b9a\u4e49\u7684\u7c7b\u52a0\u8f7d\u5668\u5c06\u8fd9\u4e2aclass\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e \u521b\u5efaclass\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8c03\u7528code\u65b9\u6cd5\uff0c\u4f1a\u770b\u5230\u4e0b\u9762\u7684\u7ed3\u679c\uff1a\n\n\n\n\u4ee5\u4e0a\u8868\u660e\uff1a\u5728\u4ee3\u7801\u91cc\u751f\u6210\u5b57\u8282\u7801\uff0c\u5e76\u52a8\u6001\u5730\u52a0\u8f7d\u6210class\u5bf9\u8c61\u3001\u521b\u5efa\u5b9e\u4f8b\u662f\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002\n\n\nJava\u5b57\u8282\u7801\u751f\u6210\u5f00\u6e90\u6846\u67b6\u4ecb\u7ecd--Javassist\uff1a\n\n\nJavassist\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u6790\u3001\u7f16\u8f91\u548c\u521b\u5efaJava\u5b57\u8282\u7801\u7684\u7c7b\u5e93\u3002\u662f\u7531\u4e1c\u4eac\u5de5\u4e1a\u5927\u5b66\u7684\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u7684 Shigeru Chiba \uff08\u5343\u53f6 \u6ecb\uff09\u6240\u521b\u5efa\u7684\u3002\u5b83\u5df2\u52a0\u5165\u4e86\u5f00\u653e\u6e90\u4ee3\u7801JBoss \u5e94\u7528\u670d\u52a1\u5668\u9879\u76ee,\u901a\u8fc7\u4f7f\u7528Javassist\u5bf9\u5b57\u8282\u7801\u64cd\u4f5c\u4e3aJBoss\u5b9e\u73b0\u52a8\u6001AOP\u6846\u67b6\u3002javassist\u662fjboss\u7684\u4e00\u4e2a\u5b50\u9879\u76ee\uff0c\u5176\u4e3b\u8981\u7684\u4f18\u70b9\uff0c\u5728\u4e8e\u7b80\u5355\uff0c\u800c\u4e14\u5feb\u901f\u3002\u76f4\u63a5\u4f7f\u7528java\u7f16\u7801\u7684\u5f62\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u865a\u62df\u673a\u6307\u4ee4\uff0c\u5c31\u80fd\u52a8\u6001\u6539\u53d8\u7c7b\u7684\u7ed3\u6784\uff0c\u6216\u8005\u52a8\u6001\u751f\u6210\u7c7b\u3002\n\n\n\u4e0b\u9762\u901a\u8fc7Javassist\u521b\u5efa\u4e0a\u8ff0\u7684Programmer\u7c7b\uff1a\n\n\nimport javassist.ClassPool;  \nimport javassist.CtClass;  \nimport javassist.CtMethod;  \nimport javassist.CtNewMethod;  \n\npublic class MyGenerator {  \n\n    public static void main(String[] args) throws Exception {  \n        ClassPool pool = ClassPool.getDefault();  \n        //\u521b\u5efaProgrammer\u7c7b       \n        CtClass cc= pool.makeClass(\ncom.samples.Programmer\n);  \n        //\u5b9a\u4e49code\u65b9\u6cd5  \n        CtMethod method = CtNewMethod.make(\npublic void code(){}\n, cc);  \n        //\u63d2\u5165\u65b9\u6cd5\u4ee3\u7801  \n        method.insertBefore(\nSystem.out.println(\\\nI'm a Programmer,Just Coding.....\\\n);\n);  \n        cc.addMethod(method);  \n        //\u4fdd\u5b58\u751f\u6210\u7684\u5b57\u8282\u7801  \n        cc.writeFile(\nd://temp\n);  \n    }  \n}  \n\n\n\n\n\u901a\u8fc7JD-gui\u53cd\u7f16\u8bd1\u5de5\u5177\u6253\u5f00Programmer.class \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n\n\n\u4ee3\u7406\u7684\u57fa\u672c\u6784\u6210\uff1a\n\n\n\u4ee3\u7406\u6a21\u5f0f\u4e0a\uff0c\u57fa\u672c\u4e0a\u6709Subject\u89d2\u8272\uff0cRealSubject\u89d2\u8272\uff0cProxy\u89d2\u8272\u3002\u5176\u4e2d\uff1aSubject\u89d2\u8272\u8d1f\u8d23\u5b9a\u4e49RealSubject\u548cProxy\u89d2\u8272\u5e94\u8be5\u5b9e\u73b0\u7684\u63a5\u53e3\uff1bRealSubject\u89d2\u8272\u7528\u6765\u771f\u6b63\u5b8c\u6210\u4e1a\u52a1\u670d\u52a1\u529f\u80fd\uff1bProxy\u89d2\u8272\u8d1f\u8d23\u5c06\u81ea\u8eab\u7684Request\u8bf7\u6c42\uff0c\u8c03\u7528realsubject \u5bf9\u5e94\u7684request\u529f\u80fd\u6765\u5b9e\u73b0\u4e1a\u52a1\u529f\u80fd\uff0c\u81ea\u5df1\u4e0d\u771f\u6b63\u505a\u4e1a\u52a1\u3002\n\n\n\n\u4e0a\u9762\u7684\u8fd9\u5e45\u4ee3\u7406\u7ed3\u6784\u56fe\u662f\u5178\u578b\u7684\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\uff1a\n\n\n\u5f53\u5728\u4ee3\u7801\u9636\u6bb5\u89c4\u5b9a\u8fd9\u79cd\u4ee3\u7406\u5173\u7cfb\uff0cProxy\u7c7b\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210class\u6587\u4ef6\uff0c\u5f53\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u6b64class\u5df2\u7ecf\u5b58\u5728\u4e86\u3002\u8fd9\u79cd\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\u56fa\u7136\u5728\u8bbf\u95ee\u65e0\u6cd5\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u589e\u5f3a\u73b0\u6709\u7684\u63a5\u53e3\u4e1a\u52a1\u529f\u80fd\u65b9\u9762\u6709\u5f88\u5927\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u5927\u91cf\u4f7f\u7528\u8fd9\u79cd\u9759\u6001\u4ee3\u7406\uff0c\u4f1a\u4f7f\u6211\u4eec\u7cfb\u7edf\u5185\u7684\u7c7b\u7684\u89c4\u6a21\u589e\u5927\uff0c\u5e76\u4e14\u4e0d\u6613\u7ef4\u62a4\uff1b\u5e76\u4e14\u7531\u4e8eProxy\u548cRealSubject\u7684\u529f\u80fd \u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\uff0cProxy\u53ea\u662f\u8d77\u5230\u4e86\u4e2d\u4ecb\u7684\u4f5c\u7528\uff0c\u8fd9\u79cd\u4ee3\u7406\u5728\u7cfb\u7edf\u4e2d\u7684\u5b58\u5728\uff0c\u5bfc\u81f4\u7cfb\u7edf\u7ed3\u6784\u6bd4\u8f83\u81c3\u80bf\u548c\u677e\u6563\u3002\n\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u6709\u4e86\u52a8\u6001\u5730\u521b\u5efaProxy\u7684\u60f3\u6cd5\uff1a\u5728\u8fd0\u884c\u72b6\u6001\u4e2d\uff0c\u9700\u8981\u4ee3\u7406\u7684\u5730\u65b9\uff0c\u6839\u636eSubject \u548cRealSubject\uff0c\u52a8\u6001\u5730\u521b\u5efa\u4e00\u4e2aProxy\uff0c\u7528\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u9500\u6bc1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e86Proxy \u89d2\u8272\u7684class\u5728\u7cfb\u7edf\u4e2d\u5197\u6742\u7684\u95ee\u9898\u4e86\u3002\n\n\n\u4e0b\u9762\u4ee5\u4e00\u4e2a\u4ee3\u7406\u6a21\u5f0f\u5b9e\u4f8b\u9610\u8ff0\u8fd9\u4e00\u95ee\u9898\uff1a\n\n\n\u5c06\u8f66\u7ad9\u7684\u552e\u7968\u670d\u52a1\u62bd\u8c61\u51fa\u4e00\u4e2a\u63a5\u53e3TicketService,\u5305\u542b\u95ee\u8be2\uff0c\u5356\u7968\uff0c\u9000\u7968\u529f\u80fd\uff0c\u8f66\u7ad9\u7c7bStation\u5b9e\u73b0\u4e86TicketService\u63a5\u53e3\uff0c\u8f66\u7968\u4ee3\u552e\u70b9StationProxy\u5219\u5b9e\u73b0\u4e86\u4ee3\u7406\u89d2\u8272\u7684\u529f\u80fd\uff0c\u7c7b\u56fe\u5982\u4e0b\u6240\u793a\u3002\n\n\n\n\u5bf9\u5e94\u7684\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\n\npackage com.foo.proxy;  \n\n/** \n * \u552e\u7968\u670d\u52a1\u63a5\u53e3\u5b9e\u73b0\u7c7b\uff0c\u8f66\u7ad9 \n * @author louluan \n */  \npublic class Station implements TicketService {  \n\n    @Override  \n    public void sellTicket() {  \n        System.out.println(\n\\n\\t\u552e\u7968.....\\n\n);  \n    }  \n\n    @Override  \n    public void inquire() {  \n        System.out.println(\n\\n\\t\u95ee\u8be2\u3002\u3002\u3002\u3002\\n\n);  \n    }  \n\n    @Override  \n    public void withdraw() {  \n        System.out.println(\n\\n\\t\u9000\u7968......\\n\n);  \n    }  \n\n}  \n\n\n\n\npackage com.foo.proxy;  \n/** \n * \u552e\u7968\u670d\u52a1\u63a5\u53e3  \n * @author louluan \n */  \npublic interface TicketService {  \n\n    //\u552e\u7968  \n    public void sellTicket();  \n\n    //\u95ee\u8be2  \n    public void inquire();  \n\n    //\u9000\u7968  \n    public void withdraw();  \n\n}  \n\n\n\n\npackage com.foo.proxy;  \n\n/** \n * \u8f66\u7968\u4ee3\u552e\u70b9 \n * @author louluan \n * \n */  \npublic class StationProxy implements TicketService {  \n\n    private Station station;  \n\n    public StationProxy(Station station){  \n        this.station = station;  \n    }  \n\n    @Override  \n    public void sellTicket() {  \n\n        // 1.\u505a\u771f\u6b63\u4e1a\u52a1\u524d\uff0c\u63d0\u793a\u4fe1\u606f  \n        this.showAlertInfo(\n\u00d7\u00d7\u00d7\u00d7\u60a8\u6b63\u5728\u4f7f\u7528\u8f66\u7968\u4ee3\u552e\u70b9\u8fdb\u884c\u8d2d\u7968\uff0c\u6bcf\u5f20\u7968\u5c06\u4f1a\u6536\u53d65\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\n);  \n        // 2.\u8c03\u7528\u771f\u5b9e\u4e1a\u52a1\u903b\u8f91  \n        station.sellTicket();  \n        // 3.\u540e\u5904\u7406  \n        this.takeHandlingFee();  \n        this.showAlertInfo(\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\n\n);  \n\n    }  \n\n    @Override  \n    public void inquire() {  \n        // 1\u505a\u771f\u6b63\u4e1a\u52a1\u524d\uff0c\u63d0\u793a\u4fe1\u606f  \n        this.showAlertInfo(\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u95ee\u8be2\u670d\u52a1\u4e0d\u4f1a\u6536\u53d6\u4efb\u4f55\u8d39\u7528\uff0c\u672c\u95ee\u8be2\u4fe1\u606f\u4ec5\u4f9b\u53c2\u8003\uff0c\u5177\u4f53\u4fe1\u606f\u4ee5\u8f66\u7ad9\u771f\u5b9e\u6570\u636e\u4e3a\u51c6\uff01\u00d7\u00d7\u00d7\u00d7\n);  \n        // 2.\u8c03\u7528\u771f\u5b9e\u903b\u8f91  \n        station.inquire();  \n        // 3\u3002\u540e\u5904\u7406  \n        this.showAlertInfo(\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\n\n);  \n    }  \n\n    @Override  \n    public void withdraw() {  \n        // 1\u3002\u771f\u6b63\u4e1a\u52a1\u524d\u5904\u7406  \n        this.showAlertInfo(\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u9000\u7968\u9664\u4e86\u6263\u9664\u7968\u989d\u768420%\u5916\uff0c\u672c\u4ee3\u7406\u5904\u989d\u5916\u52a0\u65362\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\n);  \n        // 2.\u8c03\u7528\u771f\u6b63\u4e1a\u52a1\u903b\u8f91  \n        station.withdraw();  \n        // 3.\u540e\u5904\u7406  \n        this.takeHandlingFee();  \n\n    }  \n\n    /* \n     * \u5c55\u793a\u989d\u5916\u4fe1\u606f \n     */  \n    private void showAlertInfo(String info) {  \n        System.out.println(info);  \n    }  \n\n    /* \n     * \u6536\u53d6\u624b\u7eed\u8d39 \n     */  \n    private void takeHandlingFee() {  \n        System.out.println(\n\u6536\u53d6\u624b\u7eed\u8d39\uff0c\u6253\u5370\u53d1\u7968\u3002\u3002\u3002\u3002\u3002\\n\n);  \n    }  \n\n}  \n\n\n\n\n\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u4e0d\u5e0c\u671b\u9759\u6001\u5730\u6709StationProxy\u7c7b\u5b58\u5728\uff0c\u5e0c\u671b\u5728\u4ee3\u7801\u4e2d\uff0c\u52a8\u6001\u751f\u6210\u5668\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u52a0\u8f7d\u8fdb\u6765\u3002\u4e3a\u6b64\uff0c\u4f7f\u7528Javassist\u5f00\u6e90\u6846\u67b6\uff0c\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u5730\u751f\u6210StationProxy\u7684\u5b57\u8282\u7801\uff1a\n\n\npackage com.foo.proxy;  \n\n\nimport java.lang.reflect.Constructor;  \n\nimport javassist.*;  \npublic class Test {  \n\n    public static void main(String[] args) throws Exception {  \n       createProxy();  \n    }  \n\n    /* \n     * \u624b\u52a8\u521b\u5efa\u5b57\u8282\u7801 \n     */  \n    private static void createProxy() throws Exception  \n    {  \n        ClassPool pool = ClassPool.getDefault();  \n\n        CtClass cc = pool.makeClass(\ncom.foo.proxy.StationProxy\n);  \n\n        //\u8bbe\u7f6e\u63a5\u53e3  \n        CtClass interface1 = pool.get(\ncom.foo.proxy.TicketService\n);  \n        cc.setInterfaces(new CtClass[]{interface1});  \n\n        //\u8bbe\u7f6eField  \n        CtField field = CtField.make(\nprivate com.foo.proxy.Station station;\n, cc);  \n\n        cc.addField(field);  \n\n        CtClass stationClass = pool.get(\ncom.foo.proxy.Station\n);  \n        CtClass[] arrays = new CtClass[]{stationClass};  \n        CtConstructor ctc = CtNewConstructor.make(arrays,null,CtNewConstructor.PASS_NONE,null,null, cc);  \n        //\u8bbe\u7f6e\u6784\u9020\u51fd\u6570\u5185\u90e8\u4fe1\u606f  \n        ctc.setBody(\n{this.station=$1;}\n);  \n        cc.addConstructor(ctc);  \n\n        //\u521b\u5efa\u6536\u53d6\u624b\u7eed takeHandlingFee\u65b9\u6cd5  \n        CtMethod takeHandlingFee = CtMethod.make(\nprivate void takeHandlingFee() {}\n, cc);  \n        takeHandlingFee.setBody(\nSystem.out.println(\\\n\u6536\u53d6\u624b\u7eed\u8d39\uff0c\u6253\u5370\u53d1\u7968\u3002\u3002\u3002\u3002\u3002\\\n);\n);  \n        cc.addMethod(takeHandlingFee);  \n\n        //\u521b\u5efashowAlertInfo \u65b9\u6cd5  \n        CtMethod showInfo = CtMethod.make(\nprivate void showAlertInfo(String info) {}\n, cc);  \n        showInfo.setBody(\nSystem.out.println($1);\n);  \n        cc.addMethod(showInfo);  \n\n        //sellTicket  \n        CtMethod sellTicket = CtMethod.make(\npublic void sellTicket(){}\n, cc);  \n        sellTicket.setBody(\n{this.showAlertInfo(\\\n\u00d7\u00d7\u00d7\u00d7\u60a8\u6b63\u5728\u4f7f\u7528\u8f66\u7968\u4ee3\u552e\u70b9\u8fdb\u884c\u8d2d\u7968\uff0c\u6bcf\u5f20\u7968\u5c06\u4f1a\u6536\u53d65\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\\\n);\n  \n                + \nstation.sellTicket();\n  \n                + \nthis.takeHandlingFee();\n  \n                + \nthis.showAlertInfo(\\\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\\n);}\n);  \n        cc.addMethod(sellTicket);  \n\n        //\u6dfb\u52a0inquire\u65b9\u6cd5  \n        CtMethod inquire = CtMethod.make(\npublic void inquire() {}\n, cc);  \n        inquire.setBody(\n{this.showAlertInfo(\\\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u95ee\u8be2\u670d\u52a1\u4e0d\u4f1a\u6536\u53d6\u4efb\u4f55\u8d39\u7528\uff0c\u672c\u95ee\u8be2\u4fe1\u606f\u4ec5\u4f9b\u53c2\u8003\uff0c\u5177\u4f53\u4fe1\u606f\u4ee5\u8f66\u7ad9\u771f\u5b9e\u6570\u636e\u4e3a\u51c6\uff01\u00d7\u00d7\u00d7\u00d7\\\n);\n  \n        + \nstation.inquire();\n  \n        + \nthis.showAlertInfo(\\\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\\n);}\n  \n        );  \n        cc.addMethod(inquire);  \n\n        //\u6dfb\u52a0widthraw\u65b9\u6cd5  \n        CtMethod withdraw = CtMethod.make(\npublic void withdraw() {}\n, cc);  \n        withdraw.setBody(\n{this.showAlertInfo(\\\n\u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u9000\u7968\u9664\u4e86\u6263\u9664\u7968\u989d\u768420%\u5916\uff0c\u672c\u4ee3\u7406\u5904\u989d\u5916\u52a0\u65362\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\\\n);\n  \n                + \nstation.withdraw();\n  \n                + \nthis.takeHandlingFee();}\n  \n                );  \n        cc.addMethod(withdraw);  \n\n        //\u83b7\u53d6\u52a8\u6001\u751f\u6210\u7684class  \n        Class c = cc.toClass();  \n        //\u83b7\u53d6\u6784\u9020\u5668  \n        Constructor constructor= c.getConstructor(Station.class);  \n        //\u901a\u8fc7\u6784\u9020\u5668\u5b9e\u4f8b\u5316  \n        TicketService o = (TicketService)constructor.newInstance(new Station());  \n        o.inquire();  \n\n        cc.writeFile(\nD://test\n);  \n    }  \n\n} \n\n\n\n\n\u4e0a\u8ff0\u4ee3\u7801\u6267\u884c\u8fc7\u540e\uff0c\u4f1a\u4ea7\u751fStationProxy\u7684\u5b57\u8282\u7801\uff0c\u5e76\u4e14\u7528\u751f\u6210\u5b57\u8282\u7801\u52a0\u8f7d\u5982\u5185\u5b58\u521b\u5efa\u5bf9\u8c61\uff0c\u8c03\u7528inquire()\u65b9\u6cd5\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a\n\n\n\n\u901a\u8fc7\u4e0a\u9762\u52a8\u6001\u751f\u6210\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u73b0\u76f8\u5f53\u5730\u9ebb\u70e6\u5728\u521b\u9020\u7684\u8fc7\u7a0b\u4e2d\uff0c\u542b\u6709\u592a\u591a\u7684\u4e1a\u52a1\u4ee3\u7801\u3002\u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efaProxy\u4ee3\u7406\u7c7b\u7684\u65b9\u5f0f\u7684\u521d\u8877\u662f\u51cf\u5c11\u7cfb\u7edf\u4ee3\u7801\u7684\u5197\u6742\u5ea6\uff0c\u4f46\u662f\u4e0a\u8ff0\u505a\u6cd5\u5374\u589e\u52a0\u4e86\u5728\u52a8\u6001\u521b\u5efa\u4ee3\u7406\u7c7b\u8fc7\u7a0b\u4e2d\u7684\u590d\u6742\u5ea6\uff1a\u624b\u52a8\u5730\u521b\u5efa\u4e86\u592a\u591a\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u5e76\u4e14\u5c01\u88c5\u6027\u4e5f\u4e0d\u591f\uff0c\u5b8c\u5168\u4e0d\u5177\u6709\u53ef\u62d3\u5c55\u6027\u548c\u901a\u7528\u6027\u3002\u5982\u679c\u67d0\u4e2a\u4ee3\u7406\u7c7b\u7684\u4e00\u4e9b\u4e1a\u52a1\u903b\u8f91\u975e\u5e38\u590d\u6742\uff0c\u4e0a\u8ff0\u7684\u52a8\u6001\u521b\u5efa\u4ee3\u7406\u7684\u65b9\u5f0f\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\uff01\n\n\nInvocationHandler\u89d2\u8272\u7684\u7531\u6765\n\n\n\u4ed4\u7ec6\u601d\u8003\u4ee3\u7406\u6a21\u5f0f\u4e2d\u7684\u4ee3\u7406Proxy\u89d2\u8272\u3002Proxy\u89d2\u8272\u5728\u6267\u884c\u4ee3\u7406\u4e1a\u52a1\u7684\u65f6\u5019\uff0c\u65e0\u975e\u662f\u5728\u8c03\u7528\u771f\u6b63\u4e1a\u52a1\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u505a\u4e00\u4e9b\u201c\u989d\u5916\u201d\u4e1a\u52a1\u3002\n\n\n\n\u6709\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u4ee3\u7406\u7c7b\u5904\u7406\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff1a\u5728\u8c03\u7528\u67d0\u4e2a\u65b9\u6cd5\u524d\u53ca\u65b9\u6cd5\u540e\u505a\u4e00\u4e9b\u989d\u5916\u7684\u4e1a\u52a1\u3002\u6362\u4e00\u79cd\u601d\u8def\u5c31\u662f\uff1a\u5728\u89e6\u53d1\uff08invoke\uff09\u771f\u5b9e\u89d2\u8272\u7684\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u505a\u4e00\u4e9b\u989d\u5916\u7684\u4e1a\u52a1\u3002\u90a3\u4e48\uff0c\u4e3a\u4e86\u6784\u9020\u51fa\u5177\u6709\u901a\u7528\u6027\u548c\u7b80\u5355\u6027\u7684\u4ee3\u7406\u7c7b\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u89e6\u53d1\u771f\u5b9e\u89d2\u8272\u52a8\u4f5c\u4ea4\u7ed9\u4e00\u4e2a\u89e6\u53d1\u7684\u7ba1\u7406\u5668\uff0c\u8ba9\u8fd9\u4e2a\u7ba1\u7406\u5668\u7edf\u4e00\u5730\u7ba1\u7406\u89e6\u53d1\u3002\u8fd9\u79cd\u7ba1\u7406\u5668\u5c31\u662fInvocation Handler\u3002\n\n\n\u52a8\u6001\u4ee3\u7406\u6a21\u5f0f\u7684\u7ed3\u6784\u8ddf\u4e0a\u9762\u7684\u9759\u6001\u4ee3\u7406\u6a21\u5f0f\u7a0d\u5fae\u6709\u6240\u4e0d\u540c\uff0c\u591a\u5f15\u5165\u4e86\u4e00\u4e2aInvocationHandler\u89d2\u8272\u3002\n\n\n\u5148\u89e3\u91ca\u4e00\u4e0bInvocationHandler\u7684\u4f5c\u7528\uff1a\n\n\n\u5728\u9759\u6001\u4ee3\u7406\u4e2d\uff0c\u4ee3\u7406Proxy\u4e2d\u7684\u65b9\u6cd5\uff0c\u90fd\u6307\u5b9a\u4e86\u8c03\u7528\u4e86\u7279\u5b9a\u7684realSubject\u4e2d\u7684\u5bf9\u5e94\u7684\u65b9\u6cd5\uff1a\n\n\n\u5728\u4e0a\u9762\u7684\u9759\u6001\u4ee3\u7406\u6a21\u5f0f\u4e0b\uff0cProxy\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u65e0\u975e\u662f\u8c03\u7528\u5728\u4e0d\u540c\u7684request\u65f6\uff0c\u8c03\u7528\u89e6\u53d1realSubject\u5bf9\u5e94\u7684\u65b9\u6cd5\uff1b\u66f4\u62bd\u8c61\u70b9\u770b\uff0cProxy\u6240\u4f5c\u7684\u4e8b\u60c5\uff1b\u5728Java\u4e2d \u65b9\u6cd5\uff08Method\uff09\u4e5f\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u6765\u770b\u5f85\u4e86\uff0c\u52a8\u6001\u4ee3\u7406\u5de5\u4f5c\u7684\u57fa\u672c\u6a21\u5f0f\u5c31\u662f\u5c06\u81ea\u5df1\u7684\u65b9\u6cd5\u529f\u80fd\u7684\u5b9e\u73b0\u4ea4\u7ed9 InvocationHandler\u89d2\u8272\uff0c\u5916\u754c\u5bf9Proxy\u89d2\u8272\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u7684\u8c03\u7528\uff0cProxy\u89d2\u8272\u90fd\u4f1a\u4ea4\u7ed9InvocationHandler\u6765\u5904\u7406\uff0c\u800cInvocationHandler\u5219\u8c03\u7528\u5177\u4f53\u5bf9\u8c61\u89d2\u8272\u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e4b\u4e2d\uff1a\u4ee3\u7406Proxy \u548cRealSubject \u5e94\u8be5\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u8fd9\u4e00\u70b9\u76f8\u5f53\u91cd\u8981\u3002\uff08\u6211\u8fd9\u91cc\u8bf4\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u67d0\u4e2a\u7c7b\u7684public\u65b9\u6cd5\uff09\n\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u4e4b\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ea6\u5b9aProxy \u548cRealSubject\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\n\n\n\n\na.\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u529f\u80fd\u63a5\u53e3\uff0c\u7136\u540e\u8ba9Proxy \u548cRealSubject\u6765\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u3002\n\n\nb.\u8fd8\u6709\u6bd4\u8f83\u9690\u6666\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u901a\u8fc7\u7ee7\u627f\u3002\u56e0\u4e3a\u5982\u679cProxy \u7ee7\u627f\u81eaRealSubject\uff0c\u8fd9\u6837Proxy\u5219\u62e5\u6709\u4e86RealSubject\u7684\u529f\u80fd\uff0cProxy\u8fd8\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199RealSubject\u4e2d\u7684\u65b9\u6cd5\uff0c\u6765\u5b9e\u73b0\u591a\u6001\u3002\n\n\n\n\n\u5176\u4e2dJDK\u4e2d\u63d0\u4f9b\u7684\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7684\u673a\u5236\uff0c\u662f\u4ee5a \u8fd9\u79cd\u601d\u8def\u8bbe\u8ba1\u7684\uff0c\u800ccglib \u5219\u662f\u4ee5b\u601d\u8def\u8bbe\u8ba1\u7684\u3002\n\n\nJDK\u7684\u52a8\u6001\u4ee3\u7406\u521b\u5efa\u673a\u5236----\u901a\u8fc7\u63a5\u53e3\n\n\n\u6bd4\u5982\u73b0\u5728\u60f3\u4e3aRealSubject\u8fd9\u4e2a\u7c7b\u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u4ee3\u7406\u5bf9\u8c61\uff0cJDK\u4e3b\u8981\u4f1a\u505a\u4ee5\u4e0b\u5de5\u4f5c\uff1a\n\n\n\n\n\n\n\n\n\u83b7\u53d6 RealSubject\u4e0a\u7684\u6240\u6709\u63a5\u53e3\u5217\u8868\uff1b\n\n\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u8981\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u7684\u7c7b\u540d\uff0c\u9ed8\u8ba4\u4e3a\uff1acom.sun.proxy.$ProxyXXXX \uff1b\n\n\n\n\n\n\n\n\n\n\n\u6839\u636e\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\u4fe1\u606f\uff0c\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u521b\u5efa \u8be5Proxy\u7c7b\u7684\u5b57\u8282\u7801\uff1b\n\n\n\n\n\n\n4 .  \u5c06\u5bf9\u5e94\u7684\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684class \u5bf9\u8c61\uff1b\n\n\n\n\n\n\n\u521b\u5efaInvocationHandler \u5b9e\u4f8bhandler\uff0c\u7528\u6765\u5904\u7406Proxy\u6240\u6709\u65b9\u6cd5\u8c03\u7528\uff1b\n\n\n\n\n\n\n\n\n\n\nProxy \u7684class\u5bf9\u8c61 \u4ee5\u521b\u5efa\u7684handler\u5bf9\u8c61\u4e3a\u53c2\u6570\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2aproxy\u5bf9\u8c61\n\n\n\n\n\n\n\n\nJDK\u901a\u8fc7 java.lang.reflect.Proxy\u5305\u6765\u652f\u6301\u52a8\u6001\u4ee3\u7406\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684newProxyInstance\u65b9\u6cd5\n\n\n\n\u800c\u5bf9\u4e8eInvocationHandler\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e0b\u5217\u7684invoke\u65b9\u6cd5\uff1a\n\n\n\u5728\u8c03\u7528\u4ee3\u7406\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5728\u4ee3\u7801\u5185\u90e8\uff0c\u90fd\u662f\u76f4\u63a5\u8c03\u7528\u4e86InvocationHandler \u7684invoke\u65b9\u6cd5\uff0c\u800cinvoke\u65b9\u6cd5\u6839\u636e\u4ee3\u7406\u7c7b\u4f20\u9012\u7ed9\u81ea\u5df1\u7684method\u53c2\u6570\u6765\u533a\u5206\u662f\u4ec0\u4e48\u65b9\u6cd5\u3002\n\n\n\n\n\u8bb2\u7684\u6709\u70b9\u62bd\u8c61\uff0c\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6765\u6f14\u793a\u4e00\u4e0b\u5427\uff1a\n\n\nJDK\u52a8\u6001\u4ee3\u7406\u793a\u4f8b\n\n\n\u73b0\u5728\u5b9a\u4e49\u4e24\u4e2a\u63a5\u53e3Vehicle\u548cRechargable\uff0cVehicle\u8868\u793a\u4ea4\u901a\u5de5\u5177\u7c7b\uff0c\u6709drive()\u65b9\u6cd5\uff1bRechargable\u63a5\u53e3\u8868\u793a\u53ef\u5145\u7535\u7684\uff08\u5de5\u5177\uff09\uff0c\u6709recharge() \u65b9\u6cd5\uff1b\n\n\n\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u7684\u7c7bElectricCar\uff0c\u7c7b\u56fe\u5982\u4e0b\uff1a\n \n\n\n\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u6765\u4e3aElectricCar\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7c7b\uff1a\n ```\n package com.foo.proxy;  \n\n\nimport java.lang.reflect.InvocationHandler;\n\nimport java.lang.reflect.Proxy;  \n\n\npublic class Test {  \n\n\npublic static void main(String[] args) {\n\n    ElectricCar car = new ElectricCar();  \n    // 1.\u83b7\u53d6\u5bf9\u5e94\u7684ClassLoader  \n    ClassLoader classLoader = car.getClass().getClassLoader();\n\n    // 2.\u83b7\u53d6ElectricCar \u6240\u5b9e\u73b0\u7684\u6240\u6709\u63a5\u53e3  \n    Class[] interfaces = car.getClass().getInterfaces();  \n    // 3.\u8bbe\u7f6e\u4e00\u4e2a\u6765\u81ea\u4ee3\u7406\u4f20\u8fc7\u6765\u7684\u65b9\u6cd5\u8c03\u7528\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u5904\u7406\u6240\u6709\u7684\u4ee3\u7406\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u8c03\u7528  \n    InvocationHandler handler = new InvocationHandlerImpl(car);  \n    /* \n      4.\u6839\u636e\u4e0a\u9762\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c  \n                     a.JDK\u4f1a\u901a\u8fc7\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u4fe1\u606f\u52a8\u6001\u5730\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u548c.class \u6587\u4ef6\u7b49\u540c\u7684\u5b57\u8282\u7801 \n             b.\u7136\u540e\u6839\u636e\u76f8\u5e94\u7684\u5b57\u8282\u7801\u8f6c\u6362\u6210\u5bf9\u5e94\u7684class\uff0c  \n                     c.\u7136\u540e\u8c03\u7528newInstance()\u521b\u5efa\u5b9e\u4f8b \n     */  \n    Object o = Proxy.newProxyInstance(classLoader, interfaces, handler);  \n    Vehicle vehicle = (Vehicle) o;  \n    vehicle.drive();  \n    Rechargable rechargeable = (Rechargable) o;  \n    rechargeable.recharge();  \n}\n\n\n\n}\n\n ```\n\n\npackage com.foo.proxy;  \n/** \n * \u4ea4\u901a\u5de5\u5177\u63a5\u53e3 \n * @author louluan \n */  \npublic interface Vehicle {  \n    public void drive();  \n} \n\n\n\n\npackage com.foo.proxy;  \n/** \n * \u53ef\u5145\u7535\u8bbe\u5907\u63a5\u53e3 \n * @author louluan \n */  \npublic interface Rechargable {  \n\n    public void recharge();  \n}  \n\n\n\n\npackage com.foo.proxy;  \n/** \n * \u7535\u80fd\u8f66\u7c7b\uff0c\u5b9e\u73b0Rechargable\uff0cVehicle\u63a5\u53e3 \n * @author louluan \n */  \npublic class ElectricCar implements Rechargable, Vehicle {  \n\n    @Override  \n    public void drive() {  \n        System.out.println(\nElectric Car is Moving silently...\n);  \n    }  \n\n    @Override  \n    public void recharge() {  \n        System.out.println(\nElectric Car is Recharging...\n);  \n    }  \n\n}  \n\n\n\n\npackage com.foo.proxy;  \n\nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Method;  \n\npublic class InvocationHandlerImpl implements InvocationHandler {  \n\n    private ElectricCar car;  \n\n    public InvocationHandlerImpl(ElectricCar car)  \n    {  \n        this.car=car;  \n    }  \n\n    @Override  \n    public Object invoke(Object paramObject, Method paramMethod,  \n            Object[] paramArrayOfObject) throws Throwable {  \n        System.out.println(\nYou are going to invoke \n+paramMethod.getName()+\n ...\n);  \n        paramMethod.invoke(car, null);  \n        System.out.println(paramMethod.getName()+\n invocation Has Been finished...\n);  \n        return null;  \n    }  \n\n}  \n\n\n\n\n\u6765\u770b\u4e00\u4e0b\u4ee3\u7801\u6267\u884c\u540e\u7684\u7ed3\u679c\uff1a\n\n\n\n\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u5b57\u8282\u7801\u5e76\u4e14\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff1a\n\n\nJDK\u63d0\u4f9b\u4e86sun.misc.ProxyGenerator.generateProxyClass(String proxyName,class[] interfaces) \u5e95\u5c42\u65b9\u6cd5\u6765\u4ea7\u751f\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u5b57\u8282\u7801\uff1a\n\n\n\u4e0b\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u7528\u6765\u5c06\u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff1a\n\n\npackage com.foo.proxy;  \n\nimport java.io.FileOutputStream;  \nimport java.io.IOException;  \nimport java.lang.reflect.Proxy;  \nimport sun.misc.ProxyGenerator;  \n\npublic class ProxyUtils {  \n\n    /* \n     * \u5c06\u6839\u636e\u7c7b\u4fe1\u606f \u52a8\u6001\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u5b57\u8282\u7801\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff0c \n     * \u9ed8\u8ba4\u7684\u662fclazz\u76ee\u5f55\u4e0b \n         * params :clazz \u9700\u8981\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u7c7b \n         * proxyName : \u4e3a\u52a8\u6001\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u7684\u540d\u79f0 \n         */  \n    public static void generateClassFile(Class clazz,String proxyName)  \n    {  \n        //\u6839\u636e\u7c7b\u4fe1\u606f\u548c\u63d0\u4f9b\u7684\u4ee3\u7406\u7c7b\u540d\u79f0\uff0c\u751f\u6210\u5b57\u8282\u7801  \n                byte[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());   \n        String paths = clazz.getResource(\n.\n).getPath();  \n        System.out.println(paths);  \n        FileOutputStream out = null;    \n\n        try {  \n            //\u4fdd\u7559\u5230\u786c\u76d8\u4e2d  \n            out = new FileOutputStream(paths+proxyName+\n.class\n);    \n            out.write(classFile);    \n            out.flush();    \n        } catch (Exception e) {    \n            e.printStackTrace();    \n        } finally {    \n            try {    \n                out.close();    \n            } catch (IOException e) {    \n                e.printStackTrace();    \n            }    \n        }    \n    }  \n\n}  \n\n\n\n\n\u73b0\u5728\u6211\u4eec\u60f3\u5c06\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u8d77\u540d\u4e3a\u201cElectricCarProxy\u201d\uff0c\u5e76\u4fdd\u5b58\u5728\u786c\u76d8\uff0c\u5e94\u8be5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a\n\n\nProxyUtils.generateClassFile(car.getClass(), \nElectricCarProxy\n);  \n\n\n\n\n\u8fd9\u6837\u5c06\u5728ElectricCar.class \u540c\u7ea7\u76ee\u5f55\u4e0b\u4ea7\u751f ElectricCarProxy.class\u6587\u4ef6\u3002\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u5982jd-gui.exe \u6253\u5f00\uff0c\u5c06\u4f1a\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\nimport com.foo.proxy.Rechargable;  \nimport com.foo.proxy.Vehicle;  \nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Method;  \nimport java.lang.reflect.Proxy;  \nimport java.lang.reflect.UndeclaredThrowableException;  \n/** \n \u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u7ec4\u7ec7\u6a21\u5f0f\u662f\u7ee7\u627fProxy\u7c7b\uff0c\u7136\u540e\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee3\u7406\u7684\u7c7b\u4e0a\u7684\u6240\u6709\u63a5\u53e3\uff0c\u800c\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5219\u662f\u901a\u8fc7\u5c06\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u4ea4\u7ed9\u4e86InvocationHandler\u6765\u5904\u7406 \n*/  \n public final class ElectricCarProxy extends Proxy  \n  implements Rechargable, Vehicle  \n{  \n  private static Method m1;  \n  private static Method m3;  \n  private static Method m4;  \n  private static Method m0;  \n  private static Method m2;  \n\n  public ElectricCarProxy(InvocationHandler paramInvocationHandler)  \n    throws   \n  {  \n    super(paramInvocationHandler);  \n  }  \n\n  public final boolean equals(Object paramObject)  \n    throws   \n  {  \n    try  \n    { // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n      return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue();  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final void recharge()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n      this.h.invoke(this, m3, null);  \n      return;  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final void drive()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n      this.h.invoke(this, m4, null);  \n      return;  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final int hashCode()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n       return ((Integer)this.h.invoke(this, m0, null)).intValue();  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final String toString()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n      return (String)this.h.invoke(this, m2, null);  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  static  \n  {  \n    try  \n    {  //\u4e3a\u6bcf\u4e00\u4e2a\u9700\u8981\u65b9\u6cd5\u5bf9\u8c61\uff0c\u5f53\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u65f6\uff0c\u5206\u522b\u5c06\u65b9\u6cd5\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9InvocationHandler\u5904\u7406  \n      m1 = Class.forName(\njava.lang.Object\n).getMethod(\nequals\n, new Class[] { Class.forName(\njava.lang.Object\n) });  \n      m3 = Class.forName(\ncom.foo.proxy.Rechargable\n).getMethod(\nrecharge\n, new Class[0]);  \n      m4 = Class.forName(\ncom.foo.proxy.Vehicle\n).getMethod(\ndrive\n, new Class[0]);  \n      m0 = Class.forName(\njava.lang.Object\n).getMethod(\nhashCode\n, new Class[0]);  \n      m2 = Class.forName(\njava.lang.Object\n).getMethod(\ntoString\n, new Class[0]);  \n      return;  \n    }  \n    catch (NoSuchMethodException localNoSuchMethodException)  \n    {  \n      throw new NoSuchMethodError(localNoSuchMethodException.getMessage());  \n    }  \n    catch (ClassNotFoundException localClassNotFoundException)  \n    {  \n      throw new NoClassDefFoundError(localClassNotFoundException.getMessage());  \n    }  \n  }  \n} \n\n\n\n\n\u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u770b\u51fa\u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u6709\u4ee5\u4e0b\u7279\u70b9:\n\n 1.\u7ee7\u627f\u81ea java.lang.reflect.Proxy\uff0c\u5b9e\u73b0\u4e86 Rechargable,Vehicle \u8fd9\u4e24\u4e2aElectricCar\u5b9e\u73b0\u7684\u63a5\u53e3\uff1b\n\n 2.\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662ffinal \u7684\uff1b\n* 3.\u6240\u6709\u7684\u65b9\u6cd5\u529f\u80fd\u7684\u5b9e\u73b0\u90fd\u7edf\u4e00\u8c03\u7528\u4e86InvocationHandler\u7684invoke()\u65b9\u6cd5\u3002\n\n\n\n\ncglib \u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u673a\u5236----\u901a\u8fc7\u7c7b\u7ee7\u627f\uff1a\n\n\nJDK\u4e2d\u63d0\u4f9b\u7684\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u673a\u5236\u6709\u4e2a\u9c9c\u660e\u7684\u7279\u70b9\u662f\uff1a \u67d0\u4e2a\u7c7b\u5fc5\u987b\u6709\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c\u800c\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u4e5f\u53ea\u80fd\u4ee3\u7406\u67d0\u4e2a\u7c7b\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a\u5982\u679c\u4e0a\u9762\u4f8b\u5b50\u7684ElectricCar\u5b9e\u73b0\u4e86\u7ee7\u627f\u81ea\u4e24\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u5916\uff0c\u53e6\u5916\u5b9e\u73b0\u4e86\u65b9\u6cd5bee() ,\u5219\u5728\u4ea7\u751f\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u4e2d\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u65b9\u6cd5\u4e86\uff01\u66f4\u6781\u7aef\u7684\u60c5\u51b5\u662f\uff1a\u5982\u679c\u67d0\u4e2a\u7c7b\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u540cJDK\u4ea7\u751f\u52a8\u6001\u4ee3\u7406\u4e86\uff01\n\n\n\u5e78\u597d\u6211\u4eec\u6709cglib\u3002\u201cCGLIB\uff08Code Generation Library\uff09\uff0c\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\uff0c\u9ad8\u6027\u80fd\uff0c\u9ad8\u8d28\u91cf\u7684Code\u751f\u6210\u7c7b\u5e93\uff0c\u5b83\u53ef\u4ee5\u5728\u8fd0\u884c\u671f\u6269\u5c55Java\u7c7b\u4e0e\u5b9e\u73b0Java\u63a5\u53e3\u3002\u201d\ncglib \u521b\u5efa\u67d0\u4e2a\u7c7bA\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u6a21\u5f0f\u662f\uff1a\n\n\n\n\n\n\n\n\n\u67e5\u627eA\u4e0a\u7684\u6240\u6709\u975efinal \u7684public\u7c7b\u578b\u7684\u65b9\u6cd5\u5b9a\u4e49\uff1b\n\n\n\n\n\n\n\n\n\n\n\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5b9a\u4e49\u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1b\n\n\n\n\n\n\n\n\n\n\n\u5c06\u7ec4\u6210\u7684\u5b57\u8282\u7801\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u4ee3\u7406\u7684class\u5bf9\u8c61\uff1b\n\n\n\n\n\n\n\n\n\n\n\u5b9e\u73b0 MethodInterceptor\u63a5\u53e3\uff0c\u7528\u6765\u5904\u7406 \u5bf9\u4ee3\u7406\u7c7b\u4e0a\u6240\u6709\u65b9\u6cd5\u7684\u8bf7\u6c42\uff08\u8fd9\u4e2a\u63a5\u53e3\u548cJDK\u52a8\u6001\u4ee3\u7406InvocationHandler\u7684\u529f\u80fd\u548c\u89d2\u8272\u662f\u4e00\u6837\u7684\uff09\n\n\n\n\n\n\n\n\n\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\uff1a\u5b9a\u4e49\u4e00\u4e2aProgrammer\u7c7b\uff0c\u4e00\u4e2aHacker\u7c7b\n\n\npackage samples;  \n/** \n * \u7a0b\u5e8f\u733f\u7c7b \n * @author louluan \n */  \npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println(\nI'm a Programmer,Just Coding.....\n);  \n    }  \n}  \n\n\n\n\npackage samples;  \n\nimport java.lang.reflect.Method;  \n\nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n/* \n * \u5b9e\u73b0\u4e86\u65b9\u6cd5\u62e6\u622a\u5668\u63a5\u53e3 \n */  \npublic class Hacker implements MethodInterceptor {  \n    @Override  \n    public Object intercept(Object obj, Method method, Object[] args,  \n            MethodProxy proxy) throws Throwable {  \n        System.out.println(\n**** I am a hacker,Let's see what the poor programmer is doing Now...\n);  \n        proxy.invokeSuper(obj, args);  \n        System.out.println(\n****  Oh,what a poor programmer.....\n);  \n        return null;  \n    }  \n\n}  \n\n\n\n\npackage samples;  \n\nimport net.sf.cglib.proxy.Enhancer;  \n\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Programmer progammer = new Programmer();  \n\n        Hacker hacker = new Hacker();  \n        //cglib \u4e2d\u52a0\u5f3a\u5668\uff0c\u7528\u6765\u521b\u5efa\u52a8\u6001\u4ee3\u7406  \n        Enhancer enhancer = new Enhancer();    \n                 //\u8bbe\u7f6e\u8981\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7684\u7c7b  \n        enhancer.setSuperclass(progammer.getClass());    \n               // \u8bbe\u7f6e\u56de\u8c03\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u5bf9\u4e8e\u4ee3\u7406\u7c7b\u4e0a\u6240\u6709\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u90fd\u4f1a\u8c03\u7528CallBack\uff0c\u800cCallback\u5219\u9700\u8981\u5b9e\u884cintercept()\u65b9\u6cd5\u8fdb\u884c\u62e6\u622a  \n                enhancer.setCallback(hacker);  \n                Programmer proxy =(Programmer)enhancer.create();  \n                proxy.code();  \n\n    }  \n}  \n\n\n\n\n\u7a0b\u5e8f\u6267\u884c\u7ed3\u679c\uff1a\n\n\n\n\u8ba9\u6211\u4eec\u770b\u770b\u901a\u8fc7cglib\u751f\u6210\u7684class\u6587\u4ef6\u5185\u5bb9\uff1a\n\n\npackage samples;  \n\nimport java.lang.reflect.Method;  \nimport net.sf.cglib.core.ReflectUtils;  \nimport net.sf.cglib.core.Signature;  \nimport net.sf.cglib.proxy.Callback;  \nimport net.sf.cglib.proxy.Factory;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n\npublic class ProgrammerEnhancerByCGLIBfa7aa2cd extends Programmer  \n  implements Factory  \n{  \n   //......\u7701\u7565  \n  private MethodInterceptor CGLIB$CALLBACK_0;  // Enchaner\u4f20\u5165\u7684methodInterceptor  \n   // ....\u7701\u7565  \n  public final void code()  \n  {  \n    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;  \n    if (tmp4_1 == null)  \n    {  \n      tmp4_1;  \n      CGLIB$BIND_CALLBACKS(this);//\u82e5callback \u4e0d\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528methodInterceptor \u7684intercept()\u65b9\u6cd5  \n    }  \n    if (this.CGLIB$CALLBACK_0 != null)  \n      return;  \n      //\u5982\u679c\u6ca1\u6709\u8bbe\u7f6ecallback\u56de\u8c03\u51fd\u6570\uff0c\u5219\u9ed8\u8ba4\u6267\u884c\u7236\u7c7b\u7684\u65b9\u6cd5  \n      super.code();  \n  }  \n   //....\u540e\u7eed\u7701\u7565  \n}", 
            "title": "\u4ee3\u7406(\u5b57\u8282\u7801)"
        }, 
        {
            "location": "/javassit/#javajdk-cglibjavassistasm", 
            "text": "", 
            "title": "Java\u52a8\u6001\u4ee3\u7406\u673a\u5236\u8be6\u89e3\uff08JDK \u548cCGLIB\uff0cJavassist\uff0cASM\uff09"
        }, 
        {
            "location": "/javassit/#class", 
            "text": "Java\u7f16\u8bd1\u5668\u7f16\u8bd1\u597dJava\u6587\u4ef6\u4e4b\u540e\uff0c\u4ea7\u751f.class \u6587\u4ef6\u5728\u78c1\u76d8\u4e2d\u3002\u8fd9\u79cdclass\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5185\u5bb9\u662f\u53ea\u6709JVM\u865a\u62df\u673a\u80fd\u591f\u8bc6\u522b\u7684\u673a\u5668\u7801\u3002JVM\u865a\u62df\u673a\u8bfb\u53d6\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u53d6\u51fa\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u89e3\u6790.class \u6587\u4ef6\u5185\u7684\u4fe1\u606f\uff0c\u751f\u6210\u5bf9\u5e94\u7684 Class\u5bf9\u8c61:  class\u5b57\u8282\u7801\u6587\u4ef6\u662f\u6839\u636eJVM\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c4\u5b9a\u7684\u5b57\u8282\u7801\u7ec4\u7ec7\u89c4\u5219\u751f\u6210\u7684\u3001\u5177\u4f53class\u6587\u4ef6\u662f\u600e\u6837\u7ec4\u7ec7\u7c7b\u4fe1\u606f\u7684\uff0c\u53ef\u4ee5\u53c2\u8003 \u6b64\u535a\u6587\uff1a\u6df1\u5165\u7406\u89e3Java Class\u6587\u4ef6\u683c\u5f0f\u7cfb\u5217\u3002\u6216\u8005\u662fJava\u865a\u62df\u673a\u89c4\u8303\u3002\n     \u4e0b\u9762\u901a\u8fc7\u4e00\u6bb5\u4ee3\u7801\u6f14\u793a\u624b\u52a8\u52a0\u8f7d class\u6587\u4ef6\u5b57\u8282\u7801\u5230\u7cfb\u7edf\u5185\uff0c\u8f6c\u6362\u6210class\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\uff1a   a. \u5b9a\u4e49\u4e00\u4e2a Programmer\u7c7b\uff1a   package samples;  \n/** \n * \u7a0b\u5e8f\u733f\u7c7b \n * @author louluan \n */  \npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println( I'm a Programmer,Just Coding..... );  \n    }  \n}     b. \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff1a   package samples;  \n/** \n * \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff0c\u7528\u4e8e\u5c06\u5b57\u8282\u7801\u8f6c\u6362\u4e3aclass\u5bf9\u8c61 \n * @author louluan \n */  \npublic class MyClassLoader extends ClassLoader {  \n\n    public Class ?  defineMyClass( byte[] b, int off, int len)   \n    {  \n        return super.defineClass(b, off, len);  \n    }  \n\n}    c. \u7136\u540e\u7f16\u8bd1\u6210Programmer.class\u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5b57\u8282\u7801\uff0c\u7136\u540e\u8f6c\u6362\u6210\u76f8\u5e94\u7684class\u5bf9\u8c61\uff0c\u518d\u5b9e\u4f8b\u5316\uff1a   package samples;  \n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.net.URL;  \n\npublic class MyTest {  \n\n    public static void main(String[] args) throws IOException {  \n        //\u8bfb\u53d6\u672c\u5730\u7684class\u6587\u4ef6\u5185\u7684\u5b57\u8282\u7801\uff0c\u8f6c\u6362\u6210\u5b57\u8282\u7801\u6570\u7ec4  \n        File file = new File( . );  \n        InputStream  input = new FileInputStream(file.getCanonicalPath()+ \\\\bin\\\\samples\\\\Programmer.class );  \n        byte[] result = new byte[1024];  \n\n        int count = input.read(result);  \n        // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u7c7b\u52a0\u8f7d\u5668\u5c06 byte\u5b57\u8282\u7801\u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684class\u5bf9\u8c61  \n        MyClassLoader loader = new MyClassLoader();  \n        Class clazz = loader.defineMyClass( result, 0, count);  \n        //\u6d4b\u8bd5\u52a0\u8f7d\u662f\u5426\u6210\u529f\uff0c\u6253\u5370class \u5bf9\u8c61\u7684\u540d\u79f0  \n        System.out.println(clazz.getCanonicalName());  \n\n               //\u5b9e\u4f8b\u5316\u4e00\u4e2aProgrammer\u5bf9\u8c61  \n               Object o= clazz.newInstance();  \n               try {  \n                   //\u8c03\u7528Programmer\u7684code\u65b9\u6cd5  \n                    clazz.getMethod( code , null).invoke(o, null);  \n                   } catch (IllegalArgumentException | InvocationTargetException  \n                        | NoSuchMethodException | SecurityException e) {  \n                     e.printStackTrace();  \n                  }  \n }  \n}    \u4ee5\u4e0a\u4ee3\u7801\u6f14\u793a\u4e86\uff0c\u901a\u8fc7\u5b57\u8282\u7801\u52a0\u8f7d\u6210class \u5bf9\u8c61\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u5728\u4ee3\u7801\u4e2d\u5982\u4f55\u751f\u6210class\u6587\u4ef6\u7684\u5b57\u8282\u7801\u3002", 
            "title": "class\u6587\u4ef6\u7b80\u4ecb\u53ca\u52a0\u8f7d"
        }, 
        {
            "location": "/javassit/#_1", 
            "text": "\u7531\u4e8eJVM\u901a\u8fc7\u5b57\u8282\u7801\u7684\u4e8c\u8fdb\u5236\u4fe1\u606f\u52a0\u8f7d\u7c7b\u7684\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5728\u8fd0\u884c\u671f\u7cfb\u7edf\u4e2d\uff0c\u9075\u5faaJava\u7f16\u8bd1\u7cfb\u7edf\u7ec4\u7ec7.class\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7ed3\u6784\uff0c\u751f\u6210\u76f8\u5e94\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\u52a0\u8f7d\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7c7b\uff0c\u8fd9\u6837\uff0c\u5c31\u5b8c\u6210\u4e86\u5728\u4ee3\u7801\u4e2d\uff0c\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u80fd\u529b\u4e86\u3002  \u5728\u8fd0\u884c\u65f6\u671f\u53ef\u4ee5\u6309\u7167Java\u865a\u62df\u673a\u89c4\u8303\u5bf9class\u6587\u4ef6\u7684\u7ec4\u7ec7\u89c4\u5219\u751f\u6210\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5b57\u8282\u7801\u3002\u5f53\u524d\u6709\u5f88\u591a\u5f00\u6e90\u6846\u67b6\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e9b\u529f\u80fd\uff0c\u5982ASM\uff0cJavassist\u3002", 
            "title": "\u5728\u8fd0\u884c\u671f\u7684\u4ee3\u7801\u4e2d\u751f\u6210\u4e8c\u8fdb\u5236\u5b57\u8282\u7801"
        }, 
        {
            "location": "/javassit/#java-asm", 
            "text": "ASM \u662f\u4e00\u4e2a Java \u5b57\u8282\u7801\u64cd\u63a7\u6846\u67b6\u3002\u5b83\u80fd\u591f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fee\u6539\u5df2\u6709\u7c7b\u6216\u8005\u52a8\u6001\u751f\u6210\u7c7b\u3002ASM \u53ef\u4ee5\u76f4\u63a5\u4ea7\u751f\u4e8c\u8fdb\u5236 class \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u88ab\u52a0\u8f7d\u5165 Java \u865a\u62df\u673a\u4e4b\u524d\u52a8\u6001\u6539\u53d8\u7c7b\u884c\u4e3a\u3002ASM \u4ece\u7c7b\u6587\u4ef6\u4e2d\u8bfb\u5165\u4fe1\u606f\u540e\uff0c\u80fd\u591f\u6539\u53d8\u7c7b\u884c\u4e3a\uff0c\u5206\u6790\u7c7b\u4fe1\u606f\uff0c\u751a\u81f3\u80fd\u591f\u6839\u636e\u7528\u6237\u8981\u6c42\u751f\u6210\u65b0\u7c7b\u3002  \u4e0d\u8fc7ASM\u5728\u521b\u5efaclass\u5b57\u8282\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u7eb5\u7684\u7ea7\u522b\u662f\u5e95\u5c42JVM\u7684\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\uff0c\u8fd9\u8981\u6c42ASM\u4f7f\u7528\u8005\u8981\u5bf9class\u7ec4\u7ec7\u7ed3\u6784\u548cJVM\u6c47\u7f16\u6307\u4ee4\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002  \u4e0b\u9762\u901a\u8fc7ASM \u751f\u6210\u4e0b\u9762\u7c7bProgrammer\u7684class\u5b57\u8282\u7801\uff1a  package com.samples;  \nimport java.io.PrintStream;  \n\npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println( I'm a Programmer,Just Coding..... );  \n    }  \n}    \u4f7f\u7528ASM\u6846\u67b6\u63d0\u4f9b\u4e86ClassWriter \u63a5\u53e3\uff0c\u901a\u8fc7\u8bbf\u95ee\u8005\u6a21\u5f0f\u8fdb\u884c\u52a8\u6001\u521b\u5efaclass\u5b57\u8282\u7801\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a  package samples;  \n\nimport java.io.File;  \nimport java.io.FileOutputStream;  \nimport java.io.IOException;  \n\nimport org.objectweb.asm.ClassWriter;  \nimport org.objectweb.asm.MethodVisitor;  \nimport org.objectweb.asm.Opcodes;  \npublic class MyGenerator {  \n\n    public static void main(String[] args) throws IOException {  \n\n        System.out.println();  \n        ClassWriter classWriter = new ClassWriter(0);  \n        // \u901a\u8fc7visit\u65b9\u6cd5\u786e\u5b9a\u7c7b\u7684\u5934\u90e8\u4fe1\u606f  \n        classWriter.visit(Opcodes.V1_7,// java\u7248\u672c  \n                Opcodes.ACC_PUBLIC,// \u7c7b\u4fee\u9970\u7b26  \n                 Programmer , // \u7c7b\u7684\u5168\u9650\u5b9a\u540d  \n                null,  java/lang/Object , null);  \n\n        //\u521b\u5efa\u6784\u9020\u51fd\u6570  \n        MethodVisitor mv = classWriter.visitMethod(Opcodes.ACC_PUBLIC,  init ,  ()V , null, null);  \n        mv.visitCode();  \n        mv.visitVarInsn(Opcodes.ALOAD, 0);  \n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL,  java/lang/Object ,  init , ()V );  \n        mv.visitInsn(Opcodes.RETURN);  \n        mv.visitMaxs(1, 1);  \n        mv.visitEnd();  \n\n        // \u5b9a\u4e49code\u65b9\u6cd5  \n        MethodVisitor methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC,  code ,  ()V ,  \n                null, null);  \n        methodVisitor.visitCode();  \n        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,  java/lang/System ,  out ,  \n                 Ljava/io/PrintStream; );  \n        methodVisitor.visitLdcInsn( I'm a Programmer,Just Coding..... );  \n        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,  java/io/PrintStream ,  println ,  \n                 (Ljava/lang/String;)V );  \n        methodVisitor.visitInsn(Opcodes.RETURN);  \n        methodVisitor.visitMaxs(2, 2);  \n        methodVisitor.visitEnd();  \n        classWriter.visitEnd();   \n        // \u4f7fclassWriter\u7c7b\u5df2\u7ecf\u5b8c\u6210  \n        // \u5c06classWriter\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\u5199\u5230\u6587\u4ef6\u91cc\u9762\u53bb  \n        byte[] data = classWriter.toByteArray();  \n        File file = new File( D://Programmer.class );  \n        FileOutputStream fout = new FileOutputStream(file);  \n        fout.write(data);  \n        fout.close();  \n    }  \n}   \u4e0a\u8ff0\u7684\u4ee3\u7801\u6267\u884c\u8fc7\u540e\uff0c\u7528Java\u53cd\u7f16\u8bd1\u5de5\u5177\uff08\u5982JD_GUI\uff09\u6253\u5f00D\u76d8\u4e0b\u751f\u6210\u7684Programmer.class\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a  \u518d\u7528\u4e0a\u9762\u6211\u4eec\u5b9a\u4e49\u7684\u7c7b\u52a0\u8f7d\u5668\u5c06\u8fd9\u4e2aclass\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e \u521b\u5efaclass\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8c03\u7528code\u65b9\u6cd5\uff0c\u4f1a\u770b\u5230\u4e0b\u9762\u7684\u7ed3\u679c\uff1a  \u4ee5\u4e0a\u8868\u660e\uff1a\u5728\u4ee3\u7801\u91cc\u751f\u6210\u5b57\u8282\u7801\uff0c\u5e76\u52a8\u6001\u5730\u52a0\u8f7d\u6210class\u5bf9\u8c61\u3001\u521b\u5efa\u5b9e\u4f8b\u662f\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002", 
            "title": "Java\u5b57\u8282\u7801\u751f\u6210\u5f00\u6e90\u6846\u67b6\u4ecb\u7ecd--ASM\uff1a"
        }, 
        {
            "location": "/javassit/#java-javassist", 
            "text": "Javassist\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u6790\u3001\u7f16\u8f91\u548c\u521b\u5efaJava\u5b57\u8282\u7801\u7684\u7c7b\u5e93\u3002\u662f\u7531\u4e1c\u4eac\u5de5\u4e1a\u5927\u5b66\u7684\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u7684 Shigeru Chiba \uff08\u5343\u53f6 \u6ecb\uff09\u6240\u521b\u5efa\u7684\u3002\u5b83\u5df2\u52a0\u5165\u4e86\u5f00\u653e\u6e90\u4ee3\u7801JBoss \u5e94\u7528\u670d\u52a1\u5668\u9879\u76ee,\u901a\u8fc7\u4f7f\u7528Javassist\u5bf9\u5b57\u8282\u7801\u64cd\u4f5c\u4e3aJBoss\u5b9e\u73b0\u52a8\u6001AOP\u6846\u67b6\u3002javassist\u662fjboss\u7684\u4e00\u4e2a\u5b50\u9879\u76ee\uff0c\u5176\u4e3b\u8981\u7684\u4f18\u70b9\uff0c\u5728\u4e8e\u7b80\u5355\uff0c\u800c\u4e14\u5feb\u901f\u3002\u76f4\u63a5\u4f7f\u7528java\u7f16\u7801\u7684\u5f62\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u865a\u62df\u673a\u6307\u4ee4\uff0c\u5c31\u80fd\u52a8\u6001\u6539\u53d8\u7c7b\u7684\u7ed3\u6784\uff0c\u6216\u8005\u52a8\u6001\u751f\u6210\u7c7b\u3002  \u4e0b\u9762\u901a\u8fc7Javassist\u521b\u5efa\u4e0a\u8ff0\u7684Programmer\u7c7b\uff1a  import javassist.ClassPool;  \nimport javassist.CtClass;  \nimport javassist.CtMethod;  \nimport javassist.CtNewMethod;  \n\npublic class MyGenerator {  \n\n    public static void main(String[] args) throws Exception {  \n        ClassPool pool = ClassPool.getDefault();  \n        //\u521b\u5efaProgrammer\u7c7b       \n        CtClass cc= pool.makeClass( com.samples.Programmer );  \n        //\u5b9a\u4e49code\u65b9\u6cd5  \n        CtMethod method = CtNewMethod.make( public void code(){} , cc);  \n        //\u63d2\u5165\u65b9\u6cd5\u4ee3\u7801  \n        method.insertBefore( System.out.println(\\ I'm a Programmer,Just Coding.....\\ ); );  \n        cc.addMethod(method);  \n        //\u4fdd\u5b58\u751f\u6210\u7684\u5b57\u8282\u7801  \n        cc.writeFile( d://temp );  \n    }  \n}    \u901a\u8fc7JD-gui\u53cd\u7f16\u8bd1\u5de5\u5177\u6253\u5f00Programmer.class \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff1a", 
            "title": "Java\u5b57\u8282\u7801\u751f\u6210\u5f00\u6e90\u6846\u67b6\u4ecb\u7ecd--Javassist\uff1a"
        }, 
        {
            "location": "/javassit/#_2", 
            "text": "\u4ee3\u7406\u6a21\u5f0f\u4e0a\uff0c\u57fa\u672c\u4e0a\u6709Subject\u89d2\u8272\uff0cRealSubject\u89d2\u8272\uff0cProxy\u89d2\u8272\u3002\u5176\u4e2d\uff1aSubject\u89d2\u8272\u8d1f\u8d23\u5b9a\u4e49RealSubject\u548cProxy\u89d2\u8272\u5e94\u8be5\u5b9e\u73b0\u7684\u63a5\u53e3\uff1bRealSubject\u89d2\u8272\u7528\u6765\u771f\u6b63\u5b8c\u6210\u4e1a\u52a1\u670d\u52a1\u529f\u80fd\uff1bProxy\u89d2\u8272\u8d1f\u8d23\u5c06\u81ea\u8eab\u7684Request\u8bf7\u6c42\uff0c\u8c03\u7528realsubject \u5bf9\u5e94\u7684request\u529f\u80fd\u6765\u5b9e\u73b0\u4e1a\u52a1\u529f\u80fd\uff0c\u81ea\u5df1\u4e0d\u771f\u6b63\u505a\u4e1a\u52a1\u3002  \u4e0a\u9762\u7684\u8fd9\u5e45\u4ee3\u7406\u7ed3\u6784\u56fe\u662f\u5178\u578b\u7684\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\uff1a  \u5f53\u5728\u4ee3\u7801\u9636\u6bb5\u89c4\u5b9a\u8fd9\u79cd\u4ee3\u7406\u5173\u7cfb\uff0cProxy\u7c7b\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210class\u6587\u4ef6\uff0c\u5f53\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u6b64class\u5df2\u7ecf\u5b58\u5728\u4e86\u3002\u8fd9\u79cd\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\u56fa\u7136\u5728\u8bbf\u95ee\u65e0\u6cd5\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u589e\u5f3a\u73b0\u6709\u7684\u63a5\u53e3\u4e1a\u52a1\u529f\u80fd\u65b9\u9762\u6709\u5f88\u5927\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u5927\u91cf\u4f7f\u7528\u8fd9\u79cd\u9759\u6001\u4ee3\u7406\uff0c\u4f1a\u4f7f\u6211\u4eec\u7cfb\u7edf\u5185\u7684\u7c7b\u7684\u89c4\u6a21\u589e\u5927\uff0c\u5e76\u4e14\u4e0d\u6613\u7ef4\u62a4\uff1b\u5e76\u4e14\u7531\u4e8eProxy\u548cRealSubject\u7684\u529f\u80fd \u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\uff0cProxy\u53ea\u662f\u8d77\u5230\u4e86\u4e2d\u4ecb\u7684\u4f5c\u7528\uff0c\u8fd9\u79cd\u4ee3\u7406\u5728\u7cfb\u7edf\u4e2d\u7684\u5b58\u5728\uff0c\u5bfc\u81f4\u7cfb\u7edf\u7ed3\u6784\u6bd4\u8f83\u81c3\u80bf\u548c\u677e\u6563\u3002  \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u6709\u4e86\u52a8\u6001\u5730\u521b\u5efaProxy\u7684\u60f3\u6cd5\uff1a\u5728\u8fd0\u884c\u72b6\u6001\u4e2d\uff0c\u9700\u8981\u4ee3\u7406\u7684\u5730\u65b9\uff0c\u6839\u636eSubject \u548cRealSubject\uff0c\u52a8\u6001\u5730\u521b\u5efa\u4e00\u4e2aProxy\uff0c\u7528\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u9500\u6bc1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e86Proxy \u89d2\u8272\u7684class\u5728\u7cfb\u7edf\u4e2d\u5197\u6742\u7684\u95ee\u9898\u4e86\u3002  \u4e0b\u9762\u4ee5\u4e00\u4e2a\u4ee3\u7406\u6a21\u5f0f\u5b9e\u4f8b\u9610\u8ff0\u8fd9\u4e00\u95ee\u9898\uff1a  \u5c06\u8f66\u7ad9\u7684\u552e\u7968\u670d\u52a1\u62bd\u8c61\u51fa\u4e00\u4e2a\u63a5\u53e3TicketService,\u5305\u542b\u95ee\u8be2\uff0c\u5356\u7968\uff0c\u9000\u7968\u529f\u80fd\uff0c\u8f66\u7ad9\u7c7bStation\u5b9e\u73b0\u4e86TicketService\u63a5\u53e3\uff0c\u8f66\u7968\u4ee3\u552e\u70b9StationProxy\u5219\u5b9e\u73b0\u4e86\u4ee3\u7406\u89d2\u8272\u7684\u529f\u80fd\uff0c\u7c7b\u56fe\u5982\u4e0b\u6240\u793a\u3002  \u5bf9\u5e94\u7684\u9759\u6001\u7684\u4ee3\u7406\u6a21\u5f0f\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a  package com.foo.proxy;  \n\n/** \n * \u552e\u7968\u670d\u52a1\u63a5\u53e3\u5b9e\u73b0\u7c7b\uff0c\u8f66\u7ad9 \n * @author louluan \n */  \npublic class Station implements TicketService {  \n\n    @Override  \n    public void sellTicket() {  \n        System.out.println( \\n\\t\u552e\u7968.....\\n );  \n    }  \n\n    @Override  \n    public void inquire() {  \n        System.out.println( \\n\\t\u95ee\u8be2\u3002\u3002\u3002\u3002\\n );  \n    }  \n\n    @Override  \n    public void withdraw() {  \n        System.out.println( \\n\\t\u9000\u7968......\\n );  \n    }  \n\n}    package com.foo.proxy;  \n/** \n * \u552e\u7968\u670d\u52a1\u63a5\u53e3  \n * @author louluan \n */  \npublic interface TicketService {  \n\n    //\u552e\u7968  \n    public void sellTicket();  \n\n    //\u95ee\u8be2  \n    public void inquire();  \n\n    //\u9000\u7968  \n    public void withdraw();  \n\n}    package com.foo.proxy;  \n\n/** \n * \u8f66\u7968\u4ee3\u552e\u70b9 \n * @author louluan \n * \n */  \npublic class StationProxy implements TicketService {  \n\n    private Station station;  \n\n    public StationProxy(Station station){  \n        this.station = station;  \n    }  \n\n    @Override  \n    public void sellTicket() {  \n\n        // 1.\u505a\u771f\u6b63\u4e1a\u52a1\u524d\uff0c\u63d0\u793a\u4fe1\u606f  \n        this.showAlertInfo( \u00d7\u00d7\u00d7\u00d7\u60a8\u6b63\u5728\u4f7f\u7528\u8f66\u7968\u4ee3\u552e\u70b9\u8fdb\u884c\u8d2d\u7968\uff0c\u6bcf\u5f20\u7968\u5c06\u4f1a\u6536\u53d65\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7 );  \n        // 2.\u8c03\u7528\u771f\u5b9e\u4e1a\u52a1\u903b\u8f91  \n        station.sellTicket();  \n        // 3.\u540e\u5904\u7406  \n        this.takeHandlingFee();  \n        this.showAlertInfo( \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\n );  \n\n    }  \n\n    @Override  \n    public void inquire() {  \n        // 1\u505a\u771f\u6b63\u4e1a\u52a1\u524d\uff0c\u63d0\u793a\u4fe1\u606f  \n        this.showAlertInfo( \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u95ee\u8be2\u670d\u52a1\u4e0d\u4f1a\u6536\u53d6\u4efb\u4f55\u8d39\u7528\uff0c\u672c\u95ee\u8be2\u4fe1\u606f\u4ec5\u4f9b\u53c2\u8003\uff0c\u5177\u4f53\u4fe1\u606f\u4ee5\u8f66\u7ad9\u771f\u5b9e\u6570\u636e\u4e3a\u51c6\uff01\u00d7\u00d7\u00d7\u00d7 );  \n        // 2.\u8c03\u7528\u771f\u5b9e\u903b\u8f91  \n        station.inquire();  \n        // 3\u3002\u540e\u5904\u7406  \n        this.showAlertInfo( \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\n );  \n    }  \n\n    @Override  \n    public void withdraw() {  \n        // 1\u3002\u771f\u6b63\u4e1a\u52a1\u524d\u5904\u7406  \n        this.showAlertInfo( \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u9000\u7968\u9664\u4e86\u6263\u9664\u7968\u989d\u768420%\u5916\uff0c\u672c\u4ee3\u7406\u5904\u989d\u5916\u52a0\u65362\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7 );  \n        // 2.\u8c03\u7528\u771f\u6b63\u4e1a\u52a1\u903b\u8f91  \n        station.withdraw();  \n        // 3.\u540e\u5904\u7406  \n        this.takeHandlingFee();  \n\n    }  \n\n    /* \n     * \u5c55\u793a\u989d\u5916\u4fe1\u606f \n     */  \n    private void showAlertInfo(String info) {  \n        System.out.println(info);  \n    }  \n\n    /* \n     * \u6536\u53d6\u624b\u7eed\u8d39 \n     */  \n    private void takeHandlingFee() {  \n        System.out.println( \u6536\u53d6\u624b\u7eed\u8d39\uff0c\u6253\u5370\u53d1\u7968\u3002\u3002\u3002\u3002\u3002\\n );  \n    }  \n\n}    \u7531\u4e8e\u6211\u4eec\u73b0\u5728\u4e0d\u5e0c\u671b\u9759\u6001\u5730\u6709StationProxy\u7c7b\u5b58\u5728\uff0c\u5e0c\u671b\u5728\u4ee3\u7801\u4e2d\uff0c\u52a8\u6001\u751f\u6210\u5668\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u52a0\u8f7d\u8fdb\u6765\u3002\u4e3a\u6b64\uff0c\u4f7f\u7528Javassist\u5f00\u6e90\u6846\u67b6\uff0c\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u5730\u751f\u6210StationProxy\u7684\u5b57\u8282\u7801\uff1a  package com.foo.proxy;  \n\n\nimport java.lang.reflect.Constructor;  \n\nimport javassist.*;  \npublic class Test {  \n\n    public static void main(String[] args) throws Exception {  \n       createProxy();  \n    }  \n\n    /* \n     * \u624b\u52a8\u521b\u5efa\u5b57\u8282\u7801 \n     */  \n    private static void createProxy() throws Exception  \n    {  \n        ClassPool pool = ClassPool.getDefault();  \n\n        CtClass cc = pool.makeClass( com.foo.proxy.StationProxy );  \n\n        //\u8bbe\u7f6e\u63a5\u53e3  \n        CtClass interface1 = pool.get( com.foo.proxy.TicketService );  \n        cc.setInterfaces(new CtClass[]{interface1});  \n\n        //\u8bbe\u7f6eField  \n        CtField field = CtField.make( private com.foo.proxy.Station station; , cc);  \n\n        cc.addField(field);  \n\n        CtClass stationClass = pool.get( com.foo.proxy.Station );  \n        CtClass[] arrays = new CtClass[]{stationClass};  \n        CtConstructor ctc = CtNewConstructor.make(arrays,null,CtNewConstructor.PASS_NONE,null,null, cc);  \n        //\u8bbe\u7f6e\u6784\u9020\u51fd\u6570\u5185\u90e8\u4fe1\u606f  \n        ctc.setBody( {this.station=$1;} );  \n        cc.addConstructor(ctc);  \n\n        //\u521b\u5efa\u6536\u53d6\u624b\u7eed takeHandlingFee\u65b9\u6cd5  \n        CtMethod takeHandlingFee = CtMethod.make( private void takeHandlingFee() {} , cc);  \n        takeHandlingFee.setBody( System.out.println(\\ \u6536\u53d6\u624b\u7eed\u8d39\uff0c\u6253\u5370\u53d1\u7968\u3002\u3002\u3002\u3002\u3002\\ ); );  \n        cc.addMethod(takeHandlingFee);  \n\n        //\u521b\u5efashowAlertInfo \u65b9\u6cd5  \n        CtMethod showInfo = CtMethod.make( private void showAlertInfo(String info) {} , cc);  \n        showInfo.setBody( System.out.println($1); );  \n        cc.addMethod(showInfo);  \n\n        //sellTicket  \n        CtMethod sellTicket = CtMethod.make( public void sellTicket(){} , cc);  \n        sellTicket.setBody( {this.showAlertInfo(\\ \u00d7\u00d7\u00d7\u00d7\u60a8\u6b63\u5728\u4f7f\u7528\u8f66\u7968\u4ee3\u552e\u70b9\u8fdb\u884c\u8d2d\u7968\uff0c\u6bcf\u5f20\u7968\u5c06\u4f1a\u6536\u53d65\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\\ );   \n                +  station.sellTicket();   \n                +  this.takeHandlingFee();   \n                +  this.showAlertInfo(\\ \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\ );} );  \n        cc.addMethod(sellTicket);  \n\n        //\u6dfb\u52a0inquire\u65b9\u6cd5  \n        CtMethod inquire = CtMethod.make( public void inquire() {} , cc);  \n        inquire.setBody( {this.showAlertInfo(\\ \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u95ee\u8be2\u670d\u52a1\u4e0d\u4f1a\u6536\u53d6\u4efb\u4f55\u8d39\u7528\uff0c\u672c\u95ee\u8be2\u4fe1\u606f\u4ec5\u4f9b\u53c2\u8003\uff0c\u5177\u4f53\u4fe1\u606f\u4ee5\u8f66\u7ad9\u771f\u5b9e\u6570\u636e\u4e3a\u51c6\uff01\u00d7\u00d7\u00d7\u00d7\\ );   \n        +  station.inquire();   \n        +  this.showAlertInfo(\\ \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u60a8\u7684\u5149\u4e34\uff0c\u518d\u89c1\uff01\u00d7\u00d7\u00d7\u00d7\\ );}   \n        );  \n        cc.addMethod(inquire);  \n\n        //\u6dfb\u52a0widthraw\u65b9\u6cd5  \n        CtMethod withdraw = CtMethod.make( public void withdraw() {} , cc);  \n        withdraw.setBody( {this.showAlertInfo(\\ \u00d7\u00d7\u00d7\u00d7\u6b22\u8fce\u5149\u4e34\u672c\u4ee3\u552e\u70b9\uff0c\u9000\u7968\u9664\u4e86\u6263\u9664\u7968\u989d\u768420%\u5916\uff0c\u672c\u4ee3\u7406\u5904\u989d\u5916\u52a0\u65362\u5143\u624b\u7eed\u8d39\uff01\u00d7\u00d7\u00d7\u00d7\\ );   \n                +  station.withdraw();   \n                +  this.takeHandlingFee();}   \n                );  \n        cc.addMethod(withdraw);  \n\n        //\u83b7\u53d6\u52a8\u6001\u751f\u6210\u7684class  \n        Class c = cc.toClass();  \n        //\u83b7\u53d6\u6784\u9020\u5668  \n        Constructor constructor= c.getConstructor(Station.class);  \n        //\u901a\u8fc7\u6784\u9020\u5668\u5b9e\u4f8b\u5316  \n        TicketService o = (TicketService)constructor.newInstance(new Station());  \n        o.inquire();  \n\n        cc.writeFile( D://test );  \n    }  \n\n}   \u4e0a\u8ff0\u4ee3\u7801\u6267\u884c\u8fc7\u540e\uff0c\u4f1a\u4ea7\u751fStationProxy\u7684\u5b57\u8282\u7801\uff0c\u5e76\u4e14\u7528\u751f\u6210\u5b57\u8282\u7801\u52a0\u8f7d\u5982\u5185\u5b58\u521b\u5efa\u5bf9\u8c61\uff0c\u8c03\u7528inquire()\u65b9\u6cd5\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a  \u901a\u8fc7\u4e0a\u9762\u52a8\u6001\u751f\u6210\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u73b0\u76f8\u5f53\u5730\u9ebb\u70e6\u5728\u521b\u9020\u7684\u8fc7\u7a0b\u4e2d\uff0c\u542b\u6709\u592a\u591a\u7684\u4e1a\u52a1\u4ee3\u7801\u3002\u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efaProxy\u4ee3\u7406\u7c7b\u7684\u65b9\u5f0f\u7684\u521d\u8877\u662f\u51cf\u5c11\u7cfb\u7edf\u4ee3\u7801\u7684\u5197\u6742\u5ea6\uff0c\u4f46\u662f\u4e0a\u8ff0\u505a\u6cd5\u5374\u589e\u52a0\u4e86\u5728\u52a8\u6001\u521b\u5efa\u4ee3\u7406\u7c7b\u8fc7\u7a0b\u4e2d\u7684\u590d\u6742\u5ea6\uff1a\u624b\u52a8\u5730\u521b\u5efa\u4e86\u592a\u591a\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u5e76\u4e14\u5c01\u88c5\u6027\u4e5f\u4e0d\u591f\uff0c\u5b8c\u5168\u4e0d\u5177\u6709\u53ef\u62d3\u5c55\u6027\u548c\u901a\u7528\u6027\u3002\u5982\u679c\u67d0\u4e2a\u4ee3\u7406\u7c7b\u7684\u4e00\u4e9b\u4e1a\u52a1\u903b\u8f91\u975e\u5e38\u590d\u6742\uff0c\u4e0a\u8ff0\u7684\u52a8\u6001\u521b\u5efa\u4ee3\u7406\u7684\u65b9\u5f0f\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\uff01", 
            "title": "\u4ee3\u7406\u7684\u57fa\u672c\u6784\u6210\uff1a"
        }, 
        {
            "location": "/javassit/#invocationhandler", 
            "text": "\u4ed4\u7ec6\u601d\u8003\u4ee3\u7406\u6a21\u5f0f\u4e2d\u7684\u4ee3\u7406Proxy\u89d2\u8272\u3002Proxy\u89d2\u8272\u5728\u6267\u884c\u4ee3\u7406\u4e1a\u52a1\u7684\u65f6\u5019\uff0c\u65e0\u975e\u662f\u5728\u8c03\u7528\u771f\u6b63\u4e1a\u52a1\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u505a\u4e00\u4e9b\u201c\u989d\u5916\u201d\u4e1a\u52a1\u3002  \u6709\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u4ee3\u7406\u7c7b\u5904\u7406\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff1a\u5728\u8c03\u7528\u67d0\u4e2a\u65b9\u6cd5\u524d\u53ca\u65b9\u6cd5\u540e\u505a\u4e00\u4e9b\u989d\u5916\u7684\u4e1a\u52a1\u3002\u6362\u4e00\u79cd\u601d\u8def\u5c31\u662f\uff1a\u5728\u89e6\u53d1\uff08invoke\uff09\u771f\u5b9e\u89d2\u8272\u7684\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u505a\u4e00\u4e9b\u989d\u5916\u7684\u4e1a\u52a1\u3002\u90a3\u4e48\uff0c\u4e3a\u4e86\u6784\u9020\u51fa\u5177\u6709\u901a\u7528\u6027\u548c\u7b80\u5355\u6027\u7684\u4ee3\u7406\u7c7b\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u89e6\u53d1\u771f\u5b9e\u89d2\u8272\u52a8\u4f5c\u4ea4\u7ed9\u4e00\u4e2a\u89e6\u53d1\u7684\u7ba1\u7406\u5668\uff0c\u8ba9\u8fd9\u4e2a\u7ba1\u7406\u5668\u7edf\u4e00\u5730\u7ba1\u7406\u89e6\u53d1\u3002\u8fd9\u79cd\u7ba1\u7406\u5668\u5c31\u662fInvocation Handler\u3002  \u52a8\u6001\u4ee3\u7406\u6a21\u5f0f\u7684\u7ed3\u6784\u8ddf\u4e0a\u9762\u7684\u9759\u6001\u4ee3\u7406\u6a21\u5f0f\u7a0d\u5fae\u6709\u6240\u4e0d\u540c\uff0c\u591a\u5f15\u5165\u4e86\u4e00\u4e2aInvocationHandler\u89d2\u8272\u3002  \u5148\u89e3\u91ca\u4e00\u4e0bInvocationHandler\u7684\u4f5c\u7528\uff1a  \u5728\u9759\u6001\u4ee3\u7406\u4e2d\uff0c\u4ee3\u7406Proxy\u4e2d\u7684\u65b9\u6cd5\uff0c\u90fd\u6307\u5b9a\u4e86\u8c03\u7528\u4e86\u7279\u5b9a\u7684realSubject\u4e2d\u7684\u5bf9\u5e94\u7684\u65b9\u6cd5\uff1a  \u5728\u4e0a\u9762\u7684\u9759\u6001\u4ee3\u7406\u6a21\u5f0f\u4e0b\uff0cProxy\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u65e0\u975e\u662f\u8c03\u7528\u5728\u4e0d\u540c\u7684request\u65f6\uff0c\u8c03\u7528\u89e6\u53d1realSubject\u5bf9\u5e94\u7684\u65b9\u6cd5\uff1b\u66f4\u62bd\u8c61\u70b9\u770b\uff0cProxy\u6240\u4f5c\u7684\u4e8b\u60c5\uff1b\u5728Java\u4e2d \u65b9\u6cd5\uff08Method\uff09\u4e5f\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u6765\u770b\u5f85\u4e86\uff0c\u52a8\u6001\u4ee3\u7406\u5de5\u4f5c\u7684\u57fa\u672c\u6a21\u5f0f\u5c31\u662f\u5c06\u81ea\u5df1\u7684\u65b9\u6cd5\u529f\u80fd\u7684\u5b9e\u73b0\u4ea4\u7ed9 InvocationHandler\u89d2\u8272\uff0c\u5916\u754c\u5bf9Proxy\u89d2\u8272\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u7684\u8c03\u7528\uff0cProxy\u89d2\u8272\u90fd\u4f1a\u4ea4\u7ed9InvocationHandler\u6765\u5904\u7406\uff0c\u800cInvocationHandler\u5219\u8c03\u7528\u5177\u4f53\u5bf9\u8c61\u89d2\u8272\u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a   \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e4b\u4e2d\uff1a\u4ee3\u7406Proxy \u548cRealSubject \u5e94\u8be5\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u8fd9\u4e00\u70b9\u76f8\u5f53\u91cd\u8981\u3002\uff08\u6211\u8fd9\u91cc\u8bf4\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u67d0\u4e2a\u7c7b\u7684public\u65b9\u6cd5\uff09\n\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u4e4b\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ea6\u5b9aProxy \u548cRealSubject\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a   a.\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u529f\u80fd\u63a5\u53e3\uff0c\u7136\u540e\u8ba9Proxy \u548cRealSubject\u6765\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u3002  b.\u8fd8\u6709\u6bd4\u8f83\u9690\u6666\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u901a\u8fc7\u7ee7\u627f\u3002\u56e0\u4e3a\u5982\u679cProxy \u7ee7\u627f\u81eaRealSubject\uff0c\u8fd9\u6837Proxy\u5219\u62e5\u6709\u4e86RealSubject\u7684\u529f\u80fd\uff0cProxy\u8fd8\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199RealSubject\u4e2d\u7684\u65b9\u6cd5\uff0c\u6765\u5b9e\u73b0\u591a\u6001\u3002   \u5176\u4e2dJDK\u4e2d\u63d0\u4f9b\u7684\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7684\u673a\u5236\uff0c\u662f\u4ee5a \u8fd9\u79cd\u601d\u8def\u8bbe\u8ba1\u7684\uff0c\u800ccglib \u5219\u662f\u4ee5b\u601d\u8def\u8bbe\u8ba1\u7684\u3002", 
            "title": "InvocationHandler\u89d2\u8272\u7684\u7531\u6765"
        }, 
        {
            "location": "/javassit/#jdk-", 
            "text": "\u6bd4\u5982\u73b0\u5728\u60f3\u4e3aRealSubject\u8fd9\u4e2a\u7c7b\u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u4ee3\u7406\u5bf9\u8c61\uff0cJDK\u4e3b\u8981\u4f1a\u505a\u4ee5\u4e0b\u5de5\u4f5c\uff1a     \u83b7\u53d6 RealSubject\u4e0a\u7684\u6240\u6709\u63a5\u53e3\u5217\u8868\uff1b      \u786e\u5b9a\u8981\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u7684\u7c7b\u540d\uff0c\u9ed8\u8ba4\u4e3a\uff1acom.sun.proxy.$ProxyXXXX \uff1b      \u6839\u636e\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\u4fe1\u606f\uff0c\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u521b\u5efa \u8be5Proxy\u7c7b\u7684\u5b57\u8282\u7801\uff1b    4 .  \u5c06\u5bf9\u5e94\u7684\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684class \u5bf9\u8c61\uff1b    \u521b\u5efaInvocationHandler \u5b9e\u4f8bhandler\uff0c\u7528\u6765\u5904\u7406Proxy\u6240\u6709\u65b9\u6cd5\u8c03\u7528\uff1b      Proxy \u7684class\u5bf9\u8c61 \u4ee5\u521b\u5efa\u7684handler\u5bf9\u8c61\u4e3a\u53c2\u6570\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2aproxy\u5bf9\u8c61     JDK\u901a\u8fc7 java.lang.reflect.Proxy\u5305\u6765\u652f\u6301\u52a8\u6001\u4ee3\u7406\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684newProxyInstance\u65b9\u6cd5  \u800c\u5bf9\u4e8eInvocationHandler\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e0b\u5217\u7684invoke\u65b9\u6cd5\uff1a  \u5728\u8c03\u7528\u4ee3\u7406\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5728\u4ee3\u7801\u5185\u90e8\uff0c\u90fd\u662f\u76f4\u63a5\u8c03\u7528\u4e86InvocationHandler \u7684invoke\u65b9\u6cd5\uff0c\u800cinvoke\u65b9\u6cd5\u6839\u636e\u4ee3\u7406\u7c7b\u4f20\u9012\u7ed9\u81ea\u5df1\u7684method\u53c2\u6570\u6765\u533a\u5206\u662f\u4ec0\u4e48\u65b9\u6cd5\u3002   \u8bb2\u7684\u6709\u70b9\u62bd\u8c61\uff0c\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6765\u6f14\u793a\u4e00\u4e0b\u5427\uff1a", 
            "title": "JDK\u7684\u52a8\u6001\u4ee3\u7406\u521b\u5efa\u673a\u5236----\u901a\u8fc7\u63a5\u53e3"
        }, 
        {
            "location": "/javassit/#jdk", 
            "text": "\u73b0\u5728\u5b9a\u4e49\u4e24\u4e2a\u63a5\u53e3Vehicle\u548cRechargable\uff0cVehicle\u8868\u793a\u4ea4\u901a\u5de5\u5177\u7c7b\uff0c\u6709drive()\u65b9\u6cd5\uff1bRechargable\u63a5\u53e3\u8868\u793a\u53ef\u5145\u7535\u7684\uff08\u5de5\u5177\uff09\uff0c\u6709recharge() \u65b9\u6cd5\uff1b  \u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u7684\u7c7bElectricCar\uff0c\u7c7b\u56fe\u5982\u4e0b\uff1a\n   \u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u6765\u4e3aElectricCar\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7c7b\uff1a\n ```\n package com.foo.proxy;    import java.lang.reflect.InvocationHandler; \nimport java.lang.reflect.Proxy;    public class Test {    public static void main(String[] args) {\n\n    ElectricCar car = new ElectricCar();  \n    // 1.\u83b7\u53d6\u5bf9\u5e94\u7684ClassLoader  \n    ClassLoader classLoader = car.getClass().getClassLoader();\n\n    // 2.\u83b7\u53d6ElectricCar \u6240\u5b9e\u73b0\u7684\u6240\u6709\u63a5\u53e3  \n    Class[] interfaces = car.getClass().getInterfaces();  \n    // 3.\u8bbe\u7f6e\u4e00\u4e2a\u6765\u81ea\u4ee3\u7406\u4f20\u8fc7\u6765\u7684\u65b9\u6cd5\u8c03\u7528\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u5904\u7406\u6240\u6709\u7684\u4ee3\u7406\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u8c03\u7528  \n    InvocationHandler handler = new InvocationHandlerImpl(car);  \n    /* \n      4.\u6839\u636e\u4e0a\u9762\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c  \n                     a.JDK\u4f1a\u901a\u8fc7\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u4fe1\u606f\u52a8\u6001\u5730\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u548c.class \u6587\u4ef6\u7b49\u540c\u7684\u5b57\u8282\u7801 \n             b.\u7136\u540e\u6839\u636e\u76f8\u5e94\u7684\u5b57\u8282\u7801\u8f6c\u6362\u6210\u5bf9\u5e94\u7684class\uff0c  \n                     c.\u7136\u540e\u8c03\u7528newInstance()\u521b\u5efa\u5b9e\u4f8b \n     */  \n    Object o = Proxy.newProxyInstance(classLoader, interfaces, handler);  \n    Vehicle vehicle = (Vehicle) o;  \n    vehicle.drive();  \n    Rechargable rechargeable = (Rechargable) o;  \n    rechargeable.recharge();  \n}  } \n ```  package com.foo.proxy;  \n/** \n * \u4ea4\u901a\u5de5\u5177\u63a5\u53e3 \n * @author louluan \n */  \npublic interface Vehicle {  \n    public void drive();  \n}   package com.foo.proxy;  \n/** \n * \u53ef\u5145\u7535\u8bbe\u5907\u63a5\u53e3 \n * @author louluan \n */  \npublic interface Rechargable {  \n\n    public void recharge();  \n}    package com.foo.proxy;  \n/** \n * \u7535\u80fd\u8f66\u7c7b\uff0c\u5b9e\u73b0Rechargable\uff0cVehicle\u63a5\u53e3 \n * @author louluan \n */  \npublic class ElectricCar implements Rechargable, Vehicle {  \n\n    @Override  \n    public void drive() {  \n        System.out.println( Electric Car is Moving silently... );  \n    }  \n\n    @Override  \n    public void recharge() {  \n        System.out.println( Electric Car is Recharging... );  \n    }  \n\n}    package com.foo.proxy;  \n\nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Method;  \n\npublic class InvocationHandlerImpl implements InvocationHandler {  \n\n    private ElectricCar car;  \n\n    public InvocationHandlerImpl(ElectricCar car)  \n    {  \n        this.car=car;  \n    }  \n\n    @Override  \n    public Object invoke(Object paramObject, Method paramMethod,  \n            Object[] paramArrayOfObject) throws Throwable {  \n        System.out.println( You are going to invoke  +paramMethod.getName()+  ... );  \n        paramMethod.invoke(car, null);  \n        System.out.println(paramMethod.getName()+  invocation Has Been finished... );  \n        return null;  \n    }  \n\n}    \u6765\u770b\u4e00\u4e0b\u4ee3\u7801\u6267\u884c\u540e\u7684\u7ed3\u679c\uff1a  \u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u5b57\u8282\u7801\u5e76\u4e14\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff1a  JDK\u63d0\u4f9b\u4e86sun.misc.ProxyGenerator.generateProxyClass(String proxyName,class[] interfaces) \u5e95\u5c42\u65b9\u6cd5\u6765\u4ea7\u751f\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u5b57\u8282\u7801\uff1a  \u4e0b\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u7528\u6765\u5c06\u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff1a  package com.foo.proxy;  \n\nimport java.io.FileOutputStream;  \nimport java.io.IOException;  \nimport java.lang.reflect.Proxy;  \nimport sun.misc.ProxyGenerator;  \n\npublic class ProxyUtils {  \n\n    /* \n     * \u5c06\u6839\u636e\u7c7b\u4fe1\u606f \u52a8\u6001\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u5b57\u8282\u7801\u4fdd\u5b58\u5230\u786c\u76d8\u4e2d\uff0c \n     * \u9ed8\u8ba4\u7684\u662fclazz\u76ee\u5f55\u4e0b \n         * params :clazz \u9700\u8981\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u7c7b \n         * proxyName : \u4e3a\u52a8\u6001\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u7684\u540d\u79f0 \n         */  \n    public static void generateClassFile(Class clazz,String proxyName)  \n    {  \n        //\u6839\u636e\u7c7b\u4fe1\u606f\u548c\u63d0\u4f9b\u7684\u4ee3\u7406\u7c7b\u540d\u79f0\uff0c\u751f\u6210\u5b57\u8282\u7801  \n                byte[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());   \n        String paths = clazz.getResource( . ).getPath();  \n        System.out.println(paths);  \n        FileOutputStream out = null;    \n\n        try {  \n            //\u4fdd\u7559\u5230\u786c\u76d8\u4e2d  \n            out = new FileOutputStream(paths+proxyName+ .class );    \n            out.write(classFile);    \n            out.flush();    \n        } catch (Exception e) {    \n            e.printStackTrace();    \n        } finally {    \n            try {    \n                out.close();    \n            } catch (IOException e) {    \n                e.printStackTrace();    \n            }    \n        }    \n    }  \n\n}    \u73b0\u5728\u6211\u4eec\u60f3\u5c06\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u8d77\u540d\u4e3a\u201cElectricCarProxy\u201d\uff0c\u5e76\u4fdd\u5b58\u5728\u786c\u76d8\uff0c\u5e94\u8be5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a  ProxyUtils.generateClassFile(car.getClass(),  ElectricCarProxy );    \u8fd9\u6837\u5c06\u5728ElectricCar.class \u540c\u7ea7\u76ee\u5f55\u4e0b\u4ea7\u751f ElectricCarProxy.class\u6587\u4ef6\u3002\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u5982jd-gui.exe \u6253\u5f00\uff0c\u5c06\u4f1a\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a  import com.foo.proxy.Rechargable;  \nimport com.foo.proxy.Vehicle;  \nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Method;  \nimport java.lang.reflect.Proxy;  \nimport java.lang.reflect.UndeclaredThrowableException;  \n/** \n \u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u7ec4\u7ec7\u6a21\u5f0f\u662f\u7ee7\u627fProxy\u7c7b\uff0c\u7136\u540e\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee3\u7406\u7684\u7c7b\u4e0a\u7684\u6240\u6709\u63a5\u53e3\uff0c\u800c\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5219\u662f\u901a\u8fc7\u5c06\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u4ea4\u7ed9\u4e86InvocationHandler\u6765\u5904\u7406 \n*/  \n public final class ElectricCarProxy extends Proxy  \n  implements Rechargable, Vehicle  \n{  \n  private static Method m1;  \n  private static Method m3;  \n  private static Method m4;  \n  private static Method m0;  \n  private static Method m2;  \n\n  public ElectricCarProxy(InvocationHandler paramInvocationHandler)  \n    throws   \n  {  \n    super(paramInvocationHandler);  \n  }  \n\n  public final boolean equals(Object paramObject)  \n    throws   \n  {  \n    try  \n    { // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n      return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue();  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final void recharge()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n      this.h.invoke(this, m3, null);  \n      return;  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final void drive()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n      this.h.invoke(this, m4, null);  \n      return;  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final int hashCode()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n\n       return ((Integer)this.h.invoke(this, m0, null)).intValue();  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  public final String toString()  \n    throws   \n  {  \n    try  \n    {  \n\n       // \u65b9\u6cd5\u529f\u80fd\u5b9e\u73b0\u4ea4\u7ed9InvocationHandler\u5904\u7406  \n      return (String)this.h.invoke(this, m2, null);  \n    }  \n    catch (Error|RuntimeException localError)  \n    {  \n      throw localError;  \n    }  \n    catch (Throwable localThrowable)  \n    {  \n      throw new UndeclaredThrowableException(localThrowable);  \n    }  \n  }  \n\n  static  \n  {  \n    try  \n    {  //\u4e3a\u6bcf\u4e00\u4e2a\u9700\u8981\u65b9\u6cd5\u5bf9\u8c61\uff0c\u5f53\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u65f6\uff0c\u5206\u522b\u5c06\u65b9\u6cd5\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9InvocationHandler\u5904\u7406  \n      m1 = Class.forName( java.lang.Object ).getMethod( equals , new Class[] { Class.forName( java.lang.Object ) });  \n      m3 = Class.forName( com.foo.proxy.Rechargable ).getMethod( recharge , new Class[0]);  \n      m4 = Class.forName( com.foo.proxy.Vehicle ).getMethod( drive , new Class[0]);  \n      m0 = Class.forName( java.lang.Object ).getMethod( hashCode , new Class[0]);  \n      m2 = Class.forName( java.lang.Object ).getMethod( toString , new Class[0]);  \n      return;  \n    }  \n    catch (NoSuchMethodException localNoSuchMethodException)  \n    {  \n      throw new NoSuchMethodError(localNoSuchMethodException.getMessage());  \n    }  \n    catch (ClassNotFoundException localClassNotFoundException)  \n    {  \n      throw new NoClassDefFoundError(localClassNotFoundException.getMessage());  \n    }  \n  }  \n}   \u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u770b\u51fa\u751f\u6210\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u6709\u4ee5\u4e0b\u7279\u70b9:  1.\u7ee7\u627f\u81ea java.lang.reflect.Proxy\uff0c\u5b9e\u73b0\u4e86 Rechargable,Vehicle \u8fd9\u4e24\u4e2aElectricCar\u5b9e\u73b0\u7684\u63a5\u53e3\uff1b  2.\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662ffinal \u7684\uff1b\n* 3.\u6240\u6709\u7684\u65b9\u6cd5\u529f\u80fd\u7684\u5b9e\u73b0\u90fd\u7edf\u4e00\u8c03\u7528\u4e86InvocationHandler\u7684invoke()\u65b9\u6cd5\u3002", 
            "title": "JDK\u52a8\u6001\u4ee3\u7406\u793a\u4f8b"
        }, 
        {
            "location": "/javassit/#cglib-", 
            "text": "JDK\u4e2d\u63d0\u4f9b\u7684\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u673a\u5236\u6709\u4e2a\u9c9c\u660e\u7684\u7279\u70b9\u662f\uff1a \u67d0\u4e2a\u7c7b\u5fc5\u987b\u6709\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c\u800c\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u4e5f\u53ea\u80fd\u4ee3\u7406\u67d0\u4e2a\u7c7b\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a\u5982\u679c\u4e0a\u9762\u4f8b\u5b50\u7684ElectricCar\u5b9e\u73b0\u4e86\u7ee7\u627f\u81ea\u4e24\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u5916\uff0c\u53e6\u5916\u5b9e\u73b0\u4e86\u65b9\u6cd5bee() ,\u5219\u5728\u4ea7\u751f\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u4e2d\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u65b9\u6cd5\u4e86\uff01\u66f4\u6781\u7aef\u7684\u60c5\u51b5\u662f\uff1a\u5982\u679c\u67d0\u4e2a\u7c7b\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u540cJDK\u4ea7\u751f\u52a8\u6001\u4ee3\u7406\u4e86\uff01  \u5e78\u597d\u6211\u4eec\u6709cglib\u3002\u201cCGLIB\uff08Code Generation Library\uff09\uff0c\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\uff0c\u9ad8\u6027\u80fd\uff0c\u9ad8\u8d28\u91cf\u7684Code\u751f\u6210\u7c7b\u5e93\uff0c\u5b83\u53ef\u4ee5\u5728\u8fd0\u884c\u671f\u6269\u5c55Java\u7c7b\u4e0e\u5b9e\u73b0Java\u63a5\u53e3\u3002\u201d\ncglib \u521b\u5efa\u67d0\u4e2a\u7c7bA\u7684\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u6a21\u5f0f\u662f\uff1a     \u67e5\u627eA\u4e0a\u7684\u6240\u6709\u975efinal \u7684public\u7c7b\u578b\u7684\u65b9\u6cd5\u5b9a\u4e49\uff1b      \u5c06\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5b9a\u4e49\u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1b      \u5c06\u7ec4\u6210\u7684\u5b57\u8282\u7801\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u4ee3\u7406\u7684class\u5bf9\u8c61\uff1b      \u5b9e\u73b0 MethodInterceptor\u63a5\u53e3\uff0c\u7528\u6765\u5904\u7406 \u5bf9\u4ee3\u7406\u7c7b\u4e0a\u6240\u6709\u65b9\u6cd5\u7684\u8bf7\u6c42\uff08\u8fd9\u4e2a\u63a5\u53e3\u548cJDK\u52a8\u6001\u4ee3\u7406InvocationHandler\u7684\u529f\u80fd\u548c\u89d2\u8272\u662f\u4e00\u6837\u7684\uff09     \u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\uff1a\u5b9a\u4e49\u4e00\u4e2aProgrammer\u7c7b\uff0c\u4e00\u4e2aHacker\u7c7b  package samples;  \n/** \n * \u7a0b\u5e8f\u733f\u7c7b \n * @author louluan \n */  \npublic class Programmer {  \n\n    public void code()  \n    {  \n        System.out.println( I'm a Programmer,Just Coding..... );  \n    }  \n}    package samples;  \n\nimport java.lang.reflect.Method;  \n\nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n/* \n * \u5b9e\u73b0\u4e86\u65b9\u6cd5\u62e6\u622a\u5668\u63a5\u53e3 \n */  \npublic class Hacker implements MethodInterceptor {  \n    @Override  \n    public Object intercept(Object obj, Method method, Object[] args,  \n            MethodProxy proxy) throws Throwable {  \n        System.out.println( **** I am a hacker,Let's see what the poor programmer is doing Now... );  \n        proxy.invokeSuper(obj, args);  \n        System.out.println( ****  Oh,what a poor programmer..... );  \n        return null;  \n    }  \n\n}    package samples;  \n\nimport net.sf.cglib.proxy.Enhancer;  \n\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Programmer progammer = new Programmer();  \n\n        Hacker hacker = new Hacker();  \n        //cglib \u4e2d\u52a0\u5f3a\u5668\uff0c\u7528\u6765\u521b\u5efa\u52a8\u6001\u4ee3\u7406  \n        Enhancer enhancer = new Enhancer();    \n                 //\u8bbe\u7f6e\u8981\u521b\u5efa\u52a8\u6001\u4ee3\u7406\u7684\u7c7b  \n        enhancer.setSuperclass(progammer.getClass());    \n               // \u8bbe\u7f6e\u56de\u8c03\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u5bf9\u4e8e\u4ee3\u7406\u7c7b\u4e0a\u6240\u6709\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u90fd\u4f1a\u8c03\u7528CallBack\uff0c\u800cCallback\u5219\u9700\u8981\u5b9e\u884cintercept()\u65b9\u6cd5\u8fdb\u884c\u62e6\u622a  \n                enhancer.setCallback(hacker);  \n                Programmer proxy =(Programmer)enhancer.create();  \n                proxy.code();  \n\n    }  \n}    \u7a0b\u5e8f\u6267\u884c\u7ed3\u679c\uff1a  \u8ba9\u6211\u4eec\u770b\u770b\u901a\u8fc7cglib\u751f\u6210\u7684class\u6587\u4ef6\u5185\u5bb9\uff1a  package samples;  \n\nimport java.lang.reflect.Method;  \nimport net.sf.cglib.core.ReflectUtils;  \nimport net.sf.cglib.core.Signature;  \nimport net.sf.cglib.proxy.Callback;  \nimport net.sf.cglib.proxy.Factory;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n\npublic class ProgrammerEnhancerByCGLIBfa7aa2cd extends Programmer  \n  implements Factory  \n{  \n   //......\u7701\u7565  \n  private MethodInterceptor CGLIB$CALLBACK_0;  // Enchaner\u4f20\u5165\u7684methodInterceptor  \n   // ....\u7701\u7565  \n  public final void code()  \n  {  \n    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;  \n    if (tmp4_1 == null)  \n    {  \n      tmp4_1;  \n      CGLIB$BIND_CALLBACKS(this);//\u82e5callback \u4e0d\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528methodInterceptor \u7684intercept()\u65b9\u6cd5  \n    }  \n    if (this.CGLIB$CALLBACK_0 != null)  \n      return;  \n      //\u5982\u679c\u6ca1\u6709\u8bbe\u7f6ecallback\u56de\u8c03\u51fd\u6570\uff0c\u5219\u9ed8\u8ba4\u6267\u884c\u7236\u7c7b\u7684\u65b9\u6cd5  \n      super.code();  \n  }  \n   //....\u540e\u7eed\u7701\u7565  \n}", 
            "title": "cglib \u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\u7684\u673a\u5236----\u901a\u8fc7\u7c7b\u7ee7\u627f\uff1a"
        }, 
        {
            "location": "/jvm/", 
            "text": "jvm \u5185\u5b58\u5206\u6790\n\n\njmap\n\n\n\u901a\u8fc7jmap -heap pid,\u67e5\u770b\u5230\u7684\u4e3aJAVA\u5806\u5185\u5b58(Young Gen+Old Gen)+Perm Gen\n\n\njstat\n\n\n\n\n\n\njstat\u547d\u4ee4\u547d\u4ee4\u683c\u5f0f\uff1a\n\n\n\n\njstat [Options] vmid [interval] [count]\n\n\n\n\n\n\n\n\n\u53c2\u6570\u8bf4\u660e\n\n\n\n\n\n\nOptions\uff0c\u9009\u9879\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528 -gcutil \u67e5\u770bgc\u60c5\u51b5\nvmid\uff0cVM\u7684\u8fdb\u7a0b\u53f7\uff0c\u5373\u5f53\u524d\u8fd0\u884c\u7684java\u8fdb\u7a0b\u53f7\ninterval\uff0c\u95f4\u9694\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\u6216\u8005\u6beb\u79d2\ncount\uff0c\u6253\u5370\u6b21\u6570\uff0c\u5982\u679c\u7f3a\u7701\u5219\u6253\u5370\u65e0\u6570\u6b21\n\n\n\n\n\u793a\u4f8b\n\n\njstat -gc 12538 5000\n\n\n\u5373\u4f1a\u6bcf5\u79d2\u4e00\u6b21\u663e\u793a\u8fdb\u7a0b\u53f7\u4e3a12538\u7684java\u8fdb\u6210\u7684GC\u60c5\u51b5\uff0c\n\n\n\u663e\u793a\u5185\u5bb9\u8bf4\u660e\u5982\u4e0b\uff08\u90e8\u5206\u7ed3\u679c\u662f\u901a\u8fc7\u5176\u4ed6\u5176\u4ed6\u53c2\u6570\u663e\u793a\u7684\uff0c\u6682\u4e0d\u8bf4\u660e\uff09\uff1a\n\n\nS0C\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S1C\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S0U\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         S1U\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         EC\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         EU\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         OC\uff1aOld\u4ee3\u7684\u5bb9\u91cf (\u5b57\u8282) \n         OU\uff1aOld\u4ee3\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         PC\uff1aPerm(\u6301\u4e45\u4ee3)\u7684\u5bb9\u91cf (\u5b57\u8282) \n         PU\uff1aPerm(\u6301\u4e45\u4ee3)\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         YGC\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6\u5e74\u8f7b\u4ee3\u4e2dgc\u6b21\u6570 \n         YGCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6\u5e74\u8f7b\u4ee3\u4e2dgc\u6240\u7528\u65f6\u95f4(s) \n         FGC\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6old\u4ee3(\u5168gc)gc\u6b21\u6570 \n         FGCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6old\u4ee3(\u5168gc)gc\u6240\u7528\u65f6\u95f4(s) \n         GCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6gc\u7528\u7684\u603b\u65f6\u95f4(s) \n         NGCMN\uff1a\u5e74\u8f7b\u4ee3(young)\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         NGCMX\uff1a\u5e74\u8f7b\u4ee3(young)\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         NGC\uff1a\u5e74\u8f7b\u4ee3(young)\u4e2d\u5f53\u524d\u7684\u5bb9\u91cf (\u5b57\u8282) \n         OGCMN\uff1aold\u4ee3\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         OGCMX\uff1aold\u4ee3\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         OGC\uff1aold\u4ee3\u5f53\u524d\u65b0\u751f\u6210\u7684\u5bb9\u91cf (\u5b57\u8282) \n         PGCMN\uff1aperm\u4ee3\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         PGCMX\uff1aperm\u4ee3\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282)   \n         PGC\uff1aperm\u4ee3\u5f53\u524d\u65b0\u751f\u6210\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S0\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         S1\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         E\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         O\uff1aold\u4ee3\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         P\uff1aperm\u4ee3\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         S0CMX\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         S1CMX \uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         ECMX\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         DSS\uff1a\u5f53\u524d\u9700\u8981survivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282)\uff08Eden\u533a\u5df2\u6ee1\uff09 \n         TT\uff1a \u6301\u6709\u6b21\u6570\u9650\u5236 \n         MTT \uff1a \u6700\u5927\u6301\u6709\u6b21\u6570\u9650\u5236 \n\n\n\n\n\u67e5\u770bjvm\u8fdb\u7a0b\u4e2d\u7ebf\u7a0b\u5360\u7528\n\n\n\n\njps\uff08\u67e5\u770bjava\u8fdb\u7a0b\uff09\n\n\ntop -Hp xxx(\u67e5\u770b\u8fdb\u7a0b\u4e2d\u7ebf\u7a0b\u7684\u5360\u7528\u60c5\u51b5)\n\n\nprintf \"%x\\n\" xxx \uff08\u67e5\u770b16\u8fdb\u5236\uff09\n\n\njstack xxx |grep xxx\uff08\u67e5\u770b\u7ebf\u7a0b\u60c5\u51b5\uff09", 
            "title": "jvm\u5185\u5b58\u5206\u6790"
        }, 
        {
            "location": "/jvm/#jvm", 
            "text": "", 
            "title": "jvm \u5185\u5b58\u5206\u6790"
        }, 
        {
            "location": "/jvm/#jmap", 
            "text": "\u901a\u8fc7jmap -heap pid,\u67e5\u770b\u5230\u7684\u4e3aJAVA\u5806\u5185\u5b58(Young Gen+Old Gen)+Perm Gen", 
            "title": "jmap"
        }, 
        {
            "location": "/jvm/#jstat", 
            "text": "jstat\u547d\u4ee4\u547d\u4ee4\u683c\u5f0f\uff1a   jstat [Options] vmid [interval] [count]     \u53c2\u6570\u8bf4\u660e    Options\uff0c\u9009\u9879\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528 -gcutil \u67e5\u770bgc\u60c5\u51b5\nvmid\uff0cVM\u7684\u8fdb\u7a0b\u53f7\uff0c\u5373\u5f53\u524d\u8fd0\u884c\u7684java\u8fdb\u7a0b\u53f7\ninterval\uff0c\u95f4\u9694\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\u6216\u8005\u6beb\u79d2\ncount\uff0c\u6253\u5370\u6b21\u6570\uff0c\u5982\u679c\u7f3a\u7701\u5219\u6253\u5370\u65e0\u6570\u6b21", 
            "title": "jstat"
        }, 
        {
            "location": "/jvm/#_1", 
            "text": "jstat -gc 12538 5000  \u5373\u4f1a\u6bcf5\u79d2\u4e00\u6b21\u663e\u793a\u8fdb\u7a0b\u53f7\u4e3a12538\u7684java\u8fdb\u6210\u7684GC\u60c5\u51b5\uff0c \n\u663e\u793a\u5185\u5bb9\u8bf4\u660e\u5982\u4e0b\uff08\u90e8\u5206\u7ed3\u679c\u662f\u901a\u8fc7\u5176\u4ed6\u5176\u4ed6\u53c2\u6570\u663e\u793a\u7684\uff0c\u6682\u4e0d\u8bf4\u660e\uff09\uff1a  S0C\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S1C\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S0U\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         S1U\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         EC\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u7684\u5bb9\u91cf (\u5b57\u8282) \n         EU\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         OC\uff1aOld\u4ee3\u7684\u5bb9\u91cf (\u5b57\u8282) \n         OU\uff1aOld\u4ee3\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         PC\uff1aPerm(\u6301\u4e45\u4ee3)\u7684\u5bb9\u91cf (\u5b57\u8282) \n         PU\uff1aPerm(\u6301\u4e45\u4ee3)\u76ee\u524d\u5df2\u4f7f\u7528\u7a7a\u95f4 (\u5b57\u8282) \n         YGC\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6\u5e74\u8f7b\u4ee3\u4e2dgc\u6b21\u6570 \n         YGCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6\u5e74\u8f7b\u4ee3\u4e2dgc\u6240\u7528\u65f6\u95f4(s) \n         FGC\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6old\u4ee3(\u5168gc)gc\u6b21\u6570 \n         FGCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6old\u4ee3(\u5168gc)gc\u6240\u7528\u65f6\u95f4(s) \n         GCT\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5230\u91c7\u6837\u65f6gc\u7528\u7684\u603b\u65f6\u95f4(s) \n         NGCMN\uff1a\u5e74\u8f7b\u4ee3(young)\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         NGCMX\uff1a\u5e74\u8f7b\u4ee3(young)\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         NGC\uff1a\u5e74\u8f7b\u4ee3(young)\u4e2d\u5f53\u524d\u7684\u5bb9\u91cf (\u5b57\u8282) \n         OGCMN\uff1aold\u4ee3\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         OGCMX\uff1aold\u4ee3\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         OGC\uff1aold\u4ee3\u5f53\u524d\u65b0\u751f\u6210\u7684\u5bb9\u91cf (\u5b57\u8282) \n         PGCMN\uff1aperm\u4ee3\u4e2d\u521d\u59cb\u5316(\u6700\u5c0f)\u7684\u5927\u5c0f (\u5b57\u8282) \n         PGCMX\uff1aperm\u4ee3\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282)   \n         PGC\uff1aperm\u4ee3\u5f53\u524d\u65b0\u751f\u6210\u7684\u5bb9\u91cf (\u5b57\u8282) \n         S0\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         S1\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         E\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         O\uff1aold\u4ee3\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         P\uff1aperm\u4ee3\u5df2\u4f7f\u7528\u7684\u5360\u5f53\u524d\u5bb9\u91cf\u767e\u5206\u6bd4 \n         S0CMX\uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e00\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         S1CMX \uff1a\u5e74\u8f7b\u4ee3\u4e2d\u7b2c\u4e8c\u4e2asurvivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         ECMX\uff1a\u5e74\u8f7b\u4ee3\u4e2dEden\uff08\u4f0a\u7538\u56ed\uff09\u7684\u6700\u5927\u5bb9\u91cf (\u5b57\u8282) \n         DSS\uff1a\u5f53\u524d\u9700\u8981survivor\uff08\u5e78\u5b58\u533a\uff09\u7684\u5bb9\u91cf (\u5b57\u8282)\uff08Eden\u533a\u5df2\u6ee1\uff09 \n         TT\uff1a \u6301\u6709\u6b21\u6570\u9650\u5236 \n         MTT \uff1a \u6700\u5927\u6301\u6709\u6b21\u6570\u9650\u5236", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/jvm/#jvm_1", 
            "text": "jps\uff08\u67e5\u770bjava\u8fdb\u7a0b\uff09  top -Hp xxx(\u67e5\u770b\u8fdb\u7a0b\u4e2d\u7ebf\u7a0b\u7684\u5360\u7528\u60c5\u51b5)  printf \"%x\\n\" xxx \uff08\u67e5\u770b16\u8fdb\u5236\uff09  jstack xxx |grep xxx\uff08\u67e5\u770b\u7ebf\u7a0b\u60c5\u51b5\uff09", 
            "title": "\u67e5\u770bjvm\u8fdb\u7a0b\u4e2d\u7ebf\u7a0b\u5360\u7528"
        }, 
        {
            "location": "/trans/", 
            "text": "ACID Propagation\n\n\n\u6570\u636e\u5e93\u4e8b\u52a1\u7684\u56db\u4e2a\u57fa\u672c\u6027\u8d28\u7b80\u4ecb\n\n\n\n\n\u539f\u5b50\u6027\uff08Atomicity\uff09\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\n\n\n\u4e00\u81f4\u6027\uff08Consistency\uff09\uff0c\u5c31\u662f\u5728\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u5bf9\u4e8e\u4e8b\u52a1\u672c\u8eab\u7684\u7528\u610f\u800c\u8a00\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u662f\u4fdd\u6301\u4e00\u81f4\u7684\uff0c\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u662f\u5efa\u7acb\u5728\u539f\u5b50\u6027\u7684\u57fa\u7840\u4e4b\u4e0a\u7684\uff0c\u66f4\u591a\u7684\u7531\u7f16\u7801\u7684\u7a0b\u5e8f\u5458\u4fdd\u8bc1\uff0c\u6700\u7ecf\u5178\u7684\u6848\u4f8b\u662fA\uff0cB\u5e10\u53f7\u4e4b\u95f4\u7684\u8f6c\u8d26\u3002\n\n\n\u9694\u79bb\u6027\uff08Isolation\uff09\uff0c\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u662f\u6307\u4e8b\u52a1\u548c\u4e8b\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u53ef\u89c1\u6027\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u9700\u8981\u8be6\u7ec6\u4ecb\u7ecd\u7684\u5730\u65b9\u3002\u6570\u636e\u5e93\u5b9a\u4e49\u4e86\u5404\u79cd\u9694\u79bb\u7ea7\u522b\uff0c\u4ee5\u5728\u5e76\u53d1\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u4e2d\u6743\u8861\u3002\n\n\n\u6301\u4e45\u6027\uff08Durability\uff09\uff0c\u4e8b\u52a1\u5b8c\u6210\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5c06\u6301\u4e45\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u800c\u4e22\u5931\u3002\n\n\n\n\n\u6570\u636e\u636e\u5e93\u5e76\u53d1\u6027\u5e26\u6765\u7684\u95ee\u9898\uff1a\n\n\n\n\n\u810f\u8bfb\uff08Dirty Reads\uff09\uff1a\u6240\u8c13\u810f\u8bfb\u5c31\u662f\u5bf9\u810f\u6570\u636e\uff08Drity Data\uff09\u7684\u8bfb\u53d6\uff0c\u800c\u810f\u6570\u636e\u6240\u6307\u7684\u5c31\u662f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u5bf9\u4e00\u6761\u8bb0\u5f55\u505a\u4fee\u6539\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u5b8c\u6210\u5e76\u63d0\u4ea4\u4e4b\u524d\uff0c\u8fd9\u6761\u6570\u636e\u662f\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\u7684\uff08\u53ef\u80fd\u63d0\u4ea4\u4e5f\u53ef\u80fd\u56de\u6eda\uff09\uff0c\u8fd9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u6765\u8bfb\u53d6\u8fd9\u6761\u6ca1\u6709\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u5e76\u636e\u6b64\u505a\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u5c31\u4f1a\u4ea7\u751f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u3002\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u810f\u8bfb\u3002\n\n\n\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non-Repeatable Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u5148\u540e\u8bfb\u53d6\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u4f46\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u4e0d\u540c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53ef\u91cd\u590d\u8bfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u4e8b\u52a1\u5728\u4e24\u6b21\u8bfb\u53d6\u4e4b\u95f4\u8be5\u6570\u636e\u88ab\u5176\u5b83\u4e8b\u52a1\u6240\u4fee\u6539\u3002\n\n\n\u5e7b\u8bfb\uff08Phantom Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u6309\u76f8\u540c\u7684\u67e5\u8be2\u6761\u4ef6\u91cd\u65b0\u8bfb\u53d6\u4ee5\u524d\u68c0\u7d22\u8fc7\u7684\u6570\u636e\uff0c\u5374\u53d1\u73b0\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165\u4e86\u6ee1\u8db3\u5176\u67e5\u8be2\u6761\u4ef6\u7684\u65b0\u6570\u636e\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c31\u79f0\u4e3a\u5e7b\u8bfb\u3002\n\n\n\n\n\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b\n\n\n\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u4e3b\u8981\u5206\u4e3a\u56db\u7ea7\uff0c\u9694\u79bb\u7ea7\u522b\u8d8a\u9ad8\uff0c\u5e76\u53d1\u6027\u5c31\u8d8a\u4f4e\uff0c\u4e00\u81f4\u6027\u5c31\u8d8a\u9ad8\u3002\n\n\n\u6570\u636e\u5e93\u4e8b\u52a1\u7684\u56db\u4e2a\u57fa\u672c\u6027\u8d28\u7b80\u4ecb\n\n\n\u539f\u5b50\u6027\uff08Atomicity\uff09\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\n\u4e00\u81f4\u6027\uff08Consistency\uff09\uff0c\u5c31\u662f\u5728\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u5bf9\u4e8e\u4e8b\u52a1\u672c\u8eab\u7684\u7528\u610f\u800c\u8a00\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u662f\u4fdd\u6301\u4e00\u81f4\u7684\uff0c\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u662f\u5efa\u7acb\u5728\u539f\u5b50\u6027\u7684\u57fa\u7840\u4e4b\u4e0a\u7684\uff0c\u66f4\u591a\u7684\u7531\u7f16\u7801\u7684\u7a0b\u5e8f\u5458\u4fdd\u8bc1\uff0c\u6700\u7ecf\u5178\u7684\u6848\u4f8b\u662fA\uff0cB\u5e10\u53f7\u4e4b\u95f4\u7684\u8f6c\u8d26\u3002\n\u9694\u79bb\u6027\uff08Isolation\uff09\uff0c\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u662f\u6307\u4e8b\u52a1\u548c\u4e8b\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u53ef\u89c1\u6027\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u9700\u8981\u8be6\u7ec6\u4ecb\u7ecd\u7684\u5730\u65b9\u3002\u6570\u636e\u5e93\u5b9a\u4e49\u4e86\u5404\u79cd\u9694\u79bb\u7ea7\u522b\uff0c\u4ee5\u5728\u5e76\u53d1\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u4e2d\u6743\u8861\u3002\n\u6301\u4e45\u6027\uff08Durability\uff09\uff0c\u4e8b\u52a1\u5b8c\u6210\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5c06\u6301\u4e45\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u800c\u4e22\u5931\u3002\n\n\n\u6570\u636e\u636e\u5e93\u5e76\u53d1\u6027\u5e26\u6765\u7684\u95ee\u9898\uff1a\n\n\n\u810f\u8bfb\uff08Dirty Reads\uff09\uff1a\u6240\u8c13\u810f\u8bfb\u5c31\u662f\u5bf9\u810f\u6570\u636e\uff08Drity Data\uff09\u7684\u8bfb\u53d6\uff0c\u800c\u810f\u6570\u636e\u6240\u6307\u7684\u5c31\u662f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u5bf9\u4e00\u6761\u8bb0\u5f55\u505a\u4fee\u6539\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u5b8c\u6210\u5e76\u63d0\u4ea4\u4e4b\u524d\uff0c\u8fd9\u6761\u6570\u636e\u662f\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\u7684\uff08\u53ef\u80fd\u63d0\u4ea4\u4e5f\u53ef\u80fd\u56de\u6eda\uff09\uff0c\u8fd9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u6765\u8bfb\u53d6\u8fd9\u6761\u6ca1\u6709\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u5e76\u636e\u6b64\u505a\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u5c31\u4f1a\u4ea7\u751f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u3002\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u810f\u8bfb\u3002\n\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non-Repeatable Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u5148\u540e\u8bfb\u53d6\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u4f46\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u4e0d\u540c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53ef\u91cd\u590d\u8bfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u4e8b\u52a1\u5728\u4e24\u6b21\u8bfb\u53d6\u4e4b\u95f4\u8be5\u6570\u636e\u88ab\u5176\u5b83\u4e8b\u52a1\u6240\u4fee\u6539\u3002\n\u5e7b\u8bfb\uff08Phantom Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u6309\u76f8\u540c\u7684\u67e5\u8be2\u6761\u4ef6\u91cd\u65b0\u8bfb\u53d6\u4ee5\u524d\u68c0\u7d22\u8fc7\u7684\u6570\u636e\uff0c\u5374\u53d1\u73b0\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165\u4e86\u6ee1\u8db3\u5176\u67e5\u8be2\u6761\u4ef6\u7684\u65b0\u6570\u636e\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c31\u79f0\u4e3a\u5e7b\u8bfb\u3002\n\n\n\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b\n\n\n\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u4e3b\u8981\u5206\u4e3a\u56db\u7ea7\uff0c\u9694\u79bb\u7ea7\u522b\u8d8a\u9ad8\uff0c\u5e76\u53d1\u6027\u5c31\u8d8a\u4f4e\uff0c\u4e00\u81f4\u6027\u5c31\u8d8a\u9ad8\u3002\n\n\n1\u3001\u8bfb\u672a\u63d0\u4ea4 \uff08Read UnCommited\uff09\n\n\n\u8fd9\u662f\u6570\u636e\u5e93\u6700\u5f31\u7684\u9694\u79bb\u7ea7\u522b\uff08\u5b8c\u5168\u4e0d\u9694\u79bb\uff09\uff0c\u5b58\u5728\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u7684\u8bf8\u591a\u95ee\u9898\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n\n\u7531\u4e8e\u4e8b\u52a1B\u8bfb\u53d6\u4e86\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u4e00\u65e6\u56de\u6eda\uff0c\u4e8b\u52a1B\u8bfb\u53d6\u7684\u6570\u636e\u5c31\u662f\u6709\u95ee\u9898\u7684\u3002\n\n\n2\u3001\u8bfb\u5df2\u63d0\u4ea4\uff08Read Commited\uff09\n\n\n\u8fd9\u4e2a\u7ea7\u522b\u4e0d\u5141\u8bb8\u4e8b\u52a1B\u8bfb\u53d6\u4e8b\u52a1A\u8fd8\u672a\u63d0\u4ea4\u7684update\u64cd\u4f5c\u66f4\u65b0\u540e\u7684\u6570\u636e\uff08\u5bf9\u4e8e\u4e8b\u52a1A\u7684insert\u64cd\u4f5c\uff0c\u5728\u672a\u63d0\u4ea4\u4e4b\u524d\uff0c\u5bf9\u4e8b\u52a1B\u8fd8\u662f\u53ef\u89c1\u7684\uff09\u3002\u907f\u514d\u4e86\u810f\u8bfb\uff0c\u4f46\u8fd8\u53ef\u80fd\u51fa\u73b0\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n\n\u8fd9\u91cc\u9762\u4e0d\u4f1a\u51fa\u73b0\u810f\u8bfb\uff0c\u4fdd\u8bc1\u4e8b\u52a1B\u8bfb\u53d6\u7684\u90fd\u662f\u4e8b\u52a1A update\u63d0\u4ea4\u4e4b\u540e\u7684\u6570\u636e\u3002\u4f46\u662f\u4e8b\u52a1\u4e4b\u95f4\u8fd8\u662f\u4f1a\u5b58\u5728\u4e92\u76f8\u5f71\u54cd\u7684\u60c5\u51b5\uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09\uff0c\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n\n\n\u4e8b\u52a1A\u548c\u4e8b\u52a1B\u90fd\u662f\u5148\u8bfb\u53d6Price\u7684\u4ef7\u683c\uff0c\u7136\u540e\u5728\u4ef7\u683c\u4e0a\u9762\u51cf\u53bb\u4e00\u5b9a\u7684\u6570\u503c\uff0c\u6211\u4eec\u671f\u671b\u7ed3\u679c\u662f70\uff0c\u4f46\u662f\u5b9e\u9645\u7ed3\u679c\u53ef\u80fd\u662f90\uff0c\u4e5f\u53ef\u80fd\u662f80\u3002\n\n\n3\u3001\u53ef\u91cd\u590d\u8bfb\uff08Repeatable Read\uff09\n\n\n\u6240\u6709\u88abSelect\u83b7\u53d6\u7684\u6570\u636e\u90fd\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e00\u4e2a\u4e8b\u52a1\u524d\u540e\u8bfb\u53d6\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002\u4f46\u662f\u5374\u6ca1\u6709\u529e\u6cd5\u63a7\u5236\u5e7b\u8bfb\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5176\u4ed6\u4e8b\u52a1\u4e0d\u80fd\u66f4\u6539\u6240\u9009\u7684\u6570\u636e\uff0c\u4f46\u662f\u53ef\u4ee5\u589e\u52a0\u6570\u636e\uff0c\u56e0\u4e3a\u524d\u4e00\u4e2a\u4e8b\u52a1\u6ca1\u6709\u8303\u56f4\u9501\u3002\n\n\n\n\u8be5\u9694\u79bb\u7ea7\u522b\u6d88\u9664\u4e86\u4e0d\u53ef\u91cd\u590d\u8bfb\uff0c\u4f46\u56e0\u4e3a\u5bf9\u4e8e\u4e8b\u52a1A\u7684insert\u64cd\u4f5c\u4e8b\u52a1B\u8fd8\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u662f\u8fd8\u662f\u5b58\u5728\u5e7b\u8bfb\u7684\u73b0\u8c61\u3002\n\n\n\n4\u3001\u53ef\u5e8f\u5217\u5316\u8bfb\uff08Serialize\uff09\n\n\n\u4e8b\u52a1\u4e4b\u95f4\u6700\u9ad8\u7684\u9694\u79bb\u754c\u522b\uff0c\u53ea\u80fd\u987a\u5e8f\u7684\u8bfb\u53d6\u6570\u636e\uff0c\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5728\u8bfb\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684\u65f6\u5019\uff0c\u53e6\u5916\u4e00\u4e2a\u4e8b\u52a1\u53ea\u80fd\u6302\u8d77\uff0c\u76f4\u5230\u6b63\u5728\u8bfb\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\uff0c\u6302\u8d77\u7684\u4e8b\u52a1\u624d\u80fd\u6267\u884c\u3002\n\n\n\n\u4ee5\u4e0a\u8fd9\u4e9b\u9694\u79bb\u7ea7\u522b\u90fd\u662f\u5b9a\u4e49\u5728java.sql. Connection\u4e2d\uff0c\u5728\u83b7\u53d6\u8fde\u63a5\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u4f1a\u7528\u6570\u636e\u5e93\u9ed8\u8ba4\u7684\u7ea7\u522b\u6765\u8bbe\u7f6e\u3002\n\n\n\n\nConnection.TRANSACTION_READ_UNCOMMITTED;\n\n\nConnection.TRANSACTION_READ_COMMITTED;\n\n\nConnection.TRANSACTION_REPEATABLE_READ;\n\n\nConnection.TRANSACTION_SERIALIZABLE;\n\n\n\n\n\u5c0f\u7ed3\uff1a\n\n\n\n\u4e8b\u52a1\u7684\u4f20\u64ad\u5c5e\u6027\n\n\n\u6211\u4eec\u5728\u4f7f\u7528Spring\u6216\u8005EJB\u58f0\u660e\u5f0f\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u8fd8\u4f1a\u63a5\u89e6\u5230\u4e8b\u52a1\u7684\u4f20\u64ad\u5c5e\u6027\uff08Propagation\uff09\uff0c\u5728spring\u7684 TransactionDefinition \u7c7b\u91cc\u9762\u8fdb\u884c\u5b9a\u4e49\u3002\u5177\u4f53\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6570\u503c\uff1a\n\n\n\n\nRequired(\u9700\u8981)\n\n\nMandatory(\u5f3a\u5236\u5fc5\u987b)\n\n\nRequiresNew(\u9700\u8981\u65b0\u7684)\n\n\nSupports(\u652f\u6301)\n\n\nNotSupported(\u4e0d\u652f\u6301)\n\n\nNever(\u4e0d\u7528)\n\n\n\n\nRequired\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u5f00\u542f\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u5f00\u542f\u65b0\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u5230\u5f53\u524d\u4e8b\u52a1\u3002\u8fd9\u4e2a\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\u3002\u4f46\u662f\u8981\u6ce8\u610f\u7684\u5c31\u662f\u4e00\u65e6\u4e8b\u52a1\u4e2d\u67d0\u4e00\u4e2a\u65b9\u6cd5\u56de\u6eda\uff0c\u5f53\u524d\u4e8b\u52a1\u4e0a\u4e0b\u6587\u91cc\u9762\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u56de\u6eda\uff0c\u8003\u8651\u5230\u4e0b\u9762\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\n\n\u5047\u8bbeA\u548cB\u7684\u4e8b\u52a1\u90fd\u662fRequired\uff0c\u90a3\u4e48\u5f53\u8c03\u7528MethodA\u7684\u65f6\u5019\uff0c\u5982\u679cmethodB\u56de\u6eda\u4e86\uff0c\u5bf9A\u7684\u4fee\u6539\u4e5f\u5c31\u56de\u6eda\u4e86\u3002\u6240\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u4f1a\u8fbe\u5230\u9884\u671f\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u8bf4A\u4e0d\u53ef\u80fd\u4fee\u6539\u6210\u4e3a99\u3002\n\n\nRequired New\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u5f00\u542f\u65b0\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u5b58\u5728\u4e8b\u52a1\u4e0a\u4e0b\u6587\uff0c\u5c31\u6682\u505c\u5f53\u524d\u4e8b\u52a1\uff0c\u7b49\u5230\u65b0\u4e8b\u52a1\u7ed3\u675f\u4e4b\u540e\uff0c\u518d\u7ee7\u7eed\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\u3002\u5c31\u62ff\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0cmethodB\u7684\u5bf9\u4e8b\u52a1\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5230methodA\u3002\u4e24\u4e2a\u4e8b\u52a1\u4e4b\u95f4\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u3002\u7ecf\u5e38\u53ef\u4ee5\u7528\u5230\u7684\u573a\u666f\u5c31\u662f\u5728\u4e1a\u52a1\u53d1\u751f\u5f02\u5e38\u7684\u65f6\u5019\u53d1\u9001\u77ed\u6d88\u606f\u3002\u5982\u679c\u4e1a\u52a1\u53d1\u751f\u5f02\u5e38\uff0c\u4e1a\u52a1\u56de\u6eda\uff0c\u4f46\u662f\u7531\u4e8e\u53d1\u9001\u6bb5\u6d88\u606f\u662f\u65b0\u7684\u4e8b\u52a1\uff0c\u4e0d\u4f1a\u53d7\u5230\u4e1a\u52a1\u5f02\u5e38\u7684\u5f71\u54cd\u3002\n\n\nMondary\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u52a0\u5165\u5230\u4e8b\u52a1\u91cc\u3002\n\n\nSupport\uff1a\u5f53\u524d\u65b9\u6cd5\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u5230\u4e8b\u52a1\u4e2d\u53bb\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002\n\n\nNot Support\uff1a\u5f53\u524d\u65b9\u6cd5\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u6302\u8d77\u5f53\u524d\u4e8b\u52a1\uff0c\u6267\u884c\u5b8c\u5f53\u524d\u65b9\u6cd5\uff0c\u6062\u590d\u4e8b\u52a1\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u53ea\u662f\u67e5\u8be2\uff0c\u5e76\u4e14\u975e\u5e38\u8017\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528Not Support\uff0c\u907f\u514d\u4e8b\u52a1\u65f6\u95f4\u8d85\u957f\u3002\n\n\nNever\uff1a\u5f53\u524d\u65b9\u6cd5\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002\u8fd9\u79cd\u7528\u7684\u6bd4\u8f83\u5c11\u3002\n\n\nPSCache\u5185\u5b58\u5360\u7528\u4f18\u5316\u5bf9\u4e8e\u652f\u6301\u6e38\u6807\u7684\u6570\u636e\u5e93\uff08Oracle\u3001SQL Server\u3001DB2\u7b49\uff0c\u4e0d\u5305\u62ecMySql\uff09:druid", 
            "title": "db\u4e8b\u52a1"
        }, 
        {
            "location": "/trans/#acid-propagation", 
            "text": "\u6570\u636e\u5e93\u4e8b\u52a1\u7684\u56db\u4e2a\u57fa\u672c\u6027\u8d28\u7b80\u4ecb   \u539f\u5b50\u6027\uff08Atomicity\uff09\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002  \u4e00\u81f4\u6027\uff08Consistency\uff09\uff0c\u5c31\u662f\u5728\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u5bf9\u4e8e\u4e8b\u52a1\u672c\u8eab\u7684\u7528\u610f\u800c\u8a00\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u662f\u4fdd\u6301\u4e00\u81f4\u7684\uff0c\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u662f\u5efa\u7acb\u5728\u539f\u5b50\u6027\u7684\u57fa\u7840\u4e4b\u4e0a\u7684\uff0c\u66f4\u591a\u7684\u7531\u7f16\u7801\u7684\u7a0b\u5e8f\u5458\u4fdd\u8bc1\uff0c\u6700\u7ecf\u5178\u7684\u6848\u4f8b\u662fA\uff0cB\u5e10\u53f7\u4e4b\u95f4\u7684\u8f6c\u8d26\u3002  \u9694\u79bb\u6027\uff08Isolation\uff09\uff0c\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u662f\u6307\u4e8b\u52a1\u548c\u4e8b\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u53ef\u89c1\u6027\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u9700\u8981\u8be6\u7ec6\u4ecb\u7ecd\u7684\u5730\u65b9\u3002\u6570\u636e\u5e93\u5b9a\u4e49\u4e86\u5404\u79cd\u9694\u79bb\u7ea7\u522b\uff0c\u4ee5\u5728\u5e76\u53d1\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u4e2d\u6743\u8861\u3002  \u6301\u4e45\u6027\uff08Durability\uff09\uff0c\u4e8b\u52a1\u5b8c\u6210\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5c06\u6301\u4e45\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u800c\u4e22\u5931\u3002   \u6570\u636e\u636e\u5e93\u5e76\u53d1\u6027\u5e26\u6765\u7684\u95ee\u9898\uff1a   \u810f\u8bfb\uff08Dirty Reads\uff09\uff1a\u6240\u8c13\u810f\u8bfb\u5c31\u662f\u5bf9\u810f\u6570\u636e\uff08Drity Data\uff09\u7684\u8bfb\u53d6\uff0c\u800c\u810f\u6570\u636e\u6240\u6307\u7684\u5c31\u662f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u5bf9\u4e00\u6761\u8bb0\u5f55\u505a\u4fee\u6539\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u5b8c\u6210\u5e76\u63d0\u4ea4\u4e4b\u524d\uff0c\u8fd9\u6761\u6570\u636e\u662f\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\u7684\uff08\u53ef\u80fd\u63d0\u4ea4\u4e5f\u53ef\u80fd\u56de\u6eda\uff09\uff0c\u8fd9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u6765\u8bfb\u53d6\u8fd9\u6761\u6ca1\u6709\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u5e76\u636e\u6b64\u505a\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u5c31\u4f1a\u4ea7\u751f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u3002\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u810f\u8bfb\u3002  \u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non-Repeatable Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u5148\u540e\u8bfb\u53d6\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u4f46\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u4e0d\u540c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53ef\u91cd\u590d\u8bfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u4e8b\u52a1\u5728\u4e24\u6b21\u8bfb\u53d6\u4e4b\u95f4\u8be5\u6570\u636e\u88ab\u5176\u5b83\u4e8b\u52a1\u6240\u4fee\u6539\u3002  \u5e7b\u8bfb\uff08Phantom Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u6309\u76f8\u540c\u7684\u67e5\u8be2\u6761\u4ef6\u91cd\u65b0\u8bfb\u53d6\u4ee5\u524d\u68c0\u7d22\u8fc7\u7684\u6570\u636e\uff0c\u5374\u53d1\u73b0\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165\u4e86\u6ee1\u8db3\u5176\u67e5\u8be2\u6761\u4ef6\u7684\u65b0\u6570\u636e\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c31\u79f0\u4e3a\u5e7b\u8bfb\u3002   \u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b  \u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u4e3b\u8981\u5206\u4e3a\u56db\u7ea7\uff0c\u9694\u79bb\u7ea7\u522b\u8d8a\u9ad8\uff0c\u5e76\u53d1\u6027\u5c31\u8d8a\u4f4e\uff0c\u4e00\u81f4\u6027\u5c31\u8d8a\u9ad8\u3002  \u6570\u636e\u5e93\u4e8b\u52a1\u7684\u56db\u4e2a\u57fa\u672c\u6027\u8d28\u7b80\u4ecb  \u539f\u5b50\u6027\uff08Atomicity\uff09\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\n\u4e00\u81f4\u6027\uff08Consistency\uff09\uff0c\u5c31\u662f\u5728\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u5bf9\u4e8e\u4e8b\u52a1\u672c\u8eab\u7684\u7528\u610f\u800c\u8a00\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u662f\u4fdd\u6301\u4e00\u81f4\u7684\uff0c\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027\u662f\u5efa\u7acb\u5728\u539f\u5b50\u6027\u7684\u57fa\u7840\u4e4b\u4e0a\u7684\uff0c\u66f4\u591a\u7684\u7531\u7f16\u7801\u7684\u7a0b\u5e8f\u5458\u4fdd\u8bc1\uff0c\u6700\u7ecf\u5178\u7684\u6848\u4f8b\u662fA\uff0cB\u5e10\u53f7\u4e4b\u95f4\u7684\u8f6c\u8d26\u3002\n\u9694\u79bb\u6027\uff08Isolation\uff09\uff0c\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u662f\u6307\u4e8b\u52a1\u548c\u4e8b\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u53ef\u89c1\u6027\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u9700\u8981\u8be6\u7ec6\u4ecb\u7ecd\u7684\u5730\u65b9\u3002\u6570\u636e\u5e93\u5b9a\u4e49\u4e86\u5404\u79cd\u9694\u79bb\u7ea7\u522b\uff0c\u4ee5\u5728\u5e76\u53d1\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u4e2d\u6743\u8861\u3002\n\u6301\u4e45\u6027\uff08Durability\uff09\uff0c\u4e8b\u52a1\u5b8c\u6210\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5c06\u6301\u4e45\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u800c\u4e22\u5931\u3002  \u6570\u636e\u636e\u5e93\u5e76\u53d1\u6027\u5e26\u6765\u7684\u95ee\u9898\uff1a  \u810f\u8bfb\uff08Dirty Reads\uff09\uff1a\u6240\u8c13\u810f\u8bfb\u5c31\u662f\u5bf9\u810f\u6570\u636e\uff08Drity Data\uff09\u7684\u8bfb\u53d6\uff0c\u800c\u810f\u6570\u636e\u6240\u6307\u7684\u5c31\u662f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u5bf9\u4e00\u6761\u8bb0\u5f55\u505a\u4fee\u6539\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u5b8c\u6210\u5e76\u63d0\u4ea4\u4e4b\u524d\uff0c\u8fd9\u6761\u6570\u636e\u662f\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\u7684\uff08\u53ef\u80fd\u63d0\u4ea4\u4e5f\u53ef\u80fd\u56de\u6eda\uff09\uff0c\u8fd9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u6765\u8bfb\u53d6\u8fd9\u6761\u6ca1\u6709\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u5e76\u636e\u6b64\u505a\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u5c31\u4f1a\u4ea7\u751f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u3002\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u810f\u8bfb\u3002\n\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non-Repeatable Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u5148\u540e\u8bfb\u53d6\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u4f46\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u4e0d\u540c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53ef\u91cd\u590d\u8bfb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u4e8b\u52a1\u5728\u4e24\u6b21\u8bfb\u53d6\u4e4b\u95f4\u8be5\u6570\u636e\u88ab\u5176\u5b83\u4e8b\u52a1\u6240\u4fee\u6539\u3002\n\u5e7b\u8bfb\uff08Phantom Reads\uff09\uff1a\u4e00\u4e2a\u4e8b\u52a1\u6309\u76f8\u540c\u7684\u67e5\u8be2\u6761\u4ef6\u91cd\u65b0\u8bfb\u53d6\u4ee5\u524d\u68c0\u7d22\u8fc7\u7684\u6570\u636e\uff0c\u5374\u53d1\u73b0\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165\u4e86\u6ee1\u8db3\u5176\u67e5\u8be2\u6761\u4ef6\u7684\u65b0\u6570\u636e\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c31\u79f0\u4e3a\u5e7b\u8bfb\u3002  \u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b  \u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u4e3b\u8981\u5206\u4e3a\u56db\u7ea7\uff0c\u9694\u79bb\u7ea7\u522b\u8d8a\u9ad8\uff0c\u5e76\u53d1\u6027\u5c31\u8d8a\u4f4e\uff0c\u4e00\u81f4\u6027\u5c31\u8d8a\u9ad8\u3002  1\u3001\u8bfb\u672a\u63d0\u4ea4 \uff08Read UnCommited\uff09  \u8fd9\u662f\u6570\u636e\u5e93\u6700\u5f31\u7684\u9694\u79bb\u7ea7\u522b\uff08\u5b8c\u5168\u4e0d\u9694\u79bb\uff09\uff0c\u5b58\u5728\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u7684\u8bf8\u591a\u95ee\u9898\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  \u7531\u4e8e\u4e8b\u52a1B\u8bfb\u53d6\u4e86\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u4e00\u65e6\u56de\u6eda\uff0c\u4e8b\u52a1B\u8bfb\u53d6\u7684\u6570\u636e\u5c31\u662f\u6709\u95ee\u9898\u7684\u3002  2\u3001\u8bfb\u5df2\u63d0\u4ea4\uff08Read Commited\uff09  \u8fd9\u4e2a\u7ea7\u522b\u4e0d\u5141\u8bb8\u4e8b\u52a1B\u8bfb\u53d6\u4e8b\u52a1A\u8fd8\u672a\u63d0\u4ea4\u7684update\u64cd\u4f5c\u66f4\u65b0\u540e\u7684\u6570\u636e\uff08\u5bf9\u4e8e\u4e8b\u52a1A\u7684insert\u64cd\u4f5c\uff0c\u5728\u672a\u63d0\u4ea4\u4e4b\u524d\uff0c\u5bf9\u4e8b\u52a1B\u8fd8\u662f\u53ef\u89c1\u7684\uff09\u3002\u907f\u514d\u4e86\u810f\u8bfb\uff0c\u4f46\u8fd8\u53ef\u80fd\u51fa\u73b0\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u3002\u793a\u4f8b\u5982\u4e0b\uff1a  \u8fd9\u91cc\u9762\u4e0d\u4f1a\u51fa\u73b0\u810f\u8bfb\uff0c\u4fdd\u8bc1\u4e8b\u52a1B\u8bfb\u53d6\u7684\u90fd\u662f\u4e8b\u52a1A update\u63d0\u4ea4\u4e4b\u540e\u7684\u6570\u636e\u3002\u4f46\u662f\u4e8b\u52a1\u4e4b\u95f4\u8fd8\u662f\u4f1a\u5b58\u5728\u4e92\u76f8\u5f71\u54cd\u7684\u60c5\u51b5\uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09\uff0c\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a  \u4e8b\u52a1A\u548c\u4e8b\u52a1B\u90fd\u662f\u5148\u8bfb\u53d6Price\u7684\u4ef7\u683c\uff0c\u7136\u540e\u5728\u4ef7\u683c\u4e0a\u9762\u51cf\u53bb\u4e00\u5b9a\u7684\u6570\u503c\uff0c\u6211\u4eec\u671f\u671b\u7ed3\u679c\u662f70\uff0c\u4f46\u662f\u5b9e\u9645\u7ed3\u679c\u53ef\u80fd\u662f90\uff0c\u4e5f\u53ef\u80fd\u662f80\u3002  3\u3001\u53ef\u91cd\u590d\u8bfb\uff08Repeatable Read\uff09  \u6240\u6709\u88abSelect\u83b7\u53d6\u7684\u6570\u636e\u90fd\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e00\u4e2a\u4e8b\u52a1\u524d\u540e\u8bfb\u53d6\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002\u4f46\u662f\u5374\u6ca1\u6709\u529e\u6cd5\u63a7\u5236\u5e7b\u8bfb\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5176\u4ed6\u4e8b\u52a1\u4e0d\u80fd\u66f4\u6539\u6240\u9009\u7684\u6570\u636e\uff0c\u4f46\u662f\u53ef\u4ee5\u589e\u52a0\u6570\u636e\uff0c\u56e0\u4e3a\u524d\u4e00\u4e2a\u4e8b\u52a1\u6ca1\u6709\u8303\u56f4\u9501\u3002  \u8be5\u9694\u79bb\u7ea7\u522b\u6d88\u9664\u4e86\u4e0d\u53ef\u91cd\u590d\u8bfb\uff0c\u4f46\u56e0\u4e3a\u5bf9\u4e8e\u4e8b\u52a1A\u7684insert\u64cd\u4f5c\u4e8b\u52a1B\u8fd8\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u662f\u8fd8\u662f\u5b58\u5728\u5e7b\u8bfb\u7684\u73b0\u8c61\u3002  4\u3001\u53ef\u5e8f\u5217\u5316\u8bfb\uff08Serialize\uff09  \u4e8b\u52a1\u4e4b\u95f4\u6700\u9ad8\u7684\u9694\u79bb\u754c\u522b\uff0c\u53ea\u80fd\u987a\u5e8f\u7684\u8bfb\u53d6\u6570\u636e\uff0c\u5f53\u4e00\u4e2a\u4e8b\u52a1\u5728\u8bfb\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684\u65f6\u5019\uff0c\u53e6\u5916\u4e00\u4e2a\u4e8b\u52a1\u53ea\u80fd\u6302\u8d77\uff0c\u76f4\u5230\u6b63\u5728\u8bfb\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684\u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\uff0c\u6302\u8d77\u7684\u4e8b\u52a1\u624d\u80fd\u6267\u884c\u3002  \u4ee5\u4e0a\u8fd9\u4e9b\u9694\u79bb\u7ea7\u522b\u90fd\u662f\u5b9a\u4e49\u5728java.sql. Connection\u4e2d\uff0c\u5728\u83b7\u53d6\u8fde\u63a5\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u4f1a\u7528\u6570\u636e\u5e93\u9ed8\u8ba4\u7684\u7ea7\u522b\u6765\u8bbe\u7f6e\u3002   Connection.TRANSACTION_READ_UNCOMMITTED;  Connection.TRANSACTION_READ_COMMITTED;  Connection.TRANSACTION_REPEATABLE_READ;  Connection.TRANSACTION_SERIALIZABLE;   \u5c0f\u7ed3\uff1a  \u4e8b\u52a1\u7684\u4f20\u64ad\u5c5e\u6027  \u6211\u4eec\u5728\u4f7f\u7528Spring\u6216\u8005EJB\u58f0\u660e\u5f0f\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u8fd8\u4f1a\u63a5\u89e6\u5230\u4e8b\u52a1\u7684\u4f20\u64ad\u5c5e\u6027\uff08Propagation\uff09\uff0c\u5728spring\u7684 TransactionDefinition \u7c7b\u91cc\u9762\u8fdb\u884c\u5b9a\u4e49\u3002\u5177\u4f53\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6570\u503c\uff1a   Required(\u9700\u8981)  Mandatory(\u5f3a\u5236\u5fc5\u987b)  RequiresNew(\u9700\u8981\u65b0\u7684)  Supports(\u652f\u6301)  NotSupported(\u4e0d\u652f\u6301)  Never(\u4e0d\u7528)   Required\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u5f00\u542f\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u5f00\u542f\u65b0\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u5230\u5f53\u524d\u4e8b\u52a1\u3002\u8fd9\u4e2a\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\u3002\u4f46\u662f\u8981\u6ce8\u610f\u7684\u5c31\u662f\u4e00\u65e6\u4e8b\u52a1\u4e2d\u67d0\u4e00\u4e2a\u65b9\u6cd5\u56de\u6eda\uff0c\u5f53\u524d\u4e8b\u52a1\u4e0a\u4e0b\u6587\u91cc\u9762\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u56de\u6eda\uff0c\u8003\u8651\u5230\u4e0b\u9762\u4e00\u4e2a\u4f8b\u5b50\uff1a  \u5047\u8bbeA\u548cB\u7684\u4e8b\u52a1\u90fd\u662fRequired\uff0c\u90a3\u4e48\u5f53\u8c03\u7528MethodA\u7684\u65f6\u5019\uff0c\u5982\u679cmethodB\u56de\u6eda\u4e86\uff0c\u5bf9A\u7684\u4fee\u6539\u4e5f\u5c31\u56de\u6eda\u4e86\u3002\u6240\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u4f1a\u8fbe\u5230\u9884\u671f\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u8bf4A\u4e0d\u53ef\u80fd\u4fee\u6539\u6210\u4e3a99\u3002  Required New\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u5f00\u542f\u65b0\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u5b58\u5728\u4e8b\u52a1\u4e0a\u4e0b\u6587\uff0c\u5c31\u6682\u505c\u5f53\u524d\u4e8b\u52a1\uff0c\u7b49\u5230\u65b0\u4e8b\u52a1\u7ed3\u675f\u4e4b\u540e\uff0c\u518d\u7ee7\u7eed\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\u3002\u5c31\u62ff\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0cmethodB\u7684\u5bf9\u4e8b\u52a1\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5230methodA\u3002\u4e24\u4e2a\u4e8b\u52a1\u4e4b\u95f4\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u3002\u7ecf\u5e38\u53ef\u4ee5\u7528\u5230\u7684\u573a\u666f\u5c31\u662f\u5728\u4e1a\u52a1\u53d1\u751f\u5f02\u5e38\u7684\u65f6\u5019\u53d1\u9001\u77ed\u6d88\u606f\u3002\u5982\u679c\u4e1a\u52a1\u53d1\u751f\u5f02\u5e38\uff0c\u4e1a\u52a1\u56de\u6eda\uff0c\u4f46\u662f\u7531\u4e8e\u53d1\u9001\u6bb5\u6d88\u606f\u662f\u65b0\u7684\u4e8b\u52a1\uff0c\u4e0d\u4f1a\u53d7\u5230\u4e1a\u52a1\u5f02\u5e38\u7684\u5f71\u54cd\u3002  Mondary\uff1a\u5f53\u524d\u65b9\u6cd5\u5fc5\u987b\u8981\u6c42\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u52a0\u5165\u5230\u4e8b\u52a1\u91cc\u3002  Support\uff1a\u5f53\u524d\u65b9\u6cd5\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u5230\u4e8b\u52a1\u4e2d\u53bb\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002  Not Support\uff1a\u5f53\u524d\u65b9\u6cd5\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u6302\u8d77\u5f53\u524d\u4e8b\u52a1\uff0c\u6267\u884c\u5b8c\u5f53\u524d\u65b9\u6cd5\uff0c\u6062\u590d\u4e8b\u52a1\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u53ea\u662f\u67e5\u8be2\uff0c\u5e76\u4e14\u975e\u5e38\u8017\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528Not Support\uff0c\u907f\u514d\u4e8b\u52a1\u65f6\u95f4\u8d85\u957f\u3002  Never\uff1a\u5f53\u524d\u65b9\u6cd5\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002\u8fd9\u79cd\u7528\u7684\u6bd4\u8f83\u5c11\u3002  PSCache\u5185\u5b58\u5360\u7528\u4f18\u5316\u5bf9\u4e8e\u652f\u6301\u6e38\u6807\u7684\u6570\u636e\u5e93\uff08Oracle\u3001SQL Server\u3001DB2\u7b49\uff0c\u4e0d\u5305\u62ecMySql\uff09:druid", 
            "title": "ACID Propagation"
        }, 
        {
            "location": "/dbpool/", 
            "text": "\u8fde\u63a5\u6c60\u914d\u7f6e\n\n\n\u6b63\u786e\u914d\u7f6eDBCP\u9632\u6b62\u6570\u636e\u5e93\u91cd\u542f\u5f15\u8d77\u7684\u8bbf\u95ee\u9519\u8bef\n\n\n\u5728java web \u5e94\u7528\u4e2d\u4f7f\u7528dbcp\u505a\u4e3a\u8fde\u63a5\u6c60\uff0c\u5f53\u6570\u636e\u5e93\u91cd\u542f\u6216\u6570\u636e\u5e93\u8fde\u63a5\u8d85\u8fc7\u8bbe\u7f6e\u7684\u6700\u5927timemout\u65f6\u95f4\uff0c\u6570\u636e\u5e93\u4f1a\u5f3a\u884c\u65ad\u5f00\u5df2\u6709\u7684\u94fe\u63a5\uff0c\u6b64\u65f6\u5f53web\u7a0b\u5e8f\u8bbf\u95ee\u6570\u636e\u5e93\u65f6\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u5927\u81f4\u7684\u9519\u8bef\u4fe1\u606fjava.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost\uff0c\u539f\u56e0\u662f\u6570\u636e\u5e93\u8fd9\u8fb9\u5df2\u6709\u7684\u8fde\u63a5\u5f3a\u884c\u65ad\u5f00\uff0c\u800c\u8fde\u63a5\u6c60\u4e2d\u4e0d\u77e5\u9053\u5df2\u7ecf\u65ad\u5f00\uff0c\u8fd8\u662f\u4ece\u8fde\u63a5\u6c60\u53d6\u51fa\u6570\u636e\u5e93\u8fde\u63a5\u4ea4\u7ed9\u7a0b\u5e8f\u53bb\u6267\u884c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u6240\u4ee5\u5bfc\u81f4\u51fa\u9519\u3002\n\n\nmysql\u7684\u9ed8\u8ba4\u6700\u5927timeout\u65f6\u95f4\u662f8\u5c0f\u65f6\uff0c\u5bf9\u7a7a\u95f2\u8d85\u8fc78\u5c0f\u65f6\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4f1a\u5f3a\u884c\u65ad\u5f00\u3002timeout\u6709\u4e24\u79cd\uff0c\u4e00\u4e2a\u662f\u975e\u4ea4\u4e92\u5f0f\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4wait_timeout\uff0c\u53e6\u4e00\u4e2a\u662f\u4ea4\u4e92\u5f0f\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4interactive_time\uff0c\u4ea4\u4e92\u8fde\u63a5\u5982mysql gui tool\u4e2d\u7684\u8fde\u63a5\u3002\u4e00\u822c\u60c5\u51b5\u4e0binteractive_timeout\u7684\u8bbe\u7f6e\u5c06\u8981\u5bf9\u4f60\u7684web \u5e94\u7528\u6ca1\u6709\u591a\u5927\u7684\u5f71\u54cd\u3002wait_timeout\u7684\u65f6\u95f4\u8bbe\u7f6e\u592a\u5c0f\u8bdd\u4f1a\u5bfc\u81f4\u8fde\u63a5\u5173\u95ed\u5f88\u5feb\uff0c\u4ece\u800c\u4f7f\u4e00\u4e9b\u6301\u4e45\u8fde\u63a5\u4e0d\u8d77\u4f5c\u7528\uff0c\u53cd\u4e4b\u8bbe\u7f6e\u8fc7\u5927\uff0c\u5bb9\u6613\u9020\u6210\u8fde\u63a5\u6253\u5f00\u65f6\u95f4\u8fc7\u957f\uff0c\u5728show processlist\u65f6\uff0c\u80fd\u770b\u5230\u592a\u591a\u7684sleep\u72b6\u6001\u7684\u8fde\u63a5\uff0c\u4ece\u800c\u9020\u6210too many connections\u9519\u8bef\u3002\u4fee\u6539wait_timeout\u53ef\u4ee5\u5728my.cnf\u7684mysqld\u6bb5\u4e2d\u8bbe\u7f6e\u3002\n\n\n\u53ef\u4ee5\u901a\u8fc7dbcp\u7684\u914d\u7f6e\u6765\u89e3\u51b3\u4e0a\u8ff0\u7684\u62a5\u9519\u3002\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u5f0f\u3002\n\n\n\u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7\u8bbe\u7f6evalidationQuery\uff0c\u4f8b\u5982:\n\n\nproperty name=\"validationQuery\"\n\n    \nvalue\nselect 1\n/value\n\n\n/property\n\n\n\n\n\u4f7f\u7528\u4e0a\u8ff0\u914d\u7f6e\uff0c\u8fde\u63a5\u6c60\u5728\u8fd4\u56de\u6570\u636e\u5e93\u8fde\u63a5\u7ed9\u7533\u8bf7\u8005\u65f6\u4f1a\u591a\u6267\u884c\u4e00\u6761sql\u8bed\u53e5\u6765\u786e\u4fdd\u8be5\u8fde\u63a5\u7684\u6709\u6548\u6027\u3002\u5982\u679c\u6570\u636e\u5e93\u65b9\u5df2\u7ecf\u5173\u95ed\u4e86\uff0c\u8fde\u63a5\u6c60\u4f1a\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\u5e76\u8fd4\u56de\u7ed9\u7533\u8bf7\u8005\u3002\u901a\u8fc7\u6d4b\u8bd5\u4f3c\u4e4e\u8ddftestWhileIdle\u6ca1\u6709\u5173\u7cfb\uff0c\u4e0d\u7ba1\u5176\u662ftrue\u6216false\u90fd\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\n\u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7\u914d\u7f6etimeBetweenEvictionRunsMillis\u548cminEvictableIdleTimeMillis\uff0c\u4f8b\u5982\uff1a\n\n\nproperty name=\"minEvictableIdleTimeMillis\"\n\n    \nvalue\n60000\n/value\n\n\n/property\n\n\nproperty name=\"timeBetweenEvictionRunsMillis\"\n\n    \nvalue\n10000\n/value\n\n\n/property\n\n\n\n\n\u5728\u6784\u9020GenericObjectPool [BasicDataSource\u5728\u5176createDataSource () \u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u4f7f\u7528GenericObjectPool]\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u5185\u5d4c\u7c7bEvictor\uff0c\u5b9e\u73b0\u81eaRunnable\u63a5\u53e3\u3002\u5982\u679ctimeBetweenEvictionRunsMillis\u5927\u4e8e0\uff0c\u6bcf\u8fc7 timeBetweenEvictionRunsMillis\u6beb\u79d2Evictor\u4f1a\u8c03\u7528evict()\u65b9\u6cd5\uff0c\u68c0\u67e5\u8fde\u63a5\u6c60\u4e2d\u7684\u8fde\u63a5\u7684\u95f2\u7f6e\u65f6\u95f4\u662f\u5426\u5927\u4e8e minEvictableIdleTimeMillis\u6beb\u79d2\uff08_minEvictableIdleTimeMillis\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\u5219\u5ffd\u7565\uff0c\u9ed8\u8ba4\u4e3a30\u5206\u949f\uff09\uff0c\u662f\u5219\u9500\u6bc1\u6b64\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528ensureMinIdle\u65b9\u6cd5\u68c0\u67e5\u786e\u4fdd\u6c60\u4e2d\u5bf9\u8c61\u4e2a\u6570\u4e0d\u5c0f\u4e8e_minIdle\u3002\u5982\u679c\u8fde\u63a5\u6c60\u7684\u8fde\u63a5\u6570\u5c0f\u4e8e\u6700\u5c0f\u7a7a\u95f2\u8fde\u63a5\u6570\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u540c\u65f6\u68c0\u67e5\u8fde\u63a5\u6c60\u7684\u8fde\u63a5\u662f\u5426\u5c0f\u4e8emaxIdle\uff0c\u662f\u5219\u628a\u521a\u521b\u5efa\u7684\u8fde\u63a5\u653e\u5165\u8fde\u63a5\u6c60\u4e2d\uff0c\u5426\u5219\u9500\u6bc1\u6b64\u5bf9\u8c61\u3002\n\n\n\u4e0a\u8ff0\u65b9\u5f0f\u4e00\u80fd\u786e\u4fdd\u4e0d\u51fa\u73b0\u672c\u6587\u5f00\u5934\u63d0\u5230\u7684\u9519\u8bef\uff0c\u4f46\u662f\u4e0d\u597d\u7684\u65b9\u9762\u662f\u6bcf\u6b21\u6267\u884csql\u65f6\u90fd\u4f1a\u989d\u5916\u6267\u884c\u4e00\u6761\u63d0\u4f9b\u7684validationQuery sql\uff1b\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5728\u6570\u636e\u5e93\u91cd\u542f\u540eminEvictableIdleTimeMillis\u6beb\u79d2\u524d\u8bbf\u95eeweb\u5e94\u7528\uff0c\u8fde\u63a5\u6570\u636e\u5e93\u4f7f\u7528\u7684\u8fd8\u662f\u8fde\u63a5\u6c60\u4e2d\u8001\u7684\u8fde\u63a5\uff0c\u6240\u4ee5\u8fd8\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7684\u9519\u8bef\uff0ctimeBetweenEvictionRunsMillis\u548cminEvictableIdleTimeMillis\u4e5f\u4e0d\u5b9c\u8bbe\u7f6e\u8fc7\u5c0f\uff0c\u4f1a\u52a0\u91cd\u7cfb\u7edf\u5f00\u9500\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\u6765\u8003\u8651\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u3002\u5bf9\u4e8e\u6570\u636e\u5e93\u53ef\u80fd\u4f1a\u7ecf\u5e38\u91cd\u542f\uff0cweb\u5e94\u7528\u548c\u6570\u636e\u5e93\u673a\u5668\u7684\u7f51\u7edc\u8fde\u63a5\u4e0d\u7a33\u5b9a\uff0c\u53ef\u4ee5\u91c7\u53d6\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u3002\u7531\u4e8emysql\u7684\u9ed8\u8ba4\u6700\u5927\u7a7a\u95f2\u65f6\u95f48\u5c0f\u65f6\uff0c\u6240\u4ee5\u53ea\u8981\u628aminEvictableIdleTimeMillis\u8bbe\u7f6e\u5c0f\u4e8e\u6b64\u503c\u5373\u53ef\u3002\u4f8b\u5982\u914d\u7f6e\u6bcf\u5341\u5206\u949f\u68c0\u67e5\u8d85\u8fc7\u7a7a\u95f2\u4e00\u4e2a\u5c0f\u65f6\u7684\u8fde\u63a5\n\n\nproperty name=\"minEvictableIdleTimeMillis\"\n\n    \nvalue\n3600000\n/value\n\n\n/property\n\n\nproperty name=\"timeBetweenEvictionRunsMillis\"\n\n    \nvalue\n600000\n/value\n\n\n/property", 
            "title": "\u8fde\u63a5\u6c60"
        }, 
        {
            "location": "/dbpool/#_1", 
            "text": "\u6b63\u786e\u914d\u7f6eDBCP\u9632\u6b62\u6570\u636e\u5e93\u91cd\u542f\u5f15\u8d77\u7684\u8bbf\u95ee\u9519\u8bef  \u5728java web \u5e94\u7528\u4e2d\u4f7f\u7528dbcp\u505a\u4e3a\u8fde\u63a5\u6c60\uff0c\u5f53\u6570\u636e\u5e93\u91cd\u542f\u6216\u6570\u636e\u5e93\u8fde\u63a5\u8d85\u8fc7\u8bbe\u7f6e\u7684\u6700\u5927timemout\u65f6\u95f4\uff0c\u6570\u636e\u5e93\u4f1a\u5f3a\u884c\u65ad\u5f00\u5df2\u6709\u7684\u94fe\u63a5\uff0c\u6b64\u65f6\u5f53web\u7a0b\u5e8f\u8bbf\u95ee\u6570\u636e\u5e93\u65f6\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u5927\u81f4\u7684\u9519\u8bef\u4fe1\u606fjava.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost\uff0c\u539f\u56e0\u662f\u6570\u636e\u5e93\u8fd9\u8fb9\u5df2\u6709\u7684\u8fde\u63a5\u5f3a\u884c\u65ad\u5f00\uff0c\u800c\u8fde\u63a5\u6c60\u4e2d\u4e0d\u77e5\u9053\u5df2\u7ecf\u65ad\u5f00\uff0c\u8fd8\u662f\u4ece\u8fde\u63a5\u6c60\u53d6\u51fa\u6570\u636e\u5e93\u8fde\u63a5\u4ea4\u7ed9\u7a0b\u5e8f\u53bb\u6267\u884c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u6240\u4ee5\u5bfc\u81f4\u51fa\u9519\u3002  mysql\u7684\u9ed8\u8ba4\u6700\u5927timeout\u65f6\u95f4\u662f8\u5c0f\u65f6\uff0c\u5bf9\u7a7a\u95f2\u8d85\u8fc78\u5c0f\u65f6\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4f1a\u5f3a\u884c\u65ad\u5f00\u3002timeout\u6709\u4e24\u79cd\uff0c\u4e00\u4e2a\u662f\u975e\u4ea4\u4e92\u5f0f\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4wait_timeout\uff0c\u53e6\u4e00\u4e2a\u662f\u4ea4\u4e92\u5f0f\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4interactive_time\uff0c\u4ea4\u4e92\u8fde\u63a5\u5982mysql gui tool\u4e2d\u7684\u8fde\u63a5\u3002\u4e00\u822c\u60c5\u51b5\u4e0binteractive_timeout\u7684\u8bbe\u7f6e\u5c06\u8981\u5bf9\u4f60\u7684web \u5e94\u7528\u6ca1\u6709\u591a\u5927\u7684\u5f71\u54cd\u3002wait_timeout\u7684\u65f6\u95f4\u8bbe\u7f6e\u592a\u5c0f\u8bdd\u4f1a\u5bfc\u81f4\u8fde\u63a5\u5173\u95ed\u5f88\u5feb\uff0c\u4ece\u800c\u4f7f\u4e00\u4e9b\u6301\u4e45\u8fde\u63a5\u4e0d\u8d77\u4f5c\u7528\uff0c\u53cd\u4e4b\u8bbe\u7f6e\u8fc7\u5927\uff0c\u5bb9\u6613\u9020\u6210\u8fde\u63a5\u6253\u5f00\u65f6\u95f4\u8fc7\u957f\uff0c\u5728show processlist\u65f6\uff0c\u80fd\u770b\u5230\u592a\u591a\u7684sleep\u72b6\u6001\u7684\u8fde\u63a5\uff0c\u4ece\u800c\u9020\u6210too many connections\u9519\u8bef\u3002\u4fee\u6539wait_timeout\u53ef\u4ee5\u5728my.cnf\u7684mysqld\u6bb5\u4e2d\u8bbe\u7f6e\u3002  \u53ef\u4ee5\u901a\u8fc7dbcp\u7684\u914d\u7f6e\u6765\u89e3\u51b3\u4e0a\u8ff0\u7684\u62a5\u9519\u3002\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u5f0f\u3002  \u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7\u8bbe\u7f6evalidationQuery\uff0c\u4f8b\u5982:  property name=\"validationQuery\" \n     value select 1 /value  /property   \u4f7f\u7528\u4e0a\u8ff0\u914d\u7f6e\uff0c\u8fde\u63a5\u6c60\u5728\u8fd4\u56de\u6570\u636e\u5e93\u8fde\u63a5\u7ed9\u7533\u8bf7\u8005\u65f6\u4f1a\u591a\u6267\u884c\u4e00\u6761sql\u8bed\u53e5\u6765\u786e\u4fdd\u8be5\u8fde\u63a5\u7684\u6709\u6548\u6027\u3002\u5982\u679c\u6570\u636e\u5e93\u65b9\u5df2\u7ecf\u5173\u95ed\u4e86\uff0c\u8fde\u63a5\u6c60\u4f1a\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\u5e76\u8fd4\u56de\u7ed9\u7533\u8bf7\u8005\u3002\u901a\u8fc7\u6d4b\u8bd5\u4f3c\u4e4e\u8ddftestWhileIdle\u6ca1\u6709\u5173\u7cfb\uff0c\u4e0d\u7ba1\u5176\u662ftrue\u6216false\u90fd\u6b63\u5e38\u5de5\u4f5c\u3002  \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7\u914d\u7f6etimeBetweenEvictionRunsMillis\u548cminEvictableIdleTimeMillis\uff0c\u4f8b\u5982\uff1a  property name=\"minEvictableIdleTimeMillis\" \n     value 60000 /value  /property  property name=\"timeBetweenEvictionRunsMillis\" \n     value 10000 /value  /property   \u5728\u6784\u9020GenericObjectPool [BasicDataSource\u5728\u5176createDataSource () \u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u4f7f\u7528GenericObjectPool]\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u5185\u5d4c\u7c7bEvictor\uff0c\u5b9e\u73b0\u81eaRunnable\u63a5\u53e3\u3002\u5982\u679ctimeBetweenEvictionRunsMillis\u5927\u4e8e0\uff0c\u6bcf\u8fc7 timeBetweenEvictionRunsMillis\u6beb\u79d2Evictor\u4f1a\u8c03\u7528evict()\u65b9\u6cd5\uff0c\u68c0\u67e5\u8fde\u63a5\u6c60\u4e2d\u7684\u8fde\u63a5\u7684\u95f2\u7f6e\u65f6\u95f4\u662f\u5426\u5927\u4e8e minEvictableIdleTimeMillis\u6beb\u79d2\uff08_minEvictableIdleTimeMillis\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\u5219\u5ffd\u7565\uff0c\u9ed8\u8ba4\u4e3a30\u5206\u949f\uff09\uff0c\u662f\u5219\u9500\u6bc1\u6b64\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528ensureMinIdle\u65b9\u6cd5\u68c0\u67e5\u786e\u4fdd\u6c60\u4e2d\u5bf9\u8c61\u4e2a\u6570\u4e0d\u5c0f\u4e8e_minIdle\u3002\u5982\u679c\u8fde\u63a5\u6c60\u7684\u8fde\u63a5\u6570\u5c0f\u4e8e\u6700\u5c0f\u7a7a\u95f2\u8fde\u63a5\u6570\uff0c\u5219\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u540c\u65f6\u68c0\u67e5\u8fde\u63a5\u6c60\u7684\u8fde\u63a5\u662f\u5426\u5c0f\u4e8emaxIdle\uff0c\u662f\u5219\u628a\u521a\u521b\u5efa\u7684\u8fde\u63a5\u653e\u5165\u8fde\u63a5\u6c60\u4e2d\uff0c\u5426\u5219\u9500\u6bc1\u6b64\u5bf9\u8c61\u3002  \u4e0a\u8ff0\u65b9\u5f0f\u4e00\u80fd\u786e\u4fdd\u4e0d\u51fa\u73b0\u672c\u6587\u5f00\u5934\u63d0\u5230\u7684\u9519\u8bef\uff0c\u4f46\u662f\u4e0d\u597d\u7684\u65b9\u9762\u662f\u6bcf\u6b21\u6267\u884csql\u65f6\u90fd\u4f1a\u989d\u5916\u6267\u884c\u4e00\u6761\u63d0\u4f9b\u7684validationQuery sql\uff1b\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5728\u6570\u636e\u5e93\u91cd\u542f\u540eminEvictableIdleTimeMillis\u6beb\u79d2\u524d\u8bbf\u95eeweb\u5e94\u7528\uff0c\u8fde\u63a5\u6570\u636e\u5e93\u4f7f\u7528\u7684\u8fd8\u662f\u8fde\u63a5\u6c60\u4e2d\u8001\u7684\u8fde\u63a5\uff0c\u6240\u4ee5\u8fd8\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7684\u9519\u8bef\uff0ctimeBetweenEvictionRunsMillis\u548cminEvictableIdleTimeMillis\u4e5f\u4e0d\u5b9c\u8bbe\u7f6e\u8fc7\u5c0f\uff0c\u4f1a\u52a0\u91cd\u7cfb\u7edf\u5f00\u9500\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\u6765\u8003\u8651\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u3002\u5bf9\u4e8e\u6570\u636e\u5e93\u53ef\u80fd\u4f1a\u7ecf\u5e38\u91cd\u542f\uff0cweb\u5e94\u7528\u548c\u6570\u636e\u5e93\u673a\u5668\u7684\u7f51\u7edc\u8fde\u63a5\u4e0d\u7a33\u5b9a\uff0c\u53ef\u4ee5\u91c7\u53d6\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u3002\u7531\u4e8emysql\u7684\u9ed8\u8ba4\u6700\u5927\u7a7a\u95f2\u65f6\u95f48\u5c0f\u65f6\uff0c\u6240\u4ee5\u53ea\u8981\u628aminEvictableIdleTimeMillis\u8bbe\u7f6e\u5c0f\u4e8e\u6b64\u503c\u5373\u53ef\u3002\u4f8b\u5982\u914d\u7f6e\u6bcf\u5341\u5206\u949f\u68c0\u67e5\u8d85\u8fc7\u7a7a\u95f2\u4e00\u4e2a\u5c0f\u65f6\u7684\u8fde\u63a5  property name=\"minEvictableIdleTimeMillis\" \n     value 3600000 /value  /property  property name=\"timeBetweenEvictionRunsMillis\" \n     value 600000 /value  /property", 
            "title": "\u8fde\u63a5\u6c60\u914d\u7f6e"
        }, 
        {
            "location": "/springboot/", 
            "text": "Springboot \u4f18\u96c5\u505c\u673a\n\n\n\u5982\u4f55\u4f18\u96c5\u5730\u505c\u6b62\u8fd0\u884c\u4e2d\u7684\u5185\u5d4cTomcat\u7684Spring Boot\u5e94\u7528\n\n\n\u4f60\u5f88\u53ef\u80fd\u6839\u636ehttps://spring.io/guides/gs/rest-service/\u642d\u8d77\u4e86\u4e00\u4e2aSpring\u7684Rest\u670d\u52a1\uff0c\u7136\u540e\u6253\u5305\u6210\u4e86jar\u5305\uff0c\u4e0d\u9700\u8981\u5bb9\u5668\u5c31\u53ef\u4ee5\u5728\u751f\u6210\u73af\u5883\u4e0b\u901a\u8fc7\u8fd0\u884cjar\u5305\u542f\u52a8\u4e00\u4e2aWeb\u670d\u52a1\u3002\n\n\n\u4f46\u8fd9\u6837\u7684\u670d\u52a1\u600e\u4e48\u6837\u6b63\u786e\u7684\u505c\u6b62\u5462\uff1f\u6216\u8bb8\u4f60\u53ea\u662f\u7b80\u5355\u7684kill -9\u5bf9\u5e94\u7684\u8fdb\u7a0b\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u66f4\u4f18\u96c5\u7684\u65b9\u5f0f\u3002\n\n\nSpring Boot\u91cc\u9762\u6709\u4e00\u4e2aspring-boot-starter-actuator\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u76d1\u63a7\u548c\u7ba1\u7406Spring Boot\u5e94\u7528\u3002\u5176\u4e2d\u66b4\u9732\u4e86\u5f88\u591aendpoint,\u53ef\u4ee5\u65b9\u4fbf\u7684\u68c0\u6d4b\u5e94\u7528\u7684\u5065\u5eb7\u60c5\u51b5\u3002\u5176\u4e2d\u6709\u4e00\u4e2ashutdown\u7684endpoint\u53ef\u4ee5\u4f18\u96c5\u5730\u505c\u6b62\u5e94\u7528\u3002\n\n\n\n\nMaven\u57fa\u672c\u914d\u7f6e\n\n\n\n\n\u589e\u52a0\u4f9d\u8d56\n\n\ndependency\n\n    \ngroupId\norg.springframework.boot\n/groupId\n\n    \nartifactId\nspring-boot-starter-actuator\n/artifactId\n\n\n/dependency\n\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u542f\u7528shutdown\u7684HTTP\u8bbf\n\n\n#\u542f\u7528 shutdown endpoint\u7684HTTP\u8bbf\u95ee\nendpoints.shutdown.enabled=true\n#\u4e0d\u9700\u8981\u7528\u6237\u540d\u5bc6\u7801\u9a8c\u8bc1 \nendpoints.shutdown.sensitive=false\n\n\n\n\nPOST\u8bf7\u6c42\u5230shutdown\u8def\u5f84\n\n\n\u4ee5\u4e0a\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528curl -X POST localhost:port/shutdown\u53d1\u52a8post\u8bf7\u6c42\uff0c\u5373\u53ef\u4f18\u96c5\u7684\u505c\u6b62\u5e94\u7528\uff1a\n\n\ncurl -X POST localhost:8088/manage/shutdown      \n{\nmessage\n:\nShutting down, bye...\n}\n\n\n\n\n\u5bc6\u7801\u5b89\u5168\u914d\u7f6e\n\n\n\u82e5\u9700\u8981\u5b89\u5168\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u4ee5\u4e0b\u4f9d\u8d56\uff1a\n\n\ndependency\n\n  \ngroupId\norg.springframework.boot\n/groupId\n\n  \nartifactId\nspring-boot-starter-security\n/artifactId\n\n\n/dependency\n\n\n\n\n\n\u5e76\u914d\u7f6e\u4f60\u60f3\u8981\u5bc6\u7801\u9a8c\u8bc1\u7684endpoint\u7684sensitive=true.\n\n\nendpoints.shutdown.sensitive=true\n\n\n\n\n\u5728application.properties\u6587\u4ef6\u914d\u7f6e\u5bf9\u5e94\u7684\u5bc6\u7801\uff1a\n\n\nsecurity.user.name=admin\nsecurity.user.password=secret\nmanagement.security.role=SUPERUSER\n\n\n\n\n\u8def\u5f84/\u7aef\u53e3/ip\u8bbf\u95ee\u9650\u5236\n\n\n\u5f88\u53ef\u80fd\u8fd9\u79cd\u76d1\u63a7\u4f60\u53ea\u9700\u8981\u5728\u672c\u673a\u8bbf\u95ee\uff08\u5982\u53ea\u6709\u672c\u673a\u624d\u80fd\u5173\u95ed\u5e94\u7528\uff09\uff0c\u82e5\u9700\u8981\u5982\u6b64\uff0c\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u7ba1\u7406\u914d\u7f6e\n\n\n##management endpoint\u7684\u8def\u5f84\uff0c\u9ed8\u8ba4\u4e3a/\nmanagement.context-path=/manage\n\n##management endpoint\u7684\u76d1\u542c\u7aef\u53e3\nmanagement.port=8081\n\n##management endpoint\u53ea\u5141\u8bb8\u6765\u81ea\u672c\u673a\u7684\u8fde\u63a5\nmanagement.address=127.0.0.1", 
            "title": "springboot"
        }, 
        {
            "location": "/springboot/#springboot", 
            "text": "\u5982\u4f55\u4f18\u96c5\u5730\u505c\u6b62\u8fd0\u884c\u4e2d\u7684\u5185\u5d4cTomcat\u7684Spring Boot\u5e94\u7528  \u4f60\u5f88\u53ef\u80fd\u6839\u636ehttps://spring.io/guides/gs/rest-service/\u642d\u8d77\u4e86\u4e00\u4e2aSpring\u7684Rest\u670d\u52a1\uff0c\u7136\u540e\u6253\u5305\u6210\u4e86jar\u5305\uff0c\u4e0d\u9700\u8981\u5bb9\u5668\u5c31\u53ef\u4ee5\u5728\u751f\u6210\u73af\u5883\u4e0b\u901a\u8fc7\u8fd0\u884cjar\u5305\u542f\u52a8\u4e00\u4e2aWeb\u670d\u52a1\u3002  \u4f46\u8fd9\u6837\u7684\u670d\u52a1\u600e\u4e48\u6837\u6b63\u786e\u7684\u505c\u6b62\u5462\uff1f\u6216\u8bb8\u4f60\u53ea\u662f\u7b80\u5355\u7684kill -9\u5bf9\u5e94\u7684\u8fdb\u7a0b\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u66f4\u4f18\u96c5\u7684\u65b9\u5f0f\u3002  Spring Boot\u91cc\u9762\u6709\u4e00\u4e2aspring-boot-starter-actuator\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u76d1\u63a7\u548c\u7ba1\u7406Spring Boot\u5e94\u7528\u3002\u5176\u4e2d\u66b4\u9732\u4e86\u5f88\u591aendpoint,\u53ef\u4ee5\u65b9\u4fbf\u7684\u68c0\u6d4b\u5e94\u7528\u7684\u5065\u5eb7\u60c5\u51b5\u3002\u5176\u4e2d\u6709\u4e00\u4e2ashutdown\u7684endpoint\u53ef\u4ee5\u4f18\u96c5\u5730\u505c\u6b62\u5e94\u7528\u3002   Maven\u57fa\u672c\u914d\u7f6e   \u589e\u52a0\u4f9d\u8d56  dependency \n     groupId org.springframework.boot /groupId \n     artifactId spring-boot-starter-actuator /artifactId  /dependency   \u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u542f\u7528shutdown\u7684HTTP\u8bbf  #\u542f\u7528 shutdown endpoint\u7684HTTP\u8bbf\u95ee\nendpoints.shutdown.enabled=true\n#\u4e0d\u9700\u8981\u7528\u6237\u540d\u5bc6\u7801\u9a8c\u8bc1 \nendpoints.shutdown.sensitive=false  POST\u8bf7\u6c42\u5230shutdown\u8def\u5f84  \u4ee5\u4e0a\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528curl -X POST localhost:port/shutdown\u53d1\u52a8post\u8bf7\u6c42\uff0c\u5373\u53ef\u4f18\u96c5\u7684\u505c\u6b62\u5e94\u7528\uff1a  curl -X POST localhost:8088/manage/shutdown      \n{ message : Shutting down, bye... }  \u5bc6\u7801\u5b89\u5168\u914d\u7f6e  \u82e5\u9700\u8981\u5b89\u5168\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u4ee5\u4e0b\u4f9d\u8d56\uff1a  dependency \n   groupId org.springframework.boot /groupId \n   artifactId spring-boot-starter-security /artifactId  /dependency   \u5e76\u914d\u7f6e\u4f60\u60f3\u8981\u5bc6\u7801\u9a8c\u8bc1\u7684endpoint\u7684sensitive=true.  endpoints.shutdown.sensitive=true  \u5728application.properties\u6587\u4ef6\u914d\u7f6e\u5bf9\u5e94\u7684\u5bc6\u7801\uff1a  security.user.name=admin\nsecurity.user.password=secret\nmanagement.security.role=SUPERUSER  \u8def\u5f84/\u7aef\u53e3/ip\u8bbf\u95ee\u9650\u5236  \u5f88\u53ef\u80fd\u8fd9\u79cd\u76d1\u63a7\u4f60\u53ea\u9700\u8981\u5728\u672c\u673a\u8bbf\u95ee\uff08\u5982\u53ea\u6709\u672c\u673a\u624d\u80fd\u5173\u95ed\u5e94\u7528\uff09\uff0c\u82e5\u9700\u8981\u5982\u6b64\uff0c\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u7ba1\u7406\u914d\u7f6e  ##management endpoint\u7684\u8def\u5f84\uff0c\u9ed8\u8ba4\u4e3a/\nmanagement.context-path=/manage\n\n##management endpoint\u7684\u76d1\u542c\u7aef\u53e3\nmanagement.port=8081\n\n##management endpoint\u53ea\u5141\u8bb8\u6765\u81ea\u672c\u673a\u7684\u8fde\u63a5\nmanagement.address=127.0.0.1", 
            "title": "Springboot \u4f18\u96c5\u505c\u673a"
        }, 
        {
            "location": "/context/", 
            "text": "spring context\n\n\n\u6211\u4eec\u77e5\u9053\u5982\u679c\u6211\u4eec\u8981\u5728\u4e00\u4e2a\u7c7b\u4f7f\u7528spring\u63d0\u4f9b\u7684bean\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u7c7b\u6ce8\u5165\u5230spring\u5bb9\u5668\u4e2d\uff0c\u4ea4\u7ed9spring\u5bb9\u5668\u8fdb\u884c\u7ba1\u7406\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u4f1a\u78b0\u5230\u5728\u4e00\u4e2a\u666e\u901a\u7684Java\u7c7b\u4e2d\uff0c\u60f3\u76f4\u63a5\u4f7f\u7528spring\u63d0\u4f9b\u7684\u5176\u4ed6\u5bf9\u8c61\u6216\u8005\u8bf4\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u4ea4\u7ed9spring\u7ba1\u7406\uff0c\u4f46\u662f\u9700\u8981\u7528\u5230spring\u91cc\u7684\u4e00\u4e9b\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u662fspring\u6846\u67b6\u7684\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u901a\u8fc7\n\n\nApplicationContext ac = new FileSystemXmlApplicationContext(\"applicationContext.xml\");\nac.getBean(\"beanId\"); \n\n\n\u8fd9\u6837\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u83b7\u53d6\u6211\u4eec\u6240\u9700\u8981\u7684\u5bf9\u8c61\u3002\n\n\n\u4f46\u662f\u5f80\u5f80\u6211\u4eec\u6240\u505a\u7684\u90fd\u662fWeb Application\uff0c\u8fd9\u65f6\u6211\u4eec\u542f\u52a8spring\u5bb9\u5668\u662f\u901a\u8fc7\u5728web.xml\u6587\u4ef6\u4e2d\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u4e0d\u9002\u5408\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u5728\u666e\u901a\u7c7b\u53bb\u83b7\u53d6\u5bf9\u8c61\u4e86\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5c31\u76f8\u5f53\u4e8e\u52a0\u8f7d\u4e86\u4e24\u6b21spring\u5bb9\u5668\uff0c\u800c\u6211\u4eec\u60f3\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u5728\u542f\u52a8web\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u5c31\u628aApplication\u653e\u5728\u67d0\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u5728\u83b7\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u666e\u901a\u7c7b\u83b7\u53d6spring bean\u5bf9\u8c61\u4e86\uff0c\u8ba9\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\n\n\n1.\u5728Spring Boot\u53ef\u4ee5\u626b\u63cf\u7684\u5305\u4e0b\n\n\n\u5199\u7684\u5de5\u5177\u7c7b\u4e3aSpringUtil\uff0c\u5b9e\u73b0ApplicationContextAware\u63a5\u53e3\uff0c\u5e76\u52a0\u5165Component\u6ce8\u89e3\uff0c\u8ba9spring\u626b\u63cf\u5230\u8be5bean\n\n\npackage me.shijunjie.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringUtil implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        if(SpringUtil.applicationContext == null) {\n            SpringUtil.applicationContext = applicationContext;\n        }\n        System.out.println(\n---------------------------------------------------------------------\n);\n\n        System.out.println(\n---------------------------------------------------------------------\n);\n\n        System.out.println(\n---------------me.shijunjie.util.SpringUtil------------------------------------------------------\n);\n\n        System.out.println(\n========ApplicationContext\u914d\u7f6e\u6210\u529f,\u5728\u666e\u901a\u7c7b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528SpringUtils.getAppContext()\u83b7\u53d6applicationContext\u5bf9\u8c61,applicationContext=\n+SpringUtil.applicationContext+\n========\n);\n\n        System.out.println(\n---------------------------------------------------------------------\n);\n    }\n\n    //\u83b7\u53d6applicationContext\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    //\u901a\u8fc7name\u83b7\u53d6 Bean.\n    public static Object getBean(String name){\n        return getApplicationContext().getBean(name);\n    }\n\n    //\u901a\u8fc7class\u83b7\u53d6Bean.\n    public static \nT\n T getBean(Class\nT\n clazz){\n        return getApplicationContext().getBean(clazz);\n    }\n\n    //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean\n    public static \nT\n T getBean(String name,Class\nT\n clazz){\n        return getApplicationContext().getBean(name, clazz);\n    }\n\n}\n\n\n\n\n\u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u518d\u542f\u52a8\u7684\u65f6\u5019\u5148\u901a\u8fc7\u4ee3\u7801\u65b9\u5f0f\u7ed9spring\u5bb9\u5668\u4e2d\u6ce8\u5165\u4e00\u4e2abean\uff0c\u5165\u4e0b\u6240\u793a\n\n\npackage me.shijunjie.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport me.shijunjie.entity.Demo2;\n\n@Configuration\npublic class BeanConfig {\n    @Bean(name=\ntestDemo\n)\n    public Demo2 generateDemo() {\n        Demo2 demo = new Demo2();\n        demo.setId(12345);\n        demo.setName(\ntest\n);\n        return demo;\n    }\n}\n\n\n\n\n\n\u7136\u540e\u6211\u4eec\u7f16\u5199\u6d4b\u8bd5controller\uff0c\u5e76\u4ece\u521a\u624d\u5199\u7684springutil\u4e2d\u83b7\u53d6\u8fd9\u4e2abean\n\n\npackage me.shijunjie.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport me.shijunjie.util.SpringUtil;\n\n@RestController\n@RequestMapping(\n/application\n)\npublic class TestApplicationController {\n\n    @RequestMapping(\n/test1\n)\n    public Object testSpringUtil1() {\n        return SpringUtil.getBean(\ntestDemo\n);\n    }\n\n}", 
            "title": "springcontext"
        }, 
        {
            "location": "/context/#spring-context", 
            "text": "\u6211\u4eec\u77e5\u9053\u5982\u679c\u6211\u4eec\u8981\u5728\u4e00\u4e2a\u7c7b\u4f7f\u7528spring\u63d0\u4f9b\u7684bean\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u7c7b\u6ce8\u5165\u5230spring\u5bb9\u5668\u4e2d\uff0c\u4ea4\u7ed9spring\u5bb9\u5668\u8fdb\u884c\u7ba1\u7406\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u4f1a\u78b0\u5230\u5728\u4e00\u4e2a\u666e\u901a\u7684Java\u7c7b\u4e2d\uff0c\u60f3\u76f4\u63a5\u4f7f\u7528spring\u63d0\u4f9b\u7684\u5176\u4ed6\u5bf9\u8c61\u6216\u8005\u8bf4\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u4ea4\u7ed9spring\u7ba1\u7406\uff0c\u4f46\u662f\u9700\u8981\u7528\u5230spring\u91cc\u7684\u4e00\u4e9b\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u662fspring\u6846\u67b6\u7684\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u901a\u8fc7  ApplicationContext ac = new FileSystemXmlApplicationContext(\"applicationContext.xml\");\nac.getBean(\"beanId\");   \u8fd9\u6837\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u83b7\u53d6\u6211\u4eec\u6240\u9700\u8981\u7684\u5bf9\u8c61\u3002  \u4f46\u662f\u5f80\u5f80\u6211\u4eec\u6240\u505a\u7684\u90fd\u662fWeb Application\uff0c\u8fd9\u65f6\u6211\u4eec\u542f\u52a8spring\u5bb9\u5668\u662f\u901a\u8fc7\u5728web.xml\u6587\u4ef6\u4e2d\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u4e0d\u9002\u5408\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u5728\u666e\u901a\u7c7b\u53bb\u83b7\u53d6\u5bf9\u8c61\u4e86\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5c31\u76f8\u5f53\u4e8e\u52a0\u8f7d\u4e86\u4e24\u6b21spring\u5bb9\u5668\uff0c\u800c\u6211\u4eec\u60f3\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u5728\u542f\u52a8web\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u5c31\u628aApplication\u653e\u5728\u67d0\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u5728\u83b7\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u666e\u901a\u7c7b\u83b7\u53d6spring bean\u5bf9\u8c61\u4e86\uff0c\u8ba9\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b  1.\u5728Spring Boot\u53ef\u4ee5\u626b\u63cf\u7684\u5305\u4e0b  \u5199\u7684\u5de5\u5177\u7c7b\u4e3aSpringUtil\uff0c\u5b9e\u73b0ApplicationContextAware\u63a5\u53e3\uff0c\u5e76\u52a0\u5165Component\u6ce8\u89e3\uff0c\u8ba9spring\u626b\u63cf\u5230\u8be5bean  package me.shijunjie.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringUtil implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        if(SpringUtil.applicationContext == null) {\n            SpringUtil.applicationContext = applicationContext;\n        }\n        System.out.println( --------------------------------------------------------------------- );\n\n        System.out.println( --------------------------------------------------------------------- );\n\n        System.out.println( ---------------me.shijunjie.util.SpringUtil------------------------------------------------------ );\n\n        System.out.println( ========ApplicationContext\u914d\u7f6e\u6210\u529f,\u5728\u666e\u901a\u7c7b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528SpringUtils.getAppContext()\u83b7\u53d6applicationContext\u5bf9\u8c61,applicationContext= +SpringUtil.applicationContext+ ======== );\n\n        System.out.println( --------------------------------------------------------------------- );\n    }\n\n    //\u83b7\u53d6applicationContext\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    //\u901a\u8fc7name\u83b7\u53d6 Bean.\n    public static Object getBean(String name){\n        return getApplicationContext().getBean(name);\n    }\n\n    //\u901a\u8fc7class\u83b7\u53d6Bean.\n    public static  T  T getBean(Class T  clazz){\n        return getApplicationContext().getBean(clazz);\n    }\n\n    //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean\n    public static  T  T getBean(String name,Class T  clazz){\n        return getApplicationContext().getBean(name, clazz);\n    }\n\n}  \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u518d\u542f\u52a8\u7684\u65f6\u5019\u5148\u901a\u8fc7\u4ee3\u7801\u65b9\u5f0f\u7ed9spring\u5bb9\u5668\u4e2d\u6ce8\u5165\u4e00\u4e2abean\uff0c\u5165\u4e0b\u6240\u793a  package me.shijunjie.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport me.shijunjie.entity.Demo2;\n\n@Configuration\npublic class BeanConfig {\n    @Bean(name= testDemo )\n    public Demo2 generateDemo() {\n        Demo2 demo = new Demo2();\n        demo.setId(12345);\n        demo.setName( test );\n        return demo;\n    }\n}  \u7136\u540e\u6211\u4eec\u7f16\u5199\u6d4b\u8bd5controller\uff0c\u5e76\u4ece\u521a\u624d\u5199\u7684springutil\u4e2d\u83b7\u53d6\u8fd9\u4e2abean  package me.shijunjie.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport me.shijunjie.util.SpringUtil;\n\n@RestController\n@RequestMapping( /application )\npublic class TestApplicationController {\n\n    @RequestMapping( /test1 )\n    public Object testSpringUtil1() {\n        return SpringUtil.getBean( testDemo );\n    }\n\n}", 
            "title": "spring context"
        }, 
        {
            "location": "/linux/", 
            "text": "linux netstat\u547d\u4ee4\u8be6\u89e3\n\n\nNetstat \u547d\u4ee4\u7528\u4e8e\u663e\u793a\u5404\u79cd\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u7f51\u7edc\u8fde\u63a5\uff0c\u8def\u7531\u8868\uff0c\u63a5\u53e3\u72b6\u6001 (Interface Statistics)\uff0cmasquerade \u8fde\u63a5\uff0c\u591a\u64ad\u6210\u5458 (Multicast Memberships) \u7b49\u7b49\u3002\n\n\n\u8f93\u51fa\u4fe1\u606f\u542b\u4e49\n\n\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address Foreign Address State\ntcp 0 2 210.34.6.89:telnet 210.34.6.96:2873 ESTABLISHED\ntcp 296 0 210.34.6.89:1165 210.34.6.84:netbios-ssn ESTABLISHED\ntcp 0 0 localhost.localdom:9001 localhost.localdom:1162 ESTABLISHED\ntcp 0 0 localhost.localdom:1162 localhost.localdom:9001 ESTABLISHED\ntcp 0 80 210.34.6.89:1161 210.34.6.10:netbios-ssn CLOSE\n\nActive UNIX domain sockets (w/o servers)\nProto RefCnt Flags Type State I-Node Path\nunix 1 [ ] STREAM CONNECTED 16178 @000000dd\nunix 1 [ ] STREAM CONNECTED 16176 @000000dc\nunix 9 [ ] DGRAM 5292 /dev/log\nunix 1 [ ] STREAM CONNECTED 16182 @000000df\n\n\n\n\n\u4ece\u6574\u4f53\u4e0a\u770b\uff0cnetstat\u7684\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\n\n\n\u4e00\u4e2a\u662fActive Internet connections\uff0c\u79f0\u4e3a\u6709\u6e90TCP\u8fde\u63a5\uff0c\u5176\u4e2d\"Recv-Q\"\u548c\"Send-Q\"\u6307%0A\u7684\u662f\u63a5\u6536\u961f\u5217\u548c\u53d1\u9001\u961f\u5217\u3002\u8fd9\u4e9b\u6570\u5b57\u4e00\u822c\u90fd\u5e94\u8be5\u662f0\u3002\u5982\u679c\u4e0d\u662f\u5219\u8868\u793a\u8f6f\u4ef6\u5305\u6b63\u5728\u961f\u5217\u4e2d\u5806\u79ef\u3002\u8fd9\u79cd\u60c5\u51b5\u53ea\u80fd\u5728\u975e\u5e38\u5c11\u7684\u60c5\u51b5\u89c1\u5230\u3002\n\n\n\u53e6\u4e00\u4e2a\u662fActive UNIX domain sockets\uff0c\u79f0\u4e3a\u6709\u6e90Unix\u57df\u5957\u63a5\u53e3(\u548c\u7f51\u7edc\u5957\u63a5\u5b57\u4e00\u6837\uff0c\u4f46\u662f\u53ea\u80fd\u7528\u4e8e\u672c\u673a\u901a\u4fe1\uff0c\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u4e00\u500d)\u3002\nProto\u663e\u793a\u8fde\u63a5\u4f7f\u7528\u7684\u534f\u8bae,RefCnt\u8868\u793a\u8fde\u63a5\u5230\u672c\u5957\u63a5\u53e3\u4e0a\u7684\u8fdb\u7a0b\u53f7,Types\u663e\u793a\u5957\u63a5\u53e3\u7684\u7c7b\u578b,State\u663e\u793a\u5957\u63a5\u53e3\u5f53\u524d\u7684\u72b6\u6001,Path\u8868\u793a\u8fde\u63a5\u5230\u5957\u63a5\u53e3\u7684\u5176\u5b83\u8fdb\u7a0b\u4f7f\u7528\u7684\u8def\u5f84\u540d\u3002\n\n\n\u5e38\u89c1\u53c2\u6570\n\n\n-a (all)\u663e\u793a\u6240\u6709\u9009\u9879\uff0c\u9ed8\u8ba4\u4e0d\u663e\u793aLISTEN\u76f8\u5173\n-t (tcp)\u4ec5\u663e\u793atcp\u76f8\u5173\u9009\u9879\n-u (udp)\u4ec5\u663e\u793audp\u76f8\u5173\u9009\u9879\n-n \u62d2\u7edd\u663e\u793a\u522b\u540d\uff0c\u80fd\u663e\u793a\u6570\u5b57\u7684\u5168\u90e8\u8f6c\u5316\u6210\u6570\u5b57\u3002\n-l \u4ec5\u5217\u51fa\u6709\u5728 Listen (\u76d1\u542c) \u7684\u670d\u52d9\u72b6\u6001\n\n-p \u663e\u793a\u5efa\u7acb\u76f8\u5173\u94fe\u63a5\u7684\u7a0b\u5e8f\u540d\n-r \u663e\u793a\u8def\u7531\u4fe1\u606f\uff0c\u8def\u7531\u8868\n-e \u663e\u793a\u6269\u5c55\u4fe1\u606f\uff0c\u4f8b\u5982uid\u7b49\n-s \u6309\u5404\u4e2a\u534f\u8bae\u8fdb\u884c\u7edf\u8ba1\n-c \u6bcf\u9694\u4e00\u4e2a\u56fa\u5b9a\u65f6\u95f4\uff0c\u6267\u884c\u8be5netstat\u547d\u4ee4\u3002\n\n\u63d0\u793a\uff1aLISTEN\u548cLISTENING\u7684\u72b6\u6001\u53ea\u6709\u7528-a\u6216\u8005-l\u624d\u80fd\u770b\u5230\n\n\n\n\n\u5b9e\u7528\u547d\u4ee4\u5b9e\u4f8b\n\n\n 1. \u5217\u51fa\u6240\u6709\u7aef\u53e3 (\u5305\u62ec\u76d1\u542c\u548c\u672a\u76d1\u542c\u7684) \n\n\n\u5217\u51fa\u6240\u6709\u7aef\u53e3 netstat -a\n\n\n# netstat -a | more\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n udp        0      0 *:bootpc                *:*\n\nActive UNIX domain sockets (servers and established)\n Proto RefCnt Flags       Type       State         I-Node   Path\n unix  2      [ ACC ]     STREAM     LISTENING     6135     /tmp/.X11-unix/X0\n unix  2      [ ACC ]     STREAM     LISTENING     5140     /var/run/acpid.socket\n\n\n\n\n\u5217\u51fa\u6240\u6709 tcp \u7aef\u53e3 netstat -at\n\n\n# netstat -at\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n tcp        0      0 localhost:ipp           *:*                     LISTEN\n tcp        0      0 *:smtp                  *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN\n\n\n\n\n\u5217\u51fa\u6240\u6709 udp \u7aef\u53e3 netstat -au\n\n\n# netstat -au\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n udp        0      0 *:bootpc                *:*\n udp        0      0 *:49119                 *:*\n udp        0      0 *:mdns                  *:*\n\n\n\n\n2. \u5217\u51fa\u6240\u6709\u5904\u4e8e\u76d1\u542c\u72b6\u6001\u7684 Sockets\n\n\n\u53ea\u663e\u793a\u76d1\u542c\u7aef\u53e3 netstat -l\n\n\n# netstat -l\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:ipp           *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN\n udp        0      0 *:49119                 *:*\n\n\n\n\n\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c tcp \u7aef\u53e3 netstat -lt\n\n\n# netstat -lt\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n tcp        0      0 *:smtp                  *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN\n\n\n\n\n\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c udp \u7aef\u53e3 netstat -lu\n\n\n# netstat -lu\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n udp        0      0 *:49119                 *:*\n udp        0      0 *:mdns                  *:*\n\n\n\n\n\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c UNIX \u7aef\u53e3 netstat -lx\n\n\n# netstat -lx\n Active UNIX domain sockets (only servers)\n Proto RefCnt Flags       Type       State         I-Node   Path\n unix  2      [ ACC ]     STREAM     LISTENING     6294     private/maildrop\n unix  2      [ ACC ]     STREAM     LISTENING     6203     public/cleanup\n unix  2      [ ACC ]     STREAM     LISTENING     6302     private/ifmail\n unix  2      [ ACC ]     STREAM     LISTENING     6306     private/bsmtp\n\n\n\n\n3. \u663e\u793a\u6bcf\u4e2a\u534f\u8bae\u7684\u7edf\u8ba1\u4fe1\u606f\n\n\n\u663e\u793a\u6240\u6709\u7aef\u53e3\u7684\u7edf\u8ba1\u4fe1\u606f netstat -s\n\n\n# netstat -s\n Ip:\n 11150 total packets received\n 1 with invalid addresses\n 0 forwarded\n 0 incoming packets discarded\n 11149 incoming packets delivered\n 11635 requests sent out\n Icmp:\n 0 ICMP messages received\n 0 input ICMP message failed.\n Tcp:\n 582 active connections openings\n 2 failed connection attempts\n 25 connection resets received\n Udp:\n 1183 packets received\n 4 packets to unknown port received.\n\n\n\n\n\n\u663e\u793a TCP \u6216 UDP \u7aef\u53e3\u7684\u7edf\u8ba1\u4fe1\u606f netstat -st \u6216 -su\n\n\n# netstat -st \n# netstat -su\n\n\n\n\n4. \u5728 netstat \u8f93\u51fa\u4e2d\u663e\u793a PID \u548c\u8fdb\u7a0b\u540d\u79f0 netstat -p\n\n\nnetstat -p \u53ef\u4ee5\u4e0e\u5176\u5b83\u5f00\u5173\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u53ef\u4ee5\u6dfb\u52a0 \u201cPID/\u8fdb\u7a0b\u540d\u79f0\u201d \u5230 netstat \u8f93\u51fa\u4e2d\uff0c\u8fd9\u6837 debugging \u7684\u65f6\u5019\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53d1\u73b0\u7279\u5b9a\u7aef\u53e3\u8fd0\u884c\u7684\u7a0b\u5e8f\n\n\n# netstat -pt\n Active Internet connections (w/o servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n tcp        1      0 ramesh-laptop.loc:47212 192.168.185.75:www        CLOSE_WAIT  2109/firefox\n tcp        0      0 ramesh-laptop.loc:52750 lax:www ESTABLISHED 2109/firefox\n\n\n\n\n5. \u5728 netstat \u8f93\u51fa\u4e2d\u4e0d\u663e\u793a\u4e3b\u673a\uff0c\u7aef\u53e3\u548c\u7528\u6237\u540d (host, port or user)\n\n\u5f53\u4f60\u4e0d\u60f3\u8ba9\u4e3b\u673a\uff0c\u7aef\u53e3\u548c\u7528\u6237\u540d\u663e\u793a\uff0c\u4f7f\u7528 netstat -n\u3002\u5c06\u4f1a\u4f7f\u7528\u6570\u5b57\u4ee3\u66ff\u90a3\u4e9b\u540d\u79f0\u3002\n\n\n\u540c\u6837\u53ef\u4ee5\u52a0\u901f\u8f93\u51fa\uff0c\u56e0\u4e3a\u4e0d\u7528\u8fdb\u884c\u6bd4\u5bf9\u67e5\u8be2\u3002\n\n\n# netstat -an\n\n\n\n\n\u5982\u679c\u53ea\u662f\u4e0d\u60f3\u8ba9\u8fd9\u4e09\u4e2a\u540d\u79f0\u4e2d\u7684\u4e00\u4e2a\u88ab\u663e\u793a\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\n\n\n# netsat -a --numeric-ports\n# netsat -a --numeric-hosts\n# netsat -a --numeric-users\n\n\n\n\n6. \u6301\u7eed\u8f93\u51fa netstat \u4fe1\u606f\n\nnetstat \u5c06\u6bcf\u9694\u4e00\u79d2\u8f93\u51fa\u7f51\u7edc\u4fe1\u606f\u3002\n\n\n# netstat -c\n Active Internet connections (w/o servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 ramesh-laptop.loc:36130 101-101-181-225.ama:www ESTABLISHED\n tcp        1      1 ramesh-laptop.loc:52564 101.11.169.230:www      CLOSING\n tcp        0      0 ramesh-laptop.loc:43758 server-101-101-43-2:www ESTABLISHED\n tcp        1      1 ramesh-laptop.loc:42367 101.101.34.101:www      CLOSING\n ^C\n\n\n\n\n7. \u663e\u793a\u7cfb\u7edf\u4e0d\u652f\u6301\u7684\u5730\u5740\u65cf (Address Families)\n\n\nnetstat --verbose\n\n\n\n\n\u5728\u8f93\u51fa\u7684\u672b\u5c3e\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u4fe1\u606f\n\n\nnetstat: no support for `AF IPX' on this system.\nnetstat: no support for `AF AX25' on this system.\nnetstat: no support for `AF X25' on this system.\nnetstat: no support for `AF NETROM' on this system.\n\n\n\n\n8. \u663e\u793a\u6838\u5fc3\u8def\u7531\u4fe1\u606f netstat -r\n\n\n# netstat -r\n Kernel IP routing table\n Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n 192.168.1.0     *               255.255.255.0   U         0 0          0 eth2\n link-local      *               255.255.0.0     U         0 0          0 eth2\n default         192.168.1.1     0.0.0.0         UG        0 0          0 eth2\n\n\n\n\n\u6ce8\u610f\uff1a \u4f7f\u7528 netstat -rn \u663e\u793a\u6570\u5b57\u683c\u5f0f\uff0c\u4e0d\u67e5\u8be2\u4e3b\u673a\u540d\u79f0\u3002\n\n\n9. \u627e\u51fa\u7a0b\u5e8f\u8fd0\u884c\u7684\u7aef\u53e3\n\n\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fdb\u7a0b\u90fd\u80fd\u627e\u5230\uff0c\u6ca1\u6709\u6743\u9650\u7684\u4f1a\u4e0d\u663e\u793a\uff0c\u4f7f\u7528 root \u6743\u9650\u67e5\u770b\u6240\u6709\u7684\u4fe1\u606f\u3002\n\n\n# netstat -ap | grep ssh\n tcp        1      0 dev-db:ssh           101.174.100.22:39213        CLOSE_WAIT  -\n tcp        1      0 dev-db:ssh           101.174.100.22:57643        CLOSE_WAIT  -\n\n\n\n\n\u627e\u51fa\u8fd0\u884c\u5728\u6307\u5b9a\u7aef\u53e3\u7684\u8fdb\u7a0b\n \n# netstat -an | grep ':80'\n\n\n10. \u663e\u793a\u7f51\u7edc\u63a5\u53e3\u5217\u8868\n\n\n# netstat -i\n Kernel Interface table\n Iface   MTU Met   RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\n eth0       1500 0         0      0      0 0             0      0      0      0 BMU\n eth2       1500 0     26196      0      0 0         26883      6      0      0 BMRU\n lo        16436 0         4      0      0 0             4      0      0      0 LRU\n\n\n\u663e\u793a\u8be6\u7ec6\u4fe1\u606f\uff0c\u50cf\u662f ifconfig \u4f7f\u7528 netstat -ie:\n \n# netstat -ie\n Kernel Interface table\n eth0      Link encap:Ethernet  HWaddr 00:10:40:11:11:11\n UP BROADCAST MULTICAST  MTU:1500  Metric:1\n RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n collisions:0 txqueuelen:1000\n RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n Memory:f6ae0000-f6b00000\n\n\n11. IP\u548cTCP\u5206\u6790\n\n\n\u67e5\u770b\u8fde\u63a5\u67d0\u670d\u52a1\u7aef\u53e3\u6700\u591a\u7684\u7684IP\u5730\u5740\n \nwss8848@ubuntu:~$ netstat -nat | grep \"192.168.1.15:22\" |awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -nr|head -20\n18 221.136.168.36\n3 154.74.45.242\n2 78.173.31.236\n2 62.183.207.98\n2 192.168.1.14\n2 182.48.111.215\n2 124.193.219.34\n2 119.145.41.2\n2 114.255.41.30\n1 75.102.11.99\n\n\nTCP\u5404\u79cd\u72b6\u6001\u5217\u8868\n\n\nwss8848@ubuntu:~$ netstat -nat |awk '{print $6}'\nestablished)\nForeign\nLISTEN\nTIME_WAIT\nESTABLISHED\nTIME_WAIT\nSYN_SENT\n\n\n\n\n\u65b0\u589e\u7528\u6237\n\u7528\u6237\u7ec4\n\n\n\n\n\u56e0\u4e3a\u5b89\u5168\u95ee\u9898elasticsearch \u4e0d\u8ba9\u7528root\u7528\u6237\u76f4\u63a5\u8fd0\u884c\uff0c\u6240\u4ee5\u8981\u521b\u5efa\u65b0\u7528\u6237\n\n\n\u7b2c\u4e00\u6b65\uff1aliunx\u521b\u5efa\u65b0\u7528\u6237  adduser XXX    \u7136\u540e\u7ed9\u521b\u5efa\u7684\u7528\u6237\u52a0\u5bc6\u7801 passwd XXX    \u8f93\u5165\u4e24\u6b21\u5bc6\u7801\u3002\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u5207\u6362\u521a\u624d\u521b\u5efa\u7684\u7528\u6237 su XXX  \u7136\u540e\u6267\u884celasticsearch  \u4f1a\u663e\u793aPermission denied \u6743\u9650\u4e0d\u8db3\u3002\n\n\n\u7b2c\u4e09\u6b65\uff1aroot\u7ed9XXX\u8d4b\u6743\u9650\uff0cchown -R XXX /\u4f60\u7684elasticsearch\u5b89\u88c5\u76ee\u5f55\u3002\n\n\n\n\n\u7136\u540e\u6267\u884c\u6210\u529f\u3002", 
            "title": "linux\u547d\u4ee4"
        }, 
        {
            "location": "/linux/#linux-netstat", 
            "text": "Netstat \u547d\u4ee4\u7528\u4e8e\u663e\u793a\u5404\u79cd\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u7f51\u7edc\u8fde\u63a5\uff0c\u8def\u7531\u8868\uff0c\u63a5\u53e3\u72b6\u6001 (Interface Statistics)\uff0cmasquerade \u8fde\u63a5\uff0c\u591a\u64ad\u6210\u5458 (Multicast Memberships) \u7b49\u7b49\u3002", 
            "title": "linux netstat\u547d\u4ee4\u8be6\u89e3"
        }, 
        {
            "location": "/linux/#_1", 
            "text": "Active Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address Foreign Address State\ntcp 0 2 210.34.6.89:telnet 210.34.6.96:2873 ESTABLISHED\ntcp 296 0 210.34.6.89:1165 210.34.6.84:netbios-ssn ESTABLISHED\ntcp 0 0 localhost.localdom:9001 localhost.localdom:1162 ESTABLISHED\ntcp 0 0 localhost.localdom:1162 localhost.localdom:9001 ESTABLISHED\ntcp 0 80 210.34.6.89:1161 210.34.6.10:netbios-ssn CLOSE\n\nActive UNIX domain sockets (w/o servers)\nProto RefCnt Flags Type State I-Node Path\nunix 1 [ ] STREAM CONNECTED 16178 @000000dd\nunix 1 [ ] STREAM CONNECTED 16176 @000000dc\nunix 9 [ ] DGRAM 5292 /dev/log\nunix 1 [ ] STREAM CONNECTED 16182 @000000df  \u4ece\u6574\u4f53\u4e0a\u770b\uff0cnetstat\u7684\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a  \u4e00\u4e2a\u662fActive Internet connections\uff0c\u79f0\u4e3a\u6709\u6e90TCP\u8fde\u63a5\uff0c\u5176\u4e2d\"Recv-Q\"\u548c\"Send-Q\"\u6307%0A\u7684\u662f\u63a5\u6536\u961f\u5217\u548c\u53d1\u9001\u961f\u5217\u3002\u8fd9\u4e9b\u6570\u5b57\u4e00\u822c\u90fd\u5e94\u8be5\u662f0\u3002\u5982\u679c\u4e0d\u662f\u5219\u8868\u793a\u8f6f\u4ef6\u5305\u6b63\u5728\u961f\u5217\u4e2d\u5806\u79ef\u3002\u8fd9\u79cd\u60c5\u51b5\u53ea\u80fd\u5728\u975e\u5e38\u5c11\u7684\u60c5\u51b5\u89c1\u5230\u3002  \u53e6\u4e00\u4e2a\u662fActive UNIX domain sockets\uff0c\u79f0\u4e3a\u6709\u6e90Unix\u57df\u5957\u63a5\u53e3(\u548c\u7f51\u7edc\u5957\u63a5\u5b57\u4e00\u6837\uff0c\u4f46\u662f\u53ea\u80fd\u7528\u4e8e\u672c\u673a\u901a\u4fe1\uff0c\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u4e00\u500d)\u3002\nProto\u663e\u793a\u8fde\u63a5\u4f7f\u7528\u7684\u534f\u8bae,RefCnt\u8868\u793a\u8fde\u63a5\u5230\u672c\u5957\u63a5\u53e3\u4e0a\u7684\u8fdb\u7a0b\u53f7,Types\u663e\u793a\u5957\u63a5\u53e3\u7684\u7c7b\u578b,State\u663e\u793a\u5957\u63a5\u53e3\u5f53\u524d\u7684\u72b6\u6001,Path\u8868\u793a\u8fde\u63a5\u5230\u5957\u63a5\u53e3\u7684\u5176\u5b83\u8fdb\u7a0b\u4f7f\u7528\u7684\u8def\u5f84\u540d\u3002", 
            "title": "\u8f93\u51fa\u4fe1\u606f\u542b\u4e49"
        }, 
        {
            "location": "/linux/#_2", 
            "text": "-a (all)\u663e\u793a\u6240\u6709\u9009\u9879\uff0c\u9ed8\u8ba4\u4e0d\u663e\u793aLISTEN\u76f8\u5173\n-t (tcp)\u4ec5\u663e\u793atcp\u76f8\u5173\u9009\u9879\n-u (udp)\u4ec5\u663e\u793audp\u76f8\u5173\u9009\u9879\n-n \u62d2\u7edd\u663e\u793a\u522b\u540d\uff0c\u80fd\u663e\u793a\u6570\u5b57\u7684\u5168\u90e8\u8f6c\u5316\u6210\u6570\u5b57\u3002\n-l \u4ec5\u5217\u51fa\u6709\u5728 Listen (\u76d1\u542c) \u7684\u670d\u52d9\u72b6\u6001\n\n-p \u663e\u793a\u5efa\u7acb\u76f8\u5173\u94fe\u63a5\u7684\u7a0b\u5e8f\u540d\n-r \u663e\u793a\u8def\u7531\u4fe1\u606f\uff0c\u8def\u7531\u8868\n-e \u663e\u793a\u6269\u5c55\u4fe1\u606f\uff0c\u4f8b\u5982uid\u7b49\n-s \u6309\u5404\u4e2a\u534f\u8bae\u8fdb\u884c\u7edf\u8ba1\n-c \u6bcf\u9694\u4e00\u4e2a\u56fa\u5b9a\u65f6\u95f4\uff0c\u6267\u884c\u8be5netstat\u547d\u4ee4\u3002\n\n\u63d0\u793a\uff1aLISTEN\u548cLISTENING\u7684\u72b6\u6001\u53ea\u6709\u7528-a\u6216\u8005-l\u624d\u80fd\u770b\u5230", 
            "title": "\u5e38\u89c1\u53c2\u6570"
        }, 
        {
            "location": "/linux/#_3", 
            "text": "1. \u5217\u51fa\u6240\u6709\u7aef\u53e3 (\u5305\u62ec\u76d1\u542c\u548c\u672a\u76d1\u542c\u7684)", 
            "title": "\u5b9e\u7528\u547d\u4ee4\u5b9e\u4f8b"
        }, 
        {
            "location": "/linux/#netstat-a", 
            "text": "# netstat -a | more\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n udp        0      0 *:bootpc                *:*\n\nActive UNIX domain sockets (servers and established)\n Proto RefCnt Flags       Type       State         I-Node   Path\n unix  2      [ ACC ]     STREAM     LISTENING     6135     /tmp/.X11-unix/X0\n unix  2      [ ACC ]     STREAM     LISTENING     5140     /var/run/acpid.socket", 
            "title": "\u5217\u51fa\u6240\u6709\u7aef\u53e3 netstat -a"
        }, 
        {
            "location": "/linux/#tcp-netstat-at", 
            "text": "# netstat -at\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n tcp        0      0 localhost:ipp           *:*                     LISTEN\n tcp        0      0 *:smtp                  *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN", 
            "title": "\u5217\u51fa\u6240\u6709 tcp \u7aef\u53e3 netstat -at"
        }, 
        {
            "location": "/linux/#udp-netstat-au", 
            "text": "# netstat -au\n Active Internet connections (servers and established)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n udp        0      0 *:bootpc                *:*\n udp        0      0 *:49119                 *:*\n udp        0      0 *:mdns                  *:*  2. \u5217\u51fa\u6240\u6709\u5904\u4e8e\u76d1\u542c\u72b6\u6001\u7684 Sockets", 
            "title": "\u5217\u51fa\u6240\u6709 udp \u7aef\u53e3 netstat -au"
        }, 
        {
            "location": "/linux/#netstat-l", 
            "text": "# netstat -l\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:ipp           *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN\n udp        0      0 *:49119                 *:*", 
            "title": "\u53ea\u663e\u793a\u76d1\u542c\u7aef\u53e3 netstat -l"
        }, 
        {
            "location": "/linux/#tcp-netstat-lt", 
            "text": "# netstat -lt\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 localhost:30037         *:*                     LISTEN\n tcp        0      0 *:smtp                  *:*                     LISTEN\n tcp6       0      0 localhost:ipp           [::]:*                  LISTEN", 
            "title": "\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c tcp \u7aef\u53e3 netstat -lt"
        }, 
        {
            "location": "/linux/#udp-netstat-lu", 
            "text": "# netstat -lu\n Active Internet connections (only servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n udp        0      0 *:49119                 *:*\n udp        0      0 *:mdns                  *:*", 
            "title": "\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c udp \u7aef\u53e3 netstat -lu"
        }, 
        {
            "location": "/linux/#unix-netstat-lx", 
            "text": "# netstat -lx\n Active UNIX domain sockets (only servers)\n Proto RefCnt Flags       Type       State         I-Node   Path\n unix  2      [ ACC ]     STREAM     LISTENING     6294     private/maildrop\n unix  2      [ ACC ]     STREAM     LISTENING     6203     public/cleanup\n unix  2      [ ACC ]     STREAM     LISTENING     6302     private/ifmail\n unix  2      [ ACC ]     STREAM     LISTENING     6306     private/bsmtp  3. \u663e\u793a\u6bcf\u4e2a\u534f\u8bae\u7684\u7edf\u8ba1\u4fe1\u606f", 
            "title": "\u53ea\u5217\u51fa\u6240\u6709\u76d1\u542c UNIX \u7aef\u53e3 netstat -lx"
        }, 
        {
            "location": "/linux/#netstat-s", 
            "text": "# netstat -s\n Ip:\n 11150 total packets received\n 1 with invalid addresses\n 0 forwarded\n 0 incoming packets discarded\n 11149 incoming packets delivered\n 11635 requests sent out\n Icmp:\n 0 ICMP messages received\n 0 input ICMP message failed.\n Tcp:\n 582 active connections openings\n 2 failed connection attempts\n 25 connection resets received\n Udp:\n 1183 packets received\n 4 packets to unknown port received.", 
            "title": "\u663e\u793a\u6240\u6709\u7aef\u53e3\u7684\u7edf\u8ba1\u4fe1\u606f netstat -s"
        }, 
        {
            "location": "/linux/#tcp-udp-netstat-st-su", 
            "text": "# netstat -st \n# netstat -su  4. \u5728 netstat \u8f93\u51fa\u4e2d\u663e\u793a PID \u548c\u8fdb\u7a0b\u540d\u79f0 netstat -p  netstat -p \u53ef\u4ee5\u4e0e\u5176\u5b83\u5f00\u5173\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u53ef\u4ee5\u6dfb\u52a0 \u201cPID/\u8fdb\u7a0b\u540d\u79f0\u201d \u5230 netstat \u8f93\u51fa\u4e2d\uff0c\u8fd9\u6837 debugging \u7684\u65f6\u5019\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53d1\u73b0\u7279\u5b9a\u7aef\u53e3\u8fd0\u884c\u7684\u7a0b\u5e8f  # netstat -pt\n Active Internet connections (w/o servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n tcp        1      0 ramesh-laptop.loc:47212 192.168.185.75:www        CLOSE_WAIT  2109/firefox\n tcp        0      0 ramesh-laptop.loc:52750 lax:www ESTABLISHED 2109/firefox  5. \u5728 netstat \u8f93\u51fa\u4e2d\u4e0d\u663e\u793a\u4e3b\u673a\uff0c\u7aef\u53e3\u548c\u7528\u6237\u540d (host, port or user) \n\u5f53\u4f60\u4e0d\u60f3\u8ba9\u4e3b\u673a\uff0c\u7aef\u53e3\u548c\u7528\u6237\u540d\u663e\u793a\uff0c\u4f7f\u7528 netstat -n\u3002\u5c06\u4f1a\u4f7f\u7528\u6570\u5b57\u4ee3\u66ff\u90a3\u4e9b\u540d\u79f0\u3002  \u540c\u6837\u53ef\u4ee5\u52a0\u901f\u8f93\u51fa\uff0c\u56e0\u4e3a\u4e0d\u7528\u8fdb\u884c\u6bd4\u5bf9\u67e5\u8be2\u3002  # netstat -an  \u5982\u679c\u53ea\u662f\u4e0d\u60f3\u8ba9\u8fd9\u4e09\u4e2a\u540d\u79f0\u4e2d\u7684\u4e00\u4e2a\u88ab\u663e\u793a\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4  # netsat -a --numeric-ports\n# netsat -a --numeric-hosts\n# netsat -a --numeric-users  6. \u6301\u7eed\u8f93\u51fa netstat \u4fe1\u606f \nnetstat \u5c06\u6bcf\u9694\u4e00\u79d2\u8f93\u51fa\u7f51\u7edc\u4fe1\u606f\u3002  # netstat -c\n Active Internet connections (w/o servers)\n Proto Recv-Q Send-Q Local Address           Foreign Address         State\n tcp        0      0 ramesh-laptop.loc:36130 101-101-181-225.ama:www ESTABLISHED\n tcp        1      1 ramesh-laptop.loc:52564 101.11.169.230:www      CLOSING\n tcp        0      0 ramesh-laptop.loc:43758 server-101-101-43-2:www ESTABLISHED\n tcp        1      1 ramesh-laptop.loc:42367 101.101.34.101:www      CLOSING\n ^C  7. \u663e\u793a\u7cfb\u7edf\u4e0d\u652f\u6301\u7684\u5730\u5740\u65cf (Address Families)  netstat --verbose  \u5728\u8f93\u51fa\u7684\u672b\u5c3e\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u4fe1\u606f  netstat: no support for `AF IPX' on this system.\nnetstat: no support for `AF AX25' on this system.\nnetstat: no support for `AF X25' on this system.\nnetstat: no support for `AF NETROM' on this system.  8. \u663e\u793a\u6838\u5fc3\u8def\u7531\u4fe1\u606f netstat -r  # netstat -r\n Kernel IP routing table\n Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n 192.168.1.0     *               255.255.255.0   U         0 0          0 eth2\n link-local      *               255.255.0.0     U         0 0          0 eth2\n default         192.168.1.1     0.0.0.0         UG        0 0          0 eth2  \u6ce8\u610f\uff1a \u4f7f\u7528 netstat -rn \u663e\u793a\u6570\u5b57\u683c\u5f0f\uff0c\u4e0d\u67e5\u8be2\u4e3b\u673a\u540d\u79f0\u3002  9. \u627e\u51fa\u7a0b\u5e8f\u8fd0\u884c\u7684\u7aef\u53e3 \n\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fdb\u7a0b\u90fd\u80fd\u627e\u5230\uff0c\u6ca1\u6709\u6743\u9650\u7684\u4f1a\u4e0d\u663e\u793a\uff0c\u4f7f\u7528 root \u6743\u9650\u67e5\u770b\u6240\u6709\u7684\u4fe1\u606f\u3002  # netstat -ap | grep ssh\n tcp        1      0 dev-db:ssh           101.174.100.22:39213        CLOSE_WAIT  -\n tcp        1      0 dev-db:ssh           101.174.100.22:57643        CLOSE_WAIT  -  \u627e\u51fa\u8fd0\u884c\u5728\u6307\u5b9a\u7aef\u53e3\u7684\u8fdb\u7a0b\n  # netstat -an | grep ':80'  10. \u663e\u793a\u7f51\u7edc\u63a5\u53e3\u5217\u8868  # netstat -i\n Kernel Interface table\n Iface   MTU Met   RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\n eth0       1500 0         0      0      0 0             0      0      0      0 BMU\n eth2       1500 0     26196      0      0 0         26883      6      0      0 BMRU\n lo        16436 0         4      0      0 0             4      0      0      0 LRU  \u663e\u793a\u8be6\u7ec6\u4fe1\u606f\uff0c\u50cf\u662f ifconfig \u4f7f\u7528 netstat -ie:\n  # netstat -ie\n Kernel Interface table\n eth0      Link encap:Ethernet  HWaddr 00:10:40:11:11:11\n UP BROADCAST MULTICAST  MTU:1500  Metric:1\n RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n collisions:0 txqueuelen:1000\n RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n Memory:f6ae0000-f6b00000  11. IP\u548cTCP\u5206\u6790  \u67e5\u770b\u8fde\u63a5\u67d0\u670d\u52a1\u7aef\u53e3\u6700\u591a\u7684\u7684IP\u5730\u5740\n  wss8848@ubuntu:~$ netstat -nat | grep \"192.168.1.15:22\" |awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -nr|head -20\n18 221.136.168.36\n3 154.74.45.242\n2 78.173.31.236\n2 62.183.207.98\n2 192.168.1.14\n2 182.48.111.215\n2 124.193.219.34\n2 119.145.41.2\n2 114.255.41.30\n1 75.102.11.99  TCP\u5404\u79cd\u72b6\u6001\u5217\u8868  wss8848@ubuntu:~$ netstat -nat |awk '{print $6}'\nestablished)\nForeign\nLISTEN\nTIME_WAIT\nESTABLISHED\nTIME_WAIT\nSYN_SENT", 
            "title": "\u663e\u793a TCP \u6216 UDP \u7aef\u53e3\u7684\u7edf\u8ba1\u4fe1\u606f netstat -st \u6216 -su"
        }, 
        {
            "location": "/linux/#_4", 
            "text": "\u56e0\u4e3a\u5b89\u5168\u95ee\u9898elasticsearch \u4e0d\u8ba9\u7528root\u7528\u6237\u76f4\u63a5\u8fd0\u884c\uff0c\u6240\u4ee5\u8981\u521b\u5efa\u65b0\u7528\u6237  \u7b2c\u4e00\u6b65\uff1aliunx\u521b\u5efa\u65b0\u7528\u6237  adduser XXX    \u7136\u540e\u7ed9\u521b\u5efa\u7684\u7528\u6237\u52a0\u5bc6\u7801 passwd XXX    \u8f93\u5165\u4e24\u6b21\u5bc6\u7801\u3002  \u7b2c\u4e8c\u6b65\uff1a\u5207\u6362\u521a\u624d\u521b\u5efa\u7684\u7528\u6237 su XXX  \u7136\u540e\u6267\u884celasticsearch  \u4f1a\u663e\u793aPermission denied \u6743\u9650\u4e0d\u8db3\u3002  \u7b2c\u4e09\u6b65\uff1aroot\u7ed9XXX\u8d4b\u6743\u9650\uff0cchown -R XXX /\u4f60\u7684elasticsearch\u5b89\u88c5\u76ee\u5f55\u3002   \u7136\u540e\u6267\u884c\u6210\u529f\u3002", 
            "title": "\u65b0\u589e\u7528\u6237&amp;\u7528\u6237\u7ec4"
        }, 
        {
            "location": "/centos7-nginx/", 
            "text": "centos7 install nginx\n\n\n1.\u6dfb\u52a0Nginx\u5230YUM\u6e90\n\n\n\u6dfb\u52a0CentOS 7 Nginx yum\u8d44\u6e90\u5e93,\u6253\u5f00\u7ec8\u7aef,\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4:\n\n\nsudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n\n\n\n\n2.\u5b89\u88c5Nginx\n\n\n\u5728\u4f60\u7684CentOS 7 \u670d\u52a1\u5668\u4e2d\u4f7f\u7528yum\u547d\u4ee4\u4eceNginx\u6e90\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u6765\u5b89\u88c5Nginx\uff1a\n\n\nsudo yum install -y nginx\n\n\n\n\nNginx\u5c06\u5b8c\u6210\u5b89\u88c5\u5728\u4f60\u7684CentOS 7 \u670d\u52a1\u5668\u4e2d\n\n\n3.\u542f\u52a8Nginx\n\n\n\u521a\u5b89\u88c5\u7684Nginx\u4e0d\u4f1a\u81ea\u884c\u542f\u52a8\u3002\u8fd0\u884cNginx:\n\n\nsudo systemctl start nginx.service\n\n\n\n\n\u5982\u679c\u4e00\u5207\u8fdb\u5c55\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f60\u7684\u57df\u540d\u6216IP\u6765\u8bbf\u95ee\u4f60\u7684Web\u9875\u9762\u6765\u9884\u89c8\u4e00\u4e0bNginx\u7684\u9ed8\u8ba4\u9875\u9762\uff1b\n\n\nNginx\u914d\u7f6e\u4fe1\u606f\n\n\n\u7f51\u7ad9\u6587\u4ef6\u5b58\u653e\u9ed8\u8ba4\u76ee\u5f55\n\n\n/usr/share/nginx/html\n\n\n\n\n\u7f51\u7ad9\u9ed8\u8ba4\u7ad9\u70b9\u914d\u7f6e\n\n\n/etc/nginx/conf.d/default.conf\n\n\n\n\n\u81ea\u5b9a\u4e49Nginx\u7ad9\u70b9\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n\n\n/etc/nginx/conf.d/\n\n\n\n\nNginx\u5168\u5c40\u914d\u7f6e\n\n\n/etc/nginx/nginx.conf\n\n\n\n\nNginx\u542f\u52a8\n\n\nnginx -c nginx.conf", 
            "title": "nginx\u5b89\u88c5"
        }, 
        {
            "location": "/centos7-nginx/#centos7-install-nginx", 
            "text": "", 
            "title": "centos7 install nginx"
        }, 
        {
            "location": "/centos7-nginx/#1nginxyum", 
            "text": "\u6dfb\u52a0CentOS 7 Nginx yum\u8d44\u6e90\u5e93,\u6253\u5f00\u7ec8\u7aef,\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4:  sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm", 
            "title": "1.\u6dfb\u52a0Nginx\u5230YUM\u6e90"
        }, 
        {
            "location": "/centos7-nginx/#2nginx", 
            "text": "\u5728\u4f60\u7684CentOS 7 \u670d\u52a1\u5668\u4e2d\u4f7f\u7528yum\u547d\u4ee4\u4eceNginx\u6e90\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u6765\u5b89\u88c5Nginx\uff1a  sudo yum install -y nginx  Nginx\u5c06\u5b8c\u6210\u5b89\u88c5\u5728\u4f60\u7684CentOS 7 \u670d\u52a1\u5668\u4e2d", 
            "title": "2.\u5b89\u88c5Nginx"
        }, 
        {
            "location": "/centos7-nginx/#3nginx", 
            "text": "\u521a\u5b89\u88c5\u7684Nginx\u4e0d\u4f1a\u81ea\u884c\u542f\u52a8\u3002\u8fd0\u884cNginx:  sudo systemctl start nginx.service  \u5982\u679c\u4e00\u5207\u8fdb\u5c55\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f60\u7684\u57df\u540d\u6216IP\u6765\u8bbf\u95ee\u4f60\u7684Web\u9875\u9762\u6765\u9884\u89c8\u4e00\u4e0bNginx\u7684\u9ed8\u8ba4\u9875\u9762\uff1b", 
            "title": "3.\u542f\u52a8Nginx"
        }, 
        {
            "location": "/centos7-nginx/#nginx", 
            "text": "\u7f51\u7ad9\u6587\u4ef6\u5b58\u653e\u9ed8\u8ba4\u76ee\u5f55  /usr/share/nginx/html  \u7f51\u7ad9\u9ed8\u8ba4\u7ad9\u70b9\u914d\u7f6e  /etc/nginx/conf.d/default.conf  \u81ea\u5b9a\u4e49Nginx\u7ad9\u70b9\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u76ee\u5f55  /etc/nginx/conf.d/  Nginx\u5168\u5c40\u914d\u7f6e  /etc/nginx/nginx.conf  Nginx\u542f\u52a8  nginx -c nginx.conf", 
            "title": "Nginx\u914d\u7f6e\u4fe1\u606f"
        }, 
        {
            "location": "/restful/remark-restful-request/", 
            "text": "\u8bb0\u5f55\u4e00\u6b21\u8e29\u5751(consumes\u548cproduces\u7684\u7528\u6cd5)\n\n\n\u670d\u52a1\u63d0\u4f9b\u65b9\n\n\n\n\n\u8bf7\u6c42\u53c2\u6570\u5c31\u4e00\u4e2auserId,\u7528springmvc\u7684\u6a21\u5f0f\u7684controller\u6ce8\u89e3\u3002\n\n\n\u670d\u52a1\u8c03\u7528\u65b9\uff0c\u8fd9\u91cc\u91c7\u7528feign-client\n\n\n\n\n\n\n\u8fd9\u91cc\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9\n\n\n\u8bf7\u6c42\u7528requestParam\u6765\u6ce8\u89e3\u3002\u9ed8\u8ba4\u4f1a\u5728\u8bf7\u6c42\u53c2\u6570\u540e\u9762\u52a0\u4e0a?userId={userId}\u3002\n\n\n\u5bf9\u4e8eproduces\u548cconsumes\u7684\u7406\u89e3\uff0c\u8bf7\u770b\u5982\u4e0b\u622a\u56fe\u3002\n\n\n\n\n\n\n\n\n\n\n\u6240\u4ee5\uff0c\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u5bf9\u4e8e\u8bf7\u6c42\u65b9\u6ce8\u89e3produces\uff0c\u4ee3\u8868\u7684\u662fhttp\u62a5\u6587\u5934\u91cd\u7684Accept\u3002\u800cconsumes\u4ee3\u8868\u7684\u662fhttp\u62a5\u6587\u5934\u91cd\u7684Content-type\u3002\n\n\n\u6240\u4ee5\uff0c\u5927\u5bb6\u4e0d\u7528\u5f04\u53cd\u4e86\u54e6\u3002\u5982\u4e0b\uff0c\u518d\u5c06http\u7684\u62a5\u6587\u5934\u542b\u4e49\u91ca\u660e\u4e0b\uff1a\n\n\n1.Accept\u5c5e\u4e8e\u8bf7\u6c42\u5934\uff0c Content-Type\u5c5e\u4e8e\u5b9e\u4f53\u5934\u3002\n\nHttp\u62a5\u5934\u5206\u4e3a\u901a\u7528\u62a5\u5934\uff0c\u8bf7\u6c42\u62a5\u5934\uff0c\u54cd\u5e94\u62a5\u5934\u548c\u5b9e\u4f53\u62a5\u5934\u3002\n\n\u8bf7\u6c42\u65b9\u7684http\u62a5\u5934\u7ed3\u6784\uff1a\u901a\u7528\u62a5\u5934|\u8bf7\u6c42\u62a5\u5934|\u5b9e\u4f53\u62a5\u5934\n\n\u54cd\u5e94\u65b9\u7684http\u62a5\u5934\u7ed3\u6784\uff1a\u901a\u7528\u62a5\u5934|\u54cd\u5e94\u62a5\u5934|\u5b9e\u4f53\u62a5\u5934\n\n2.Accept\u4ee3\u8868\u53d1\u9001\u7aef\uff08\u5ba2\u6237\u7aef\uff09\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n\u6bd4\u5982\uff1aAccept\uff1atext/xml;\n\n\u4ee3\u8868\u5ba2\u6237\u7aef\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u662fxml\u7c7b\u578b\n\nContent-Type\u4ee3\u8868\u53d1\u9001\u7aef\uff08\u5ba2\u6237\u7aef|\u670d\u52a1\u5668\uff09\u53d1\u9001\u7684\u5b9e\u4f53\u6570\u636e\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n\u6bd4\u5982\uff1aContent-Type\uff1atext/html;\n\n\u4ee3\u8868\u53d1\u9001\u7aef\u53d1\u9001\u7684\u6570\u636e\u683c\u5f0f\u662fhtml\u3002\n\n\u4e8c\u8005\u5408\u8d77\u6765\uff0c\n\nAccept:text/xml\uff1b\n\nContent-Type:text/html\n\n\u5373\u4ee3\u8868\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u662fxml\u683c\u5f0f\uff0c\u672c\u6b21\u8bf7\u6c42\u53d1\u9001\u7684\u6570\u636e\u7684\u6570\u636e\u683c\u5f0f\u662fhtml\u3002\n\n\u4f5c\u8005\uff1aAwesomeChen\n\u94fe\u63a5\uff1ahttp://www.jianshu.com/p/2359ff7d1800\n\u4f86\u6e90\uff1a\u7b80\u4e66\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002", 
            "title": "produces\u548cconsumes\u6ce8\u89e3"
        }, 
        {
            "location": "/restful/remark-restful-request/#consumesproduces", 
            "text": "", 
            "title": "\u8bb0\u5f55\u4e00\u6b21\u8e29\u5751(consumes\u548cproduces\u7684\u7528\u6cd5)"
        }, 
        {
            "location": "/restful/remark-restful-request/#_1", 
            "text": "\u8bf7\u6c42\u53c2\u6570\u5c31\u4e00\u4e2auserId,\u7528springmvc\u7684\u6a21\u5f0f\u7684controller\u6ce8\u89e3\u3002", 
            "title": "\u670d\u52a1\u63d0\u4f9b\u65b9"
        }, 
        {
            "location": "/restful/remark-restful-request/#feign-client", 
            "text": "\u8fd9\u91cc\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9  \u8bf7\u6c42\u7528requestParam\u6765\u6ce8\u89e3\u3002\u9ed8\u8ba4\u4f1a\u5728\u8bf7\u6c42\u53c2\u6570\u540e\u9762\u52a0\u4e0a?userId={userId}\u3002  \u5bf9\u4e8eproduces\u548cconsumes\u7684\u7406\u89e3\uff0c\u8bf7\u770b\u5982\u4e0b\u622a\u56fe\u3002      \u6240\u4ee5\uff0c\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u5bf9\u4e8e\u8bf7\u6c42\u65b9\u6ce8\u89e3produces\uff0c\u4ee3\u8868\u7684\u662fhttp\u62a5\u6587\u5934\u91cd\u7684Accept\u3002\u800cconsumes\u4ee3\u8868\u7684\u662fhttp\u62a5\u6587\u5934\u91cd\u7684Content-type\u3002  \u6240\u4ee5\uff0c\u5927\u5bb6\u4e0d\u7528\u5f04\u53cd\u4e86\u54e6\u3002\u5982\u4e0b\uff0c\u518d\u5c06http\u7684\u62a5\u6587\u5934\u542b\u4e49\u91ca\u660e\u4e0b\uff1a  1.Accept\u5c5e\u4e8e\u8bf7\u6c42\u5934\uff0c Content-Type\u5c5e\u4e8e\u5b9e\u4f53\u5934\u3002\n\nHttp\u62a5\u5934\u5206\u4e3a\u901a\u7528\u62a5\u5934\uff0c\u8bf7\u6c42\u62a5\u5934\uff0c\u54cd\u5e94\u62a5\u5934\u548c\u5b9e\u4f53\u62a5\u5934\u3002\n\n\u8bf7\u6c42\u65b9\u7684http\u62a5\u5934\u7ed3\u6784\uff1a\u901a\u7528\u62a5\u5934|\u8bf7\u6c42\u62a5\u5934|\u5b9e\u4f53\u62a5\u5934\n\n\u54cd\u5e94\u65b9\u7684http\u62a5\u5934\u7ed3\u6784\uff1a\u901a\u7528\u62a5\u5934|\u54cd\u5e94\u62a5\u5934|\u5b9e\u4f53\u62a5\u5934\n\n2.Accept\u4ee3\u8868\u53d1\u9001\u7aef\uff08\u5ba2\u6237\u7aef\uff09\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n\u6bd4\u5982\uff1aAccept\uff1atext/xml;\n\n\u4ee3\u8868\u5ba2\u6237\u7aef\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u662fxml\u7c7b\u578b\n\nContent-Type\u4ee3\u8868\u53d1\u9001\u7aef\uff08\u5ba2\u6237\u7aef|\u670d\u52a1\u5668\uff09\u53d1\u9001\u7684\u5b9e\u4f53\u6570\u636e\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n\u6bd4\u5982\uff1aContent-Type\uff1atext/html;\n\n\u4ee3\u8868\u53d1\u9001\u7aef\u53d1\u9001\u7684\u6570\u636e\u683c\u5f0f\u662fhtml\u3002\n\n\u4e8c\u8005\u5408\u8d77\u6765\uff0c\n\nAccept:text/xml\uff1b\n\nContent-Type:text/html\n\n\u5373\u4ee3\u8868\u5e0c\u671b\u63a5\u53d7\u7684\u6570\u636e\u7c7b\u578b\u662fxml\u683c\u5f0f\uff0c\u672c\u6b21\u8bf7\u6c42\u53d1\u9001\u7684\u6570\u636e\u7684\u6570\u636e\u683c\u5f0f\u662fhtml\u3002\n\n\u4f5c\u8005\uff1aAwesomeChen\n\u94fe\u63a5\uff1ahttp://www.jianshu.com/p/2359ff7d1800\n\u4f86\u6e90\uff1a\u7b80\u4e66\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002", 
            "title": "\u670d\u52a1\u8c03\u7528\u65b9\uff0c\u8fd9\u91cc\u91c7\u7528feign-client"
        }, 
        {
            "location": "/jenkins/jenkins/", 
            "text": "startup remind\n\n\njava -jar -DhttpPort=8080 -Dhudson.util.ProcessTree.disable=true  jenkins.war\n\n\napp startup command\n\n\nBUILD_ID=dontKillMe nohup java -jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar  \n server.log 2\n1", 
            "title": "jenkins\u4f7f\u7528"
        }, 
        {
            "location": "/jenkins/jenkins/#startup-remind", 
            "text": "java -jar -DhttpPort=8080 -Dhudson.util.ProcessTree.disable=true  jenkins.war", 
            "title": "startup remind"
        }, 
        {
            "location": "/jenkins/jenkins/#app-startup-command", 
            "text": "BUILD_ID=dontKillMe nohup java -jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar    server.log 2 1", 
            "title": "app startup command"
        }, 
        {
            "location": "/jenkins/jenkins-ci/", 
            "text": "CI \u8bf4\u660e\n\n\n\u8bf7\u53c2\u89c1\njenkins\u5b98\u7f51\n\n\njenkins\u5b89\u88c5\n\n\n\u4e24\u79cd\u65b9\u5f0f\n\n\n\n\ndocker\u65b9\u5f0f-\u5efa\u8bae\u5b89\u88c5\nblue ocean\u7248\u672c\n\n\nwar\u5305\u65b9\u5f0f\uff0c\u5355\u70b9\u90e8\u7f72\u3002\u542f\u52a8\u547d\u4ee4\uff1ajava -jar -DhttpPort=8080 -Dhudson.util.ProcessTree.disable=true  jenkins.war\n\n\n\n\ndocker\u542f\u52a8\u547d\u4ee4\n\n\n\u53ef\u4ee5\u53c2\u89c1\u5b98\u7f51\u7684\u542f\u52a8\u65b9\u5f0f\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6307\u5b9a\u597djenkins\u7684\u76ee\u5f55\uff0c\u548c\u672c\u5730\u76ee\u5f55\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5982\u6211\u672c\u5730\u5c31\u662f\n\n\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u548c\u672c\u5730\u4f7f\u7528\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u4e86\u3002\n\n\nci\u914d\u7f6e\n\n\njenkins\u914d\u7f6e\uff1a\n\n\n\n\nstep1: jenkins\u4e3b\u9875\u9762-\nnew item\n\n\nstep2: \u586b\u5199\u9879\u76ee\u540d\u5b57,\u9009\u62e9pipeline\n\n\nstep3: \u8fdb\u5165\u4e3b\u9875\u9762\uff0c\u5b89\u88c5\u51e0\u4e2a\u63d2\u4ef6\uff1agitlab plugin \u8fd8\u6709\u4e00\u4e2a\u662fgitlab hook plugin\u3002\n\n\nstep4: \u5728\u521a\u624d\u7684item\u7684\u914d\u7f6e\u9875\u9762\uff0c\u8fdb\u5165build triggers\n\n\nstep5: \u9009\u62e9\u201cuild when a change is pushed to GitLab. GitLab CI Service URL: http://localhost:8080/project/datasource-demo\u201d\n\n\n\u5728pipline\u4e2d\u9009\u62e9script,\u5177\u4f53\u7684\u53d8\u91cf\u81ea\u5df1\u6309\u7167\u673a\u5668\u5b9a\u4e49\n\n\n\n\nnode {\n   def mvnHome\n   stage('Preparation') { // for display purposes\n      // Get some code from a GitHub repository\n      git 'http://gitlab.paifenlecorp.com/tars/tars-datainfo.git'\n      // Get the Maven tool.\n      // ** NOTE: This 'M3' Maven tool must be configured\n      // **       in the global configuration.           \n      mvnHome = '/usr/local/maven/apache-maven-3.3.9'\n   }\n   stage('Build') {\n      // Run the maven build\n      if (isUnix()) {\n         sh \n'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\n\n      } else {\n         bat(/\n${mvnHome}\\bin\\mvn\n -Dmaven.test.failure.ignore clean package/)\n      }\n   }\n   stage('run') {\n       sh \n/Users/junzhang/Downloads/jenkins-shell/stop.sh\n\n       sh \n/Users/junzhang/Downloads/jenkins-shell/replace.sh\n\n       sh \n/Users/junzhang/Downloads/jenkins-shell/startup.sh\n\n\n   }\n}\n\n\n\n\n\n\nstop\u811a\u672c\n\n\n\n\n# \u5c06\u5e94\u7528\u505c\u6b62\n#stop.sh\n#!/bin/bash\necho \nStopping SpringBoot Application\n\npid=`ps -ef | grep demo.jar | grep -v grep | awk '{print $2}'`\nif [ -n \n$pid\n ]\nthen\n   kill -9 $pid\nfi\n\n\n\n\n\n\nreplace\u811a\u672c\n\n\n\n\n#replace.sh \u7528\u4e8e\u5c06\u4e0a\u6b21\u6784\u5efa\u7684\u7ed3\u679c\u5907\u4efd\uff0c\u7136\u540e\u5c06\u65b0\u7684\u6784\u5efa\u7ed3\u679c\u79fb\u52a8\u5230\u5408\u9002\u7684\u4f4d\u7f6e\n#!/bin/bash\n# \u5148\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u5907\u4efd\ncd /Users/junzhang/.jenkins/workspace/datasource-demo/\n#mvn clean install -Dmaven.test.skip\nfile=\n/usr/local/SBA/model.jar\n\nif [ -f \n$file\n ]\nthen\n   mv /Users/junzhang/.jenkins/workspace/datasource-demo/target/tars-datainfo-1.0-SNAPSHOT.jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar.`date +%Y%m%d%H%M%S`\nfi\nmv /Users/junzhang/.jenkins/workspace/datasource-demo/target/tars-datainfo-1.0-SNAPSHOT.jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar\n\n\n\n\n\n\n\nstartup\u811a\u672c\n\n\n\n\n# startup.sh \u542f\u52a8\u9879\u76ee\n#!/bin/sh\necho \n\u6388\u4e88\u5f53\u524d\u7528\u6237\u6743\u9650\n\nchmod 777 /Users/junzhang/Downloads/jenkins-shell/demo.jar\necho \n\u6267\u884c.....\n\nBUILD_ID=dontKillMe nohup java -jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar  \n server.log 2\n1 \n\n\n\n\n\ngitlab\u914d\u7f6e\n\n\n\n\n\u8fdb\u5165\u9879\u76ee\u7684\u914d\u7f6e\u9875\u9762\uff0c\u9009\u62e9webhooks\n\n\n\n\u65b0\u5efa\u4e00\u4e2awebhook\n\n\n\n\n\n\u6700\u7ec8\u6548\u679c\n\n\n\u5728gitlab\u4e0a\u63d0\u4ea4\u4e00\u4e2a\u4ee3\u7801\u8fd9\u4e2a\u65f6\u5019\u4f1a\u81ea\u52a8\u89e6\u53d1\n\n\n\n\u5728blue ocean\u4e0a\u4e5f\u80fd\u770b\u5230\u7f16\u8bd1\u7684\u6b65\u9aa4\uff1a", 
            "title": "jenkins ci"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#ci", 
            "text": "\u8bf7\u53c2\u89c1 jenkins\u5b98\u7f51", 
            "title": "CI \u8bf4\u660e"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#jenkins", 
            "text": "", 
            "title": "jenkins\u5b89\u88c5"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#_1", 
            "text": "docker\u65b9\u5f0f-\u5efa\u8bae\u5b89\u88c5 blue ocean\u7248\u672c  war\u5305\u65b9\u5f0f\uff0c\u5355\u70b9\u90e8\u7f72\u3002\u542f\u52a8\u547d\u4ee4\uff1ajava -jar -DhttpPort=8080 -Dhudson.util.ProcessTree.disable=true  jenkins.war", 
            "title": "\u4e24\u79cd\u65b9\u5f0f"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#docker", 
            "text": "\u53ef\u4ee5\u53c2\u89c1\u5b98\u7f51\u7684\u542f\u52a8\u65b9\u5f0f  \u8fd9\u91cc\u9700\u8981\u6307\u5b9a\u597djenkins\u7684\u76ee\u5f55\uff0c\u548c\u672c\u5730\u76ee\u5f55\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5982\u6211\u672c\u5730\u5c31\u662f  \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u548c\u672c\u5730\u4f7f\u7528\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u4e86\u3002", 
            "title": "docker\u542f\u52a8\u547d\u4ee4"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#ci_1", 
            "text": "", 
            "title": "ci\u914d\u7f6e"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#jenkins_1", 
            "text": "step1: jenkins\u4e3b\u9875\u9762- new item  step2: \u586b\u5199\u9879\u76ee\u540d\u5b57,\u9009\u62e9pipeline  step3: \u8fdb\u5165\u4e3b\u9875\u9762\uff0c\u5b89\u88c5\u51e0\u4e2a\u63d2\u4ef6\uff1agitlab plugin \u8fd8\u6709\u4e00\u4e2a\u662fgitlab hook plugin\u3002  step4: \u5728\u521a\u624d\u7684item\u7684\u914d\u7f6e\u9875\u9762\uff0c\u8fdb\u5165build triggers  step5: \u9009\u62e9\u201cuild when a change is pushed to GitLab. GitLab CI Service URL: http://localhost:8080/project/datasource-demo\u201d  \u5728pipline\u4e2d\u9009\u62e9script,\u5177\u4f53\u7684\u53d8\u91cf\u81ea\u5df1\u6309\u7167\u673a\u5668\u5b9a\u4e49   node {\n   def mvnHome\n   stage('Preparation') { // for display purposes\n      // Get some code from a GitHub repository\n      git 'http://gitlab.paifenlecorp.com/tars/tars-datainfo.git'\n      // Get the Maven tool.\n      // ** NOTE: This 'M3' Maven tool must be configured\n      // **       in the global configuration.           \n      mvnHome = '/usr/local/maven/apache-maven-3.3.9'\n   }\n   stage('Build') {\n      // Run the maven build\n      if (isUnix()) {\n         sh  '${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package \n      } else {\n         bat(/ ${mvnHome}\\bin\\mvn  -Dmaven.test.failure.ignore clean package/)\n      }\n   }\n   stage('run') {\n       sh  /Users/junzhang/Downloads/jenkins-shell/stop.sh \n       sh  /Users/junzhang/Downloads/jenkins-shell/replace.sh \n       sh  /Users/junzhang/Downloads/jenkins-shell/startup.sh \n\n   }\n}   stop\u811a\u672c   # \u5c06\u5e94\u7528\u505c\u6b62\n#stop.sh\n#!/bin/bash\necho  Stopping SpringBoot Application \npid=`ps -ef | grep demo.jar | grep -v grep | awk '{print $2}'`\nif [ -n  $pid  ]\nthen\n   kill -9 $pid\nfi   replace\u811a\u672c   #replace.sh \u7528\u4e8e\u5c06\u4e0a\u6b21\u6784\u5efa\u7684\u7ed3\u679c\u5907\u4efd\uff0c\u7136\u540e\u5c06\u65b0\u7684\u6784\u5efa\u7ed3\u679c\u79fb\u52a8\u5230\u5408\u9002\u7684\u4f4d\u7f6e\n#!/bin/bash\n# \u5148\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u5907\u4efd\ncd /Users/junzhang/.jenkins/workspace/datasource-demo/\n#mvn clean install -Dmaven.test.skip\nfile= /usr/local/SBA/model.jar \nif [ -f  $file  ]\nthen\n   mv /Users/junzhang/.jenkins/workspace/datasource-demo/target/tars-datainfo-1.0-SNAPSHOT.jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar.`date +%Y%m%d%H%M%S`\nfi\nmv /Users/junzhang/.jenkins/workspace/datasource-demo/target/tars-datainfo-1.0-SNAPSHOT.jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar   startup\u811a\u672c   # startup.sh \u542f\u52a8\u9879\u76ee\n#!/bin/sh\necho  \u6388\u4e88\u5f53\u524d\u7528\u6237\u6743\u9650 \nchmod 777 /Users/junzhang/Downloads/jenkins-shell/demo.jar\necho  \u6267\u884c..... \nBUILD_ID=dontKillMe nohup java -jar  /Users/junzhang/Downloads/jenkins-shell/demo.jar    server.log 2 1", 
            "title": "jenkins\u914d\u7f6e\uff1a"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#gitlab", 
            "text": "\u8fdb\u5165\u9879\u76ee\u7684\u914d\u7f6e\u9875\u9762\uff0c\u9009\u62e9webhooks  \u65b0\u5efa\u4e00\u4e2awebhook", 
            "title": "gitlab\u914d\u7f6e"
        }, 
        {
            "location": "/jenkins/jenkins-ci/#_2", 
            "text": "\u5728gitlab\u4e0a\u63d0\u4ea4\u4e00\u4e2a\u4ee3\u7801\u8fd9\u4e2a\u65f6\u5019\u4f1a\u81ea\u52a8\u89e6\u53d1  \u5728blue ocean\u4e0a\u4e5f\u80fd\u770b\u5230\u7f16\u8bd1\u7684\u6b65\u9aa4\uff1a", 
            "title": "\u6700\u7ec8\u6548\u679c"
        }
    ]
}